
//
// This file contains partial parser defition for programs only
//


List<ASTStatement> StatementList():
{
	List<ASTStatement> list = new ArrayList<ASTStatement>();
	ASTStatement st;
}
{
	( LOOKAHEAD(2)
	  st=Statement() { list.add(st); }
	| st=SourceLineStatement() { list.add(st); } 
	| st=LabelStatement() { list.add(st); } 
	)+
	{ return list; }
}

ASTSourceLineStatement SourceLineStatement():
{
	Token kw, argument;
}
{
	kw="sourceline" argument=<NATURAL>
	{ return new ASTSourceLineStatement(kw,argument); }
}

ASTLabelStatement LabelStatement():
{
	Token label;
}
{         ( label = <IDENTIFIER> ":" 
	     { return new ASTLabelStatement(label); }
	  )
}

ASTStatement Statement():
{
	ASTTerm term;
	Token kw;
	ASTAssignmentStatement assignment;
	List<ASTTerm> termList;
}
{
	  kw="assert" term=Term() { return new ASTAssertStatement(kw, term); }
	| kw="assume" term=Term() { return new ASTAssumeStatement(kw, term); }
	| kw="end" term=Term() { return new ASTEndStatement(kw, term); }
	| kw="skip_loopinv" termList=Statement_TermList()
	            { return new ASTSkipStatement(kw, termList); }
	| kw="skip" { return new ASTSkipStatement(kw); }
	| kw="havoc" (term=Identifier() | term=SchemaVariable()) 
	            { return new ASTHavocStatement(kw, term); }
	| assignment=Assignment() { return assignment; }
	| kw="goto" termList=Statement_TermList()
	     { return new ASTGotoStatement(kw, termList); }
}

ASTAssignmentStatement Assignment():
{
	ASTTerm target;
	ASTTerm term;
	Token t;
}
{
	( target=SchemaVariable()
	| t=<IDENTIFIER>  { target = new ASTIdentifierTerm(t); }
	)
	":=" term=Term()
	{ return new ASTAssignmentStatement(target, term); }
}
	
List<ASTTerm> Statement_TermList():
{
    List<ASTTerm> targets = new LinkedList<ASTTerm>();
    ASTTerm t;
}
{
    (t=Term())
    { targets.add(t); }
    
    ( "," 
      (t=Term())
        { targets.add(t); }
    )?
    { return targets; }
}

<?xml version="1.0"?>
<proof format="1"><info>
    <date>Fri Mar 04 14:40:47 CET 2011</date>
    <version>0.0</version>
    <problem>|- [0;Dij]</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="auto_assume" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;(\forall y as node;$gte(weight(\var x as node,\var y as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[0;Dij] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="1">
      <find>S.0</find>
      <schemavariable name="%a">[1;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="2">
      <find>S.0.0</find>
      <schemavariable name="%a">[2;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="3">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) }([3;Dij] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="4">
      <find>S.0.2</find>
      <schemavariable name="%t">write(distance as map(node,int),start as node,0 as int) as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="5">
      <find>S.0.0</find>
      <schemavariable name="%a">[3;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="6">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := singleton(start as node) as set(node) }([4;Dij] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset || distance := write(distance,start,0) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="7">
      <find>S.0.2</find>
      <schemavariable name="%t">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset || distance := write(distance,start,0) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="8">
      <find>S.0.0</find>
      <schemavariable name="%a">[4;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="9">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := emptyset as set(node) }([5;Dij] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="10">
      <find>S.0.3</find>
      <schemavariable name="%t">emptyset as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_loop_invariant_update" path="" id="11">
      <find>S.0</find>
      <schemavariable name="%inv">$and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[5;Dij] as bool</schemavariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0" id="12">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_in_anyset" path="0" id="13">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%s">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="2">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="14">
      <find>S.0.0.0.0</find>
      <schemavariable name="%a">$eq(read(write(distance as map(node,int),start as node,0 as int) as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="15">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%a2">start as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="16">
      <find>S.0.0.0.0.0.0</find>
      <schemavariable name="%t">start as node</schemavariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cond_true" path="0" id="17">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%b">read(distance as map(node,int),start as node) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="18">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="19">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$mem(start as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="20">
      <find>S.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">start as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="21">
      <find>S.0.0.0</find>
      <schemavariable name="%t">start as node</schemavariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="22">
      <find>S.0.0</find>
      <schemavariable name="%a">(\forall x as node;$impl($mem(\var x as node,singleton(start as node) as set(node)) as bool,$gte(read(write(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="23">
      <find>S.0.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="24">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="0" id="25">
      <find>S.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="26">
      <find>S.0.1.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="27">
      <find>S.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="28">
      <find>S.0.1.0.1.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="29">
      <find>S.0.1.0.1.0.1.0</find>
      <schemavariable name="%a2">\var y as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="30">
      <find>S.0.1.0.1.0.1.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0" id="31">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($eq(\var y as node,start as node) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($eq(\var x as node,start as node) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,\var y as node) as bool,0 as int,read(distance as map(node,int),\var y as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">(\forall x as node;$impl($eq(\var x as node,start as node) as bool,$gte(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0" id="32">
      <find>S.0</find>
      <schemavariable name="%b">$impl($eq(\var x as node,start as node) as bool,$gte(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0" id="33">
      <find>S.0</find>
      <schemavariable name="%b">$gte(cond($eq(start as node,x as node) as bool,0 as int,read(distance as map(node,int),x as node) as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(x as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0" id="34">
      <find>A.1</find>
      <schemavariable name="%u">start as node</schemavariable>
      <schemavariable name="%t">x as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0" id="35">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,1" id="36">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($eq(\var y as node,start as node) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($eq(\var x as node,start as node) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,\var y as node) as bool,0 as int,read(distance as map(node,int),\var y as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1" id="37">
      <find>S.0</find>
      <schemavariable name="%b">(\exists x as node;$and($and($eq(\var x as node,start as node) as bool,$mem(pair(\var x as node,y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,y as node) as bool,0 as int,read(distance as map(node,int),y as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,y as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(y as node,start as node) as bool,$not($eq(y as node,start as node) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="38">
      <find>A.1</find>
      <schemavariable name="%b">$not($eq(y as node,start as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$eq(y as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,1" id="39">
      <find>A.2</find>
      <schemavariable name="%b">$eq(y as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1" id="40">
      <find>S.1</find>
      <assume>A.1</assume>
      <schemavariable name="%b">$eq(y as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="41">
      <find>S.0</find>
      <schemavariable name="%v">visited as set(node)</schemavariable>
      <schemavariable name="%a">[7;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := emptyset }</schemaupdate>
      <property name="skolemName(visited as set(node))">visited1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="42">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := visited1 as set(node) }([8;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="43">
      <find>S.0.3</find>
      <schemavariable name="%t">visited1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := emptyset }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="44">
      <find>S.0</find>
      <schemavariable name="%v">distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[8;Dij'] as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := visited1 }</schemaupdate>
      <property name="skolemName(distance as map(node,int))">distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="45">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := distance1 as map(node,int) }([9;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := visited1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="46">
      <find>S.0.3</find>
      <schemavariable name="%t">distance1 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ distance := write(distance,start,0) || dom_distance := singleton(start) || visited := visited1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="47">
      <find>S.0</find>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[9;Dij'] as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 }</schemaupdate>
      <property name="skolemName(d as int)">d1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="48">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d1 as int }([10;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="49">
      <find>S.0.4</find>
      <schemavariable name="%t">d1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="50">
      <find>S.0</find>
      <schemavariable name="%v">u as node</schemavariable>
      <schemavariable name="%a">[10;Dij'] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 }</schemaupdate>
      <property name="skolemName(u as node)">u1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="51">
      <find>S.0</find>
      <schemavariable name="%t">{ u := u1 as node }([11;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="52">
      <find>S.0.5</find>
      <schemavariable name="%t">u1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="53">
      <find>S.0</find>
      <schemavariable name="%v">S as set(prod(node,node))</schemavariable>
      <schemavariable name="%a">[11;Dij'] as bool</schemavariable>
      <typevariable name="v">set(prod(node,node))</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 }</schemaupdate>
      <property name="skolemName(S as set(prod(node,node)))">S1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="54">
      <find>S.0</find>
      <schemavariable name="%t">{ S := S1 as set(prod(node,node)) }([12;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="55">
      <find>S.0.6</find>
      <schemavariable name="%t">S1 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="56">
      <find>S.0</find>
      <schemavariable name="%v">n as node</schemavariable>
      <schemavariable name="%a">[12;Dij'] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 }</schemaupdate>
      <property name="skolemName(n as node)">n1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="57">
      <find>S.0</find>
      <schemavariable name="%t">{ n := n1 as node }([13;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="58">
      <find>S.0.7</find>
      <schemavariable name="%t">n1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="59">
      <find>S.0</find>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[13;Dij'] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 }</schemaupdate>
      <property name="skolemName(o as node)">o1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="60">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o1 as node }([14;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="61">
      <find>S.0.8</find>
      <schemavariable name="%t">o1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="62">
      <find>S.0</find>
      <schemavariable name="%v">old_distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[14;Dij'] as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 }</schemaupdate>
      <property name="skolemName(old_distance as map(node,int))">old_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="63">
      <find>S.0</find>
      <schemavariable name="%t">{ old_distance := old_distance1 as map(node,int) }([15;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="64">
      <find>S.0.9</find>
      <schemavariable name="%t">old_distance1 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="65">
      <find>S.0</find>
      <schemavariable name="%v">old_dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[15;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 }</schemaupdate>
      <property name="skolemName(old_dom_distance as set(node))">old_dom_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="66">
      <find>S.0</find>
      <schemavariable name="%t">{ old_dom_distance := old_dom_distance1 as set(node) }([16;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="67">
      <find>S.0.10</find>
      <schemavariable name="%t">old_dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="68">
      <find>S.0</find>
      <schemavariable name="%v">dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[16;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 }</schemaupdate>
      <property name="skolemName(dom_distance as set(node))">dom_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="69">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := dom_distance1 as set(node) }([17;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="70">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start) || visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1" id="71">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="72">
      <find>A.1</find>
      <schemavariable name="%t">$and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="73">
      <find>A.1</find>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance1 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="74">
      <find>A.1</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="75">
      <find>A.1</find>
      <schemavariable name="%b">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="76">
      <find>A.1</find>
      <schemavariable name="%b">$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$subset(visited1 as set(node),dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1" id="77">
      <find>A.2.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1" id="78">
      <find>A.2.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1" id="79">
      <find>S.0</find>
      <schemavariable name="%k">49 as int</schemavariable>
      <schemavariable name="%n">19 as int</schemavariable>
      <schemavariable name="%a">[18;Dij'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0" id="80">
      <find>S.0</find>
      <schemavariable name="%b">$not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[19;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="81">
      <find>A.6</find>
      <schemavariable name="%t">$not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,0" id="82">
      <find>A.6.0</find>
      <schemavariable name="%s">$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0" id="83">
      <find>A.6</find>
      <schemavariable name="%b">(\forall xx as node;$not($mem(\var xx as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0" id="84">
      <find>S.1</find>
      <schemavariable name="%b">$not($mem(\var xx as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var xx as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var xx as node)">xx</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0" id="85">
      <find>S.1</find>
      <schemavariable name="%b">$mem(xx as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0" id="86">
      <find>A.6</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">xx as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0" id="87">
      <find>A.6</find>
      <schemavariable name="%b">$not($mem(xx as node,visited1 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(xx as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0" id="88">
      <find>A.7</find>
      <schemavariable name="%b">$mem(xx as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0" id="89">
      <find>S.0</find>
      <schemavariable name="%b">(\exists n as node;$and($and($not($mem(\var n as node,visited as set(node)) as bool) as bool,$mem(\var n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),\var n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[20;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,0" id="90">
      <find>S.0</find>
      <schemavariable name="%t">(\exists n as node;$and($and($not($mem(\var n as node,visited as set(node)) as bool) as bool,$mem(\var n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),\var n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,0" id="91">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var m as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="OOPS" path="1,0,0" id="92">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1" id="93">
      <find>S.0</find>
      <schemavariable name="%v">n as node</schemavariable>
      <schemavariable name="%a">[21;Dij'] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
      <property name="skolemName(n as node)">n2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="94">
      <find>S.0</find>
      <schemavariable name="%t">{ n := n2 as node }([22;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="95">
      <find>S.0.10</find>
      <schemavariable name="%t">n2 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1" id="96">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($not($mem(n as node,visited as set(node)) as bool) as bool,$mem(n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[22;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="97">
      <find>A.7</find>
      <schemavariable name="%t">$and($and($not($mem(n as node,visited as set(node)) as bool) as bool,$mem(n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1" id="98">
      <find>A.7</find>
      <schemavariable name="%b">(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool,$lte(read(distance1 as map(node,int),n2 as node) as int,read(distance1 as map(node,int),\var m as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($not($mem(n2 as node,visited1 as set(node)) as bool) as bool,$mem(n2 as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1" id="99">
      <find>A.7</find>
      <schemavariable name="%b">$mem(n2 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$not($mem(n2 as node,visited1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1" id="100">
      <find>A.7</find>
      <schemavariable name="%b">$mem(n2 as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1" id="101">
      <find>A.7.0.0</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var m as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1" id="102">
      <find>S.0.0</find>
      <schemavariable name="%a">[23;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := $union(visited,singleton(n)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="103">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := $union(visited as set(node),singleton(n as node) as set(node)) as set(node) }([24;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="104">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(visited as set(node),singleton(n as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1" id="105">
      <find>S.0</find>
      <schemavariable name="%b">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <schemavariable name="%a">[24;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,0" id="106">
      <find>S.0</find>
      <schemavariable name="%t">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="OOPS" path="1,0,1,0" id="107">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1" id="108">
      <find>S.0</find>
      <schemavariable name="%b">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <schemavariable name="%a">[25;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="109">
      <find>A.9</find>
      <schemavariable name="%t">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="110">
      <find>S.0.0</find>
      <schemavariable name="%a">[26;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ old_distance := distance }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="111">
      <find>S.0</find>
      <schemavariable name="%t">{ old_distance := distance as map(node,int) }([27;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="112">
      <find>S.0.10</find>
      <schemavariable name="%t">distance as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="113">
      <find>S.0.0</find>
      <schemavariable name="%a">[27;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ old_dom_distance := dom_distance }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="114">
      <find>S.0</find>
      <schemavariable name="%t">{ old_dom_distance := dom_distance as set(node) }([28;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="115">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="116">
      <find>S.0.0</find>
      <schemavariable name="%a">[28;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ S := $rng_restrict($dom_restrict(singleton(n),dom_weight),$complement(visited)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="117">
      <find>S.0</find>
      <schemavariable name="%t">{ S := $rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node)) }([29;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="118">
      <find>S.0.10</find>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || S := S1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_loop_invariant_update" path="1,0,1,1" id="119">
      <find>S.0</find>
      <schemavariable name="%inv">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[29;Dij'] as bool</schemavariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,0" id="120">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="121">
      <find>S.0.0.0.0.0.0.0</find>
      <schemavariable name="%a">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <typevariable name="a">set(prod(node,node))</typevariable>
      <typevariable name="1">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="122">
      <find>S.0.0.0.0.0.0</find>
      <schemavariable name="%a">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="123">
      <find>S.0.0.0.0.0.1</find>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,0,1,1,0" id="124">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%a">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,0" id="125">
      <find>S.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,0" id="126">
      <find>S.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0" id="127">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance1 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0" id="128">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0,0" id="129">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0,0,0" id="130">
      <find>S.0</find>
      <schemavariable name="%b">$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0,0,0,0" id="131">
      <find>S.0</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0,0,0,1" id="132">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0,0,1" id="133">
      <find>S.0</find>
      <assume>A.4</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0,1" id="134">
      <find>S.0</find>
      <assume>A.3</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,1" id="135">
      <find>S.0</find>
      <assume>A.2</assume>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance1 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="136">
      <find>S.0</find>
      <schemavariable name="%v">distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[31;Dij''] as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) }</schemaupdate>
      <property name="skolemName(distance as map(node,int))">distance2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="137">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := distance2 as map(node,int) }([32;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="138">
      <find>S.0.10</find>
      <schemavariable name="%t">distance2 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ distance := distance1 || d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="139">
      <find>S.0</find>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[32;Dij''] as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 }</schemaupdate>
      <property name="skolemName(d as int)">d2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="140">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d2 as int }([33;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="141">
      <find>S.0.10</find>
      <schemavariable name="%t">d2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ d := d1 || u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="142">
      <find>S.0</find>
      <schemavariable name="%v">u as node</schemavariable>
      <schemavariable name="%a">[33;Dij''] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 || d := d2 }</schemaupdate>
      <property name="skolemName(u as node)">u2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="143">
      <find>S.0</find>
      <schemavariable name="%t">{ u := u2 as node }([34;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 || d := d2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="144">
      <find>S.0.10</find>
      <schemavariable name="%t">u2 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ u := u1 || o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 || d := d2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="145">
      <find>S.0</find>
      <schemavariable name="%v">S as set(prod(node,node))</schemavariable>
      <schemavariable name="%a">[34;Dij''] as bool</schemavariable>
      <typevariable name="v">set(prod(node,node))</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 || d := d2 || u := u2 }</schemaupdate>
      <property name="skolemName(S as set(prod(node,node)))">S2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="146">
      <find>S.0</find>
      <schemavariable name="%t">{ S := S2 as set(prod(node,node)) }([35;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 || d := d2 || u := u2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="147">
      <find>S.0.10</find>
      <schemavariable name="%t">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <schemaupdate name="U">{ o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || S := $rng_restrict($dom_restrict(singleton(n2),dom_weight),$complement($union(visited1,singleton(n2)))) || distance := distance2 || d := d2 || u := u2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="148">
      <find>S.0</find>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[35;Dij''] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 }</schemaupdate>
      <property name="skolemName(o as node)">o2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="149">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o2 as node }([36;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="150">
      <find>S.0.10</find>
      <schemavariable name="%t">o2 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ o := o1 || dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="151">
      <find>S.0</find>
      <schemavariable name="%v">dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[36;Dij''] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 }</schemaupdate>
      <property name="skolemName(dom_distance as set(node))">dom_distance2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="152">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := dom_distance2 as set(node) }([37;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="153">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 || n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1" id="154">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[37;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="155">
      <find>A.10</find>
      <schemavariable name="%t">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="156">
      <find>A.10</find>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset(S2 as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="157">
      <find>A.10</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset(S2 as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="158">
      <find>A.10</find>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset(S2 as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="159">
      <find>A.10</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset(S2 as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="160">
      <find>A.10</find>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset(S2 as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="161">
      <find>A.10</find>
      <schemavariable name="%b">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$subset(S2 as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1" id="162">
      <find>A.11.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1" id="163">
      <find>A.11.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,0,1,1,1" id="164">
      <find>S.0</find>
      <schemavariable name="%k">55 as int</schemavariable>
      <schemavariable name="%n">39 as int</schemavariable>
      <schemavariable name="%a">[38;Dij''] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0" id="165">
      <find>S.0</find>
      <schemavariable name="%b">$not($eq(emptyset as set(prod(node,node)),S as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%a">[39;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0" id="166">
      <find>A.17</find>
      <schemavariable name="%t">$not($eq(emptyset as set(prod(node,node)),S as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,0,1,1,1,0" id="167">
      <find>A.17.0</find>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="5">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0" id="168">
      <find>A.17</find>
      <schemavariable name="%b">(\forall xx as prod(node,node);$not($mem(\var xx as prod(node,node),S2 as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0" id="169">
      <find>S.3</find>
      <schemavariable name="%b">$not($mem(\var xx as prod(node,node),S2 as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var xx as prod(node,node)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <property name="skolemName(\var xx as prod(node,node))">xx1</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0" id="170">
      <find>S.3</find>
      <schemavariable name="%b">$mem(xx1 as prod(node,node),S2 as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0" id="171">
      <find>S.0</find>
      <schemavariable name="%b">(\exists u as node;(\exists o as node;$mem(pair(\var o as node,\var u as node) as prod(node,node),S as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[40;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,0" id="172">
      <find>S.0</find>
      <schemavariable name="%t">(\exists u as node;(\exists o as node;$mem(pair(\var o as node,\var u as node) as prod(node,node),S as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,0" id="173">
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1,0,1" id="174">
      <find>S.0</find>
      <schemavariable name="%v">u as node</schemavariable>
      <schemavariable name="%a">[41;Dij''] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
      <property name="skolemName(u as node)">u3</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="175">
      <find>S.0</find>
      <schemavariable name="%t">{ u := u3 as node }([42;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="176">
      <find>S.0.10</find>
      <schemavariable name="%t">u3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1,0,1" id="177">
      <find>S.0</find>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[42;Dij''] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || S := S2 || o := o2 || dom_distance := dom_distance2 || u := u3 }</schemaupdate>
      <property name="skolemName(o as node)">o3</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="178">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o3 as node }([43;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || S := S2 || o := o2 || dom_distance := dom_distance2 || u := u3 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="179">
      <find>S.0.10</find>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || S := S2 || o := o2 || dom_distance := dom_distance2 || u := u3 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0,1" id="180">
      <find>S.0</find>
      <schemavariable name="%b">$mem(pair(o as node,u as node) as prod(node,node),S as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">[43;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || S := S2 || dom_distance := dom_distance2 || u := u3 || o := o3 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="181">
      <find>A.18</find>
      <schemavariable name="%t">$mem(pair(o as node,u as node) as prod(node,node),S as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || S := S2 || dom_distance := dom_distance2 || u := u3 || o := o3 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1" id="182">
      <find>S.0.0</find>
      <schemavariable name="%a">[44;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ S := $diff(S,singleton(pair(o,u))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="183">
      <find>S.0</find>
      <schemavariable name="%t">{ S := $diff(S as set(prod(node,node)),singleton(pair(o as node,u as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)) }([45;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || S := S2 || dom_distance := dom_distance2 || u := u3 || o := o3 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="184">
      <find>S.0.10</find>
      <schemavariable name="%t">$diff(S as set(prod(node,node)),singleton(pair(o as node,u as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || S := S2 || dom_distance := dom_distance2 || u := u3 || o := o3 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0,1" id="185">
      <find>S.0</find>
      <schemavariable name="%b">$eq(n as node,o as node) as bool</schemavariable>
      <schemavariable name="%a">[45;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="186">
      <find>S.0</find>
      <schemavariable name="%t">$eq(n as node,o as node) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,0" id="187">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,0" id="188">
      <find>A.19</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,0" id="189">
      <find>A.19.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,0" id="190">
      <find>A.19</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,0" id="191">
      <find>A.19</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,0" id="192">
      <find>A.19.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,0" id="193">
      <find>A.19</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,0,1,0" id="194">
      <find>A.20</find>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">u3 as node</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,0" id="195">
      <find>A.20</find>
      <schemavariable name="%b">$mem(u3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,0" id="196">
      <find>A.20</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,0" id="197">
      <find>A.20</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,0" id="198">
      <find>S.0</find>
      <assume>A.20</assume>
      <schemavariable name="%b">$eq(n2 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0,1,1" id="199">
      <find>S.0</find>
      <schemavariable name="%b">$mem(pair(o as node,u as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">[46;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="200">
      <find>S.0</find>
      <schemavariable name="%t">$mem(pair(o as node,u as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0" id="201">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,1,0" id="202">
      <find>A.19</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,1,0" id="203">
      <find>A.19.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0" id="204">
      <find>A.19</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,1,0" id="205">
      <find>A.19</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,1,0" id="206">
      <find>A.19.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0" id="207">
      <find>A.19</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,0" id="208">
      <find>S.0</find>
      <assume>A.19</assume>
      <schemavariable name="%b">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1,1" id="209">
      <find>S.0.0</find>
      <schemavariable name="%a">[47;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ d := $plus(read(distance,n),weight(o,u)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1" id="210">
      <find>S.0</find>
      <schemavariable name="%t">{ d := $plus(read(distance as map(node,int),n as node) as int,weight(o as node,u as node) as int) as int }([48;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1" id="211">
      <find>S.0.10</find>
      <schemavariable name="%t">$plus(read(distance as map(node,int),n as node) as int,weight(o as node,u as node) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,0,1,1,1,0,1,1,1" id="212">
      <find>S.0</find>
      <schemavariable name="%k">53 as int</schemavariable>
      <schemavariable name="%n">49 as int</schemavariable>
      <schemavariable name="%a">[48;Dij''] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0,1,1,1,0" id="213">
      <find>S.0</find>
      <schemavariable name="%b">$or($not($mem(u as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),u as node) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[49;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="214">
      <find>A.19</find>
      <schemavariable name="%t">$or($not($mem(u as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),u as node) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1,1,0" id="215">
      <find>S.0.0</find>
      <schemavariable name="%a">[50;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := $union(dom_distance,singleton(u)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="216">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := $union(dom_distance as set(node),singleton(u as node) as set(node)) as set(node) }([51;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="217">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(dom_distance as set(node),singleton(u as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1,1,0" id="218">
      <find>S.0.0</find>
      <schemavariable name="%a">[51;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance,u,d) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="219">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := write(distance as map(node,int),u as node,d as int) as map(node,int) }([52;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) || dom_distance := $union(dom_distance2,singleton(u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="220">
      <find>S.0.10</find>
      <schemavariable name="%t">write(distance as map(node,int),u as node,d as int) as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) || dom_distance := $union(dom_distance2,singleton(u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,1,0" id="221">
      <find>S.0.0</find>
      <schemavariable name="%n">54 as int</schemavariable>
      <schemavariable name="%a">[52;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,1,0" id="222">
      <find>S.0.0</find>
      <schemavariable name="%n">29 as int</schemavariable>
      <schemavariable name="%a">[54;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0,1,1,1,0" id="223">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[29;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) || dom_distance := $union(dom_distance2,singleton(u3)) || distance := write(distance2,u3,$plus(read(distance2,n2),weight(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0,0" id="224">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) || dom_distance := $union(dom_distance2,singleton(u3)) || distance := write(distance2,u3,$plus(read(distance2,n2),weight(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,1,0,0" id="225">
      <find>S.0.0.0.0.1.0</find>
      <schemavariable name="%a2">start as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">u3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,1,0,0" id="226">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">u3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,0,0" id="227">
      <find>S.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0" id="228">
      <find>S.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,1,0,0" id="229">
      <find>S.0.1.0.1.0.1.0</find>
      <schemavariable name="%a2">\var y as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">u3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,1,0,0" id="230">
      <find>S.0.1.0.1.0.1.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">u3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,1,0,0" id="231">
      <find>A.19</find>
      <schemavariable name="%b">$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),u3 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$not($mem(u3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,0" id="232">
      <find>A.19</find>
      <schemavariable name="%b">$mem(u3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0" id="233">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(u3 as node,\var y as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var y as node) as int) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool) as bool,$mem(start as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$gte(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0" id="234">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$gte(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool) as bool,$mem(start as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0" id="235">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0" id="236">
      <find>S.0</find>
      <schemavariable name="%b">$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0" id="237">
      <find>S.0</find>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0" id="238">
      <find>S.0</find>
      <schemavariable name="%b">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0" id="239">
      <find>S.0</find>
      <assume>A.10</assume>
      <schemavariable name="%a">S2 as set(prod(node,node))</schemavariable>
      <schemavariable name="%b">singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%c">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <typevariable name="2">prod(node,node)</typevariable>
      <typevariable name="b">set(prod(node,node))</typevariable>
      <typevariable name="c">set(prod(node,node))</typevariable>
      <typevariable name="a">set(prod(node,node))</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0" id="240">
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1" id="241">
      <find>S.0</find>
      <schemavariable name="%a">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1" id="242">
      <find>S.0.0.1</find>
      <schemavariable name="%x">\var yy as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(u3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1" id="243">
      <find>A.9</find>
      <schemavariable name="%a">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1" id="244">
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1" id="245">
      <find>S.0</find>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1" id="246">
      <find>S.0.0.1</find>
      <schemavariable name="%x">\var yy as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(u3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1" id="247">
      <find>A.16</find>
      <schemavariable name="%a">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance2 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1" id="248">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,1" id="249">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,1" id="250">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,1" id="251">
      <find>S.0</find>
      <schemavariable name="%b">$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$gte(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,1" id="252">
      <find>S.0</find>
      <schemavariable name="%b">$gte(cond($eq(u3 as node,x1 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),x1 as node) as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(x1 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="OOPS" path="1,0,1,1,1,0,1,1,1,0,0,0,0,1" id="253">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1" id="254">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($mem(\var y as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(u3 as node,\var y as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var y as node) as int) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1" id="255">
      <find>S.0</find>
      <schemavariable name="%b">(\exists x as node;$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(u3 as node,y2 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),y2 as node) as int) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,y2 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(y2 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$not($eq(y2 as node,start as node) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1" id="256">
      <find>A.19</find>
      <schemavariable name="%b">$not($eq(y2 as node,start as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(y2 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1" id="257">
      <find>A.20</find>
      <schemavariable name="%b">$eq(y2 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cutOnThat" path="1,0,1,1,1,0,1,1,1,0,0,0,1" id="258">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%c">$eq(u3 as node,y2 as node) as bool</schemavariable>
      <typevariable name="c">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cond_true" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0" id="259">
      <find>S.0.0.1.0</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">read(distance2 as map(node,int),y2 as node) as int</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0" id="260">
      <find>S.0</find>
      <schemavariable name="%inst">o3 as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq($plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,y2 as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0" id="261">
      <find>S.5</find>
      <schemavariable name="%a">$and($mem(o3 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(o3 as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq($plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,$plus(cond($eq(u3 as node,o3 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),o3 as node) as int) as int,weight(o3 as node,y2 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0" id="262">
      <find>S.5</find>
      <schemavariable name="%a">$mem(o3 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(o3 as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="263">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="264">
      <find>A.21</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="265">
      <find>A.21.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="266">
      <find>A.21</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="267">
      <find>A.21</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="268">
      <find>A.21.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="269">
      <find>A.21</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="270">
      <find>A.22</find>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">u3 as node</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="271">
      <find>A.22</find>
      <schemavariable name="%b">$mem(u3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="272">
      <find>A.22</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="273">
      <find>A.22</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0" id="274">
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="275">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="276">
      <find>A.21</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="277">
      <find>A.21.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="278">
      <find>A.21</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="279">
      <find>A.21</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="280">
      <find>A.21.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="281">
      <find>A.21</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="282">
      <find>A.22</find>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">u3 as node</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="283">
      <find>A.22</find>
      <schemavariable name="%b">$mem(u3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="284">
      <find>A.22</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="285">
      <find>A.22</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1" id="286">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1" id="287">
      <find>S.5.1.0</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">read(distance2 as map(node,int),o3 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(u3 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="288">
      <find>A.21</find>
      <schemavariable name="%u">o3 as node</schemavariable>
      <schemavariable name="%t">u3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="289">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="290">
      <find>A.22</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="291">
      <find>A.22.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="292">
      <find>A.22</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="293">
      <find>A.22</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="294">
      <find>A.22.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="295">
      <find>A.22</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="296">
      <find>A.23</find>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">u3 as node</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="297">
      <find>A.23</find>
      <schemavariable name="%b">$mem(u3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="298">
      <find>A.23</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="299">
      <find>A.23</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0" id="300">
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="301">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="302">
      <find>A.21</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="303">
      <find>A.21.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="304">
      <find>A.21</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="305">
      <find>A.21</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="306">
      <find>A.21.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="307">
      <find>A.21</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="308">
      <find>A.22</find>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">u3 as node</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="309">
      <find>A.22</find>
      <schemavariable name="%b">$mem(u3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="310">
      <find>A.22</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="311">
      <find>A.22</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="312">
      <find>S.5.0.0.1</find>
      <assume>A.22</assume>
      <schemavariable name="%u">o3 as node</schemavariable>
      <schemavariable name="%t">n2 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="313">
      <find>S.5.0.1.1</find>
      <assume>A.20</assume>
      <schemavariable name="%u">y2 as node</schemavariable>
      <schemavariable name="%t">u3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="314">
      <find>S.5</find>
      <schemavariable name="%t">$plus(read(distance2 as map(node,int),o3 as node) as int,weight(o3 as node,y2 as node) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1" id="315">
      <find>S.5</find>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1" id="316">
      <find>A.19</find>
      <schemavariable name="%x">y2 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(u3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1" id="317">
      <find>A.19</find>
      <schemavariable name="%a">$mem(y2 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(y2 as node,singleton(u3 as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0" id="318">
      <find>A.11</find>
      <schemavariable name="%inst">y2 as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="cond_false" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0" id="319">
      <find>S.0.0.1.0</find>
      <schemavariable name="%b">read(distance2 as map(node,int),y2 as node) as int</schemavariable>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0" id="320">
      <find>A.20</find>
      <schemavariable name="%b">(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),y2 as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y2 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(y2 as node,dom_distance2 as set(node)) as bool,$not($eq(y2 as node,start as node) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0" id="321">
      <find>S.6</find>
      <schemavariable name="%b">$not($eq(y2 as node,start as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(y2 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0" id="322">
      <find>S.6</find>
      <assume>A.19</assume>
      <schemavariable name="%b">$mem(y2 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1" id="323">
      <find>S.6</find>
      <schemavariable name="%b">$eq(y2 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1" id="324">
      <find>S.4</find>
      <assume>A.20</assume>
      <schemavariable name="%b">$eq(y2 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1" id="325">
      <find>A.20</find>
      <schemavariable name="%b">$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),y2 as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y2 as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x3</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1" id="326">
      <find>A.20</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),y2 as node) as int,$plus(read(distance2 as map(node,int),x3 as node) as int,weight(x3 as node,y2 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(x3 as node,dom_distance2 as set(node)) as bool,$mem(pair(x3 as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1" id="327">
      <find>A.20</find>
      <schemavariable name="%b">$mem(pair(x3 as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$mem(x3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1" id="328">
      <find>A.21</find>
      <schemavariable name="%u">$plus(read(distance2 as map(node,int),x3 as node) as int,weight(x3 as node,y2 as node) as int) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),y2 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1" id="329">
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,1" id="330">
      <find>A.19</find>
      <schemavariable name="%y">u3 as node</schemavariable>
      <schemavariable name="%x">y2 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_comm" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,1" id="331">
      <find>S.5</find>
      <schemavariable name="%u">y2 as node</schemavariable>
      <schemavariable name="%t">u3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,1,1,1" id="332">
      <find>S.5</find>
      <assume>A.19</assume>
      <schemavariable name="%b">$eq(y2 as node,u3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1" id="333">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(u3 as node,\var y as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var y as node) as int) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool) as bool,$mem(start as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$gte(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0" id="334">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$gte(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool) as bool,$mem(start as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0" id="335">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0" id="336">
      <find>S.0</find>
      <schemavariable name="%b">$eq(cond($eq(u3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0" id="337">
      <find>S.0</find>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0" id="338">
      <find>S.0</find>
      <schemavariable name="%b">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0" id="339">
      <find>S.0</find>
      <assume>A.10</assume>
      <schemavariable name="%a">S2 as set(prod(node,node))</schemavariable>
      <schemavariable name="%b">singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%c">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <typevariable name="2">prod(node,node)</typevariable>
      <typevariable name="b">set(prod(node,node))</typevariable>
      <typevariable name="c">set(prod(node,node))</typevariable>
      <typevariable name="a">set(prod(node,node))</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0" id="340">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="341">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="342">
      <find>A.20</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="343">
      <find>A.20.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="344">
      <find>A.20</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="345">
      <find>A.20</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="346">
      <find>A.20.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="347">
      <find>A.20</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="348">
      <find>A.21</find>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">u3 as node</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="349">
      <find>A.21</find>
      <schemavariable name="%b">$mem(u3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="350">
      <find>A.21</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="351">
      <find>A.21</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="352">
      <find>S.0</find>
      <schemavariable name="%a">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="353">
      <find>S.0.0.1</find>
      <schemavariable name="%x">\var yy as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(u3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="354">
      <find>A.16</find>
      <schemavariable name="%a">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance2 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1" id="355">
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1" id="356">
      <find>S.0</find>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1" id="357">
      <find>S.0.0.1</find>
      <schemavariable name="%x">\var yy as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(u3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1" id="358">
      <find>A.15</find>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance2 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1" id="359">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1" id="360">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,0,0,1" id="361">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0,1" id="362">
      <find>S.0</find>
      <schemavariable name="%b">$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$gte(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,0,0,1,0,1" id="363">
      <find>S.0</find>
      <schemavariable name="%b">$gte(cond($eq(u3 as node,x2 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),x2 as node) as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(x2 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="OOPS" path="1,0,1,1,1,0,1,1,1,0,0,1,0,1" id="364">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="365">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($mem(\var y as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(u3 as node,\var y as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var y as node) as int) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="366">
      <find>S.0</find>
      <schemavariable name="%b">(\exists x as node;$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(u3 as node,y1 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),y1 as node) as int) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,y1 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(y1 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$not($eq(y1 as node,start as node) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="367">
      <find>A.20</find>
      <schemavariable name="%b">$not($eq(y1 as node,start as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(y1 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="368">
      <find>A.21</find>
      <schemavariable name="%b">$eq(y1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="369">
      <find>A.20</find>
      <schemavariable name="%x">y1 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(u3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cutOnThat" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="370">
      <find>A.20.1</find>
      <schemavariable name="%c">$mem(y1 as node,singleton(u3 as node) as set(node)) as bool</schemavariable>
      <typevariable name="c">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,1,1,0" id="371">
      <find>A.21</find>
      <schemavariable name="%y">u3 as node</schemavariable>
      <schemavariable name="%x">y1 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_true_r" path="1,0,1,1,1,0,1,1,1,0,0,1,1,0" id="372">
      <find>A.20</find>
      <schemavariable name="%a">$mem(y1 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,0" id="373">
      <find>A.20</find>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,1,1,0" id="374">
      <find>A.20</find>
      <schemavariable name="%u">u3 as node</schemavariable>
      <schemavariable name="%t">y1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <skip></skip>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1" id="375">
      <find>S.4</find>
      <schemavariable name="%y">u3 as node</schemavariable>
      <schemavariable name="%x">y1 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_comm" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1" id="376">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%u">y1 as node</schemavariable>
      <schemavariable name="%t">u3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1" id="377">
      <find>S.0.0.1.0.0</find>
      <assume>S.4</assume>
      <schemavariable name="%b">$eq(y1 as node,u3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cond_false" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1" id="378">
      <find>S.0.0.1.0</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">read(distance2 as map(node,int),y1 as node) as int</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1" id="379">
      <find>A.11</find>
      <schemavariable name="%inst">y1 as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1" id="380">
      <find>A.21</find>
      <schemavariable name="%a">$and($mem(y1 as node,dom_distance2 as set(node)) as bool,$not($eq(y1 as node,start as node) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),y1 as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y1 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_false_r" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,0" id="381">
      <find>A.20</find>
      <schemavariable name="%a">$mem(y1 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,0" id="382">
      <find>S.5</find>
      <schemavariable name="%b">$not($eq(y1 as node,start as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(y1 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0" id="383">
      <find>S.5</find>
      <assume>A.20</assume>
      <schemavariable name="%b">$mem(y1 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1" id="384">
      <find>S.5</find>
      <schemavariable name="%b">$eq(y1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1" id="385">
      <find>S.3</find>
      <assume>A.21</assume>
      <schemavariable name="%b">$eq(y1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_false_r" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1" id="386">
      <find>A.20</find>
      <schemavariable name="%a">$mem(y1 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1" id="387">
      <find>A.21</find>
      <schemavariable name="%b">$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),y1 as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y1 as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x4</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1" id="388">
      <find>A.21</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),y1 as node) as int,$plus(read(distance2 as map(node,int),x4 as node) as int,weight(x4 as node,y1 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(x4 as node,dom_distance2 as set(node)) as bool,$mem(pair(x4 as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1" id="389">
      <find>A.21</find>
      <schemavariable name="%b">$mem(pair(x4 as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$mem(x4 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1" id="390">
      <find>A.22</find>
      <schemavariable name="%u">$plus(read(distance2 as map(node,int),x4 as node) as int,weight(x4 as node,y1 as node) as int) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),y1 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1" id="391">
      <find>S.0</find>
      <schemavariable name="%inst">x4 as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$and($and($mem(\var x as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),y1 as node) as int,$plus(cond($eq(u3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,y1 as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1" id="392">
      <find>S.5</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),y1 as node) as int,$plus(cond($eq(u3 as node,x4 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),x4 as node) as int) as int,weight(x4 as node,y1 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(x4 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool,$mem(pair(x4 as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0" id="393">
      <find>S.5</find>
      <schemavariable name="%b">$mem(pair(x4 as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$mem(x4 as node,$union(dom_distance2 as set(node),singleton(u3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0" id="394">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1" id="395">
      <find>S.5</find>
      <assume>A.23</assume>
      <schemavariable name="%b">$mem(pair(x4 as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1" id="396">
      <find>S.5.1.0</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">read(distance2 as map(node,int),x4 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(u3 as node,x4 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="397">
      <find>A.18</find>
      <assume>A.10</assume>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <schemavariable name="%t">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="t">set(prod(node,node))</typevariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_rng_restrict" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="398">
      <find>A.25</find>
      <schemavariable name="%s">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%r">$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="7">node</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="snd_concrete" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="399">
      <find>A.25.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="b">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="400">
      <find>A.25</find>
      <schemavariable name="%b">$mem(u3 as node,$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),$dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_dom_restrict" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="401">
      <find>A.25</find>
      <schemavariable name="%r">dom_weight as set(prod(node,node))</schemavariable>
      <schemavariable name="%s">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%x">pair(o3 as node,u3 as node) as prod(node,node)</schemavariable>
      <typevariable name="r">set(prod(node,node))</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">prod(node,node)</typevariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="7">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="fst_concrete" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="402">
      <find>A.25.1.0</find>
      <schemavariable name="%b">u3 as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="403">
      <find>A.25</find>
      <schemavariable name="%b">$mem(o3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(o3 as node,u3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="404">
      <find>A.26</find>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">u3 as node</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="405">
      <find>A.26</find>
      <schemavariable name="%b">$mem(u3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="406">
      <find>A.26</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="407">
      <find>A.26</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0" id="408">
      <find>A.19.0.0.1</find>
      <assume>A.26</assume>
      <schemavariable name="%u">o3 as node</schemavariable>
      <schemavariable name="%t">n2 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <skip></skip>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1" id="409">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,0,1,1,1,0,1,1,1,0,1" id="410">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[30;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0,1" id="411">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) || dom_distance := $union(dom_distance2,singleton(u3)) || distance := write(distance2,u3,$plus(read(distance2,n2),weight(o3,u3))) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,0,1" id="412">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0,1,1,1,1" id="413">
      <find>S.0</find>
      <schemavariable name="%b">$not($or($not($mem(u as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),u as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[53;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1" id="414">
      <find>A.19</find>
      <schemavariable name="%t">$not($or($not($mem(u as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),u as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,1" id="415">
      <find>A.19</find>
      <schemavariable name="%b">$or($not($mem(u3 as node,dom_distance2 as set(node)) as bool) as bool,$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),u3 as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_right" path="1,0,1,1,1,0,1,1,1,1" id="416">
      <find>S.3</find>
      <schemavariable name="%b">$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(o3 as node,u3 as node) as int) as int,read(distance2 as map(node,int),u3 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$not($mem(u3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,1,1" id="417">
      <find>S.3</find>
      <schemavariable name="%b">$mem(u3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,1,1" id="418">
      <find>S.0.0</find>
      <schemavariable name="%n">29 as int</schemavariable>
      <schemavariable name="%a">[54;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0,1,1,1,1" id="419">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[29;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,0" id="420">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($subset(S as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement(visited as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset(visited as set(node),dom_distance as set(node)) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,0" id="421">
      <find>S.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,1,0" id="422">
      <find>S.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,0" id="423">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,0,0" id="424">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,0,0,0" id="425">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0" id="426">
      <find>S.0</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0,0" id="427">
      <find>S.0</find>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool,$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0" id="428">
      <find>S.0</find>
      <schemavariable name="%b">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$subset($diff(S2 as set(prod(node,node)),singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))) as set(prod(node,node)),$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0" id="429">
      <find>S.0</find>
      <assume>A.10</assume>
      <schemavariable name="%a">S2 as set(prod(node,node))</schemavariable>
      <schemavariable name="%b">singleton(pair(o3 as node,u3 as node) as prod(node,node)) as set(prod(node,node))</schemavariable>
      <schemavariable name="%c">$rng_restrict($dom_restrict(singleton(n2 as node) as set(node),dom_weight as set(prod(node,node))) as set(prod(node,node)),$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as set(prod(node,node))</schemavariable>
      <typevariable name="2">prod(node,node)</typevariable>
      <typevariable name="b">set(prod(node,node))</typevariable>
      <typevariable name="c">set(prod(node,node))</typevariable>
      <typevariable name="a">set(prod(node,node))</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0" id="430">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1" id="431">
      <find>S.0</find>
      <assume>A.16</assume>
      <schemavariable name="%b">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,1" id="432">
      <find>S.0</find>
      <assume>A.15</assume>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0,0,0,0,1" id="433">
      <find>S.0</find>
      <assume>A.14</assume>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0,0,0,1" id="434">
      <find>S.0</find>
      <assume>A.13</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0,0,1" id="435">
      <find>S.0</find>
      <assume>A.12</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0,1" id="436">
      <find>S.0</find>
      <assume>A.11</assume>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,0,1,1,1,0,1,1,1,1,1" id="437">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[30;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1" id="438">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || dom_distance := dom_distance2 || u := u3 || o := o3 || S := $diff(S2,singleton(pair(o3,u3))) || d := $plus(read(distance2,n2),weight(o3,u3)) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,1,1" id="439">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,1" id="440">
      <find>S.0</find>
      <schemavariable name="%b">$not($not($eq(emptyset as set(prod(node,node)),S as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[55;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1" id="441">
      <find>A.17</find>
      <schemavariable name="%t">$not($not($eq(emptyset as set(prod(node,node)),S as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,0,1,1,1,1" id="442">
      <find>A.17</find>
      <schemavariable name="%b">$eq(emptyset as set(prod(node,node)),S2 as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,0,1,1,1,1" id="443">
      <find>A.17</find>
      <schemavariable name="%s">S2 as set(prod(node,node))</schemavariable>
      <typevariable name="s">set(prod(node,node))</typevariable>
      <typevariable name="5">prod(node,node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,1" id="444">
      <find>S.0.0</find>
      <schemavariable name="%n">5 as int</schemavariable>
      <schemavariable name="%a">[56;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,1" id="445">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[5;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="446">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,1,0" id="447">
      <find>S.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,1,0" id="448">
      <find>S.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0" id="449">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0" id="450">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0,0" id="451">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0,0,0" id="452">
      <find>S.0</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,0,0,0" id="453">
      <find>S.0</find>
      <assume>A.16</assume>
      <schemavariable name="%b">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,0,0,1" id="454">
      <find>S.0</find>
      <assume>A.14</assume>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,0,1" id="455">
      <find>S.0</find>
      <assume>A.13</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,1" id="456">
      <find>S.0</find>
      <assume>A.12</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,1" id="457">
      <find>S.0</find>
      <assume>A.11</assume>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance2 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,0,1,1,1,1,1" id="458">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[6;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1" id="459">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 || visited := $union(visited1,singleton(n2)) || old_distance := distance1 || old_dom_distance := dom_distance1 || distance := distance2 || d := d2 || u := u2 || S := S2 || o := o2 || dom_distance := dom_distance2 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,1,1" id="460">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1" id="461">
      <find>S.0</find>
      <schemavariable name="%b">$not($not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[49;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="462">
      <find>A.6</find>
      <schemavariable name="%t">$not($not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1" id="463">
      <find>A.6</find>
      <schemavariable name="%b">$eq(emptyset as set(node),$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,1" id="464">
      <find>A.6</find>
      <schemavariable name="%s">$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1" id="465">
      <find>A.6.0.0</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var xx as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1" id="466">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[50;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="467">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ visited := visited1 || distance := distance1 || d := d1 || u := u1 || S := S1 || n := n1 || o := o1 || old_distance := old_distance1 || old_dom_distance := old_dom_distance1 || dom_distance := dom_distance1 }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1" id="468">
      <find>S.0</find>
    </ruleApplication>
  </steps>
</proof>
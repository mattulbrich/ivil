
options {
        STATIC = false;
}

PARSER_BEGIN(TermParser)
package de.uka.iti.pseudo.parser.term;

import java.util.*;
import java.io.*;

public class TermParser {

    private String fileName;

    public TermParser(String string, String fileName, int line, int col) {
        this(new StringReader(string));
        this.fileName = fileName;
        jj_input_stream.line = line;
        jj_input_stream.column = col - 1;
    }
    
    public ASTTerm parseTerm() throws ParseException 
    {
    	ASTTerm term = Term();
    	term.setFilename(fileName);
    	return term;
    }
  
}

PARSER_END(TermParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{

// Logics
  < LEFTPAREN: "(" >
| < RIGHTPAREN: ")" >
| < LEFTSQUARE: "[" >
| < RIGHTSQUARE: "]" >
| < COMMA: "," >
| < SEMICOLON: ";" >
| < AS: "as" >

// Programs
| < _SKIP: "skip" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < DO: "do" >
| < END: "end" >
| < ASSIGN: ":=" >

// Identifiers
| < BINDERIDENTIFIER: "\\" <IDENTIFIER> >
| < TYVARIDENTIFIER: "'" <IDENTIFIER> >
| < IDENTIFIER: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_","'"] )* >
| < OPIDENTIFIER: ( ["+","-","<",">","&","|","=","*","/","!","^"] )+ >

// Literals
| < NUMBERLITERAL: ( ["0" - "9"] )+ >

}

ASTTerm Term():
{ 
  ASTTerm term;
  List<ASTTerm> list = new ArrayList<ASTTerm>(); 
}
{

        ( term=OpIdentifier() { list.add(term); } )*
        term=ModalityTerm() { list.add(term); }
        (
          ( term=OpIdentifier() { list.add(term); } )+
          term=ModalityTerm() { list.add(term); }
        )*
   { 
     if(list.size() > 1)
        return new ASTListTerm(list);
     else
        return list.get(0);
   }
}

ASTTerm ModalityTerm():
{
  ASTModality modality = null;
  ASTTerm term;
}
{
      "[" modality=ModalityList() "]" term=ModalityTerm()
         { return new ASTModalityTerm(modality, term); }
    | 
      term=AsTerm()
         { return term; } 
}

ASTTerm AsTerm():
{ 
  ASTTerm term;
  ASTType type; 
}
{
        term=BaseTerm()
        (
          "as"
          type=TypeRef()
            { term = new ASTAsType(term, type); }
        )?  
         { return term; }
}

ASTTerm BaseTerm():
{ 
  ASTTerm term;
}
{
        ( LOOKAHEAD(2) "(" term=BinderTerm() ")"
        | "(" term=Term() ")"
        | term=ApplicationTerm()
        | term=NumberLiteral()
        )
        { return term; }
}

ASTBinderTerm BinderTerm():
{
  Token binderToken;
  Token varToken;
  ASTType type; 
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>(); 
}
{
        binderToken = <BINDERIDENTIFIER>
        type = TypeRef()
        varToken = <IDENTIFIER>
        ( ";" t=Term() { subterms.add(t); } )+
   { return new ASTBinderTerm(binderToken, type, varToken, subterms); }
}

ASTType TypeRef():
{
  Token token;
  List<ASTType> args = new ArrayList<ASTType>();
  ASTType ty;
}
{
		token = <IDENTIFIER>
		(
		  "(" ty=TypeRef() { args.add(ty); }
		  		( "," ty=TypeRef() { args.add(ty); } )*
		  ")"
		)?
		{ return new ASTTypeApplication(token, args); }
	|
		token = <TYVARIDENTIFIER>
		{ return new ASTTypeVar(token); }
}


/*
ASTIfThenElseTerm IfThenElseTerm():
{
  ASTTerm condTerm, thenTerm, elseTerm; 
}
{
        "if"
        condTerm=Term()
        "then"
        thenTerm=Term()
        "else"
        elseTerm=Term()
   { return new ASTIfThenElseTerm(condTerm, thenTerm, elseTerm); }
}
*/ 
        
ASTTerm ApplicationTerm():
{
  Token symbol;
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>();
}
{
        symbol=<IDENTIFIER>
        
        ( /* parentheses are not empty, constants dont have them */ 
          "("
          t=Term() { subterms.add(t); }
          ( "," t=Term() { subterms.add(t); } )*
          ")"
        )?
        
    { if(subterms.size() > 0) 
        return new ASTApplicationTerm(symbol, subterms); 
      else
        return new ASTIdentifierTerm(symbol);
    }
}

ASTTerm OpIdentifier():
{ 
  Token t;
}
{
        t=<OPIDENTIFIER> 
  { return new ASTOperatorIdentifierTerm(t); }
}

ASTNumberLiteralTerm NumberLiteral():
{
  Token t;
}
{
        t=<NUMBERLITERAL>
  { return new ASTNumberLiteralTerm(t); }
}

ASTModality ModalityList():
{
  ASTModality mod, mod2;
}
{
  mod=Modality()
  (
    ";"
    mod2=ModalityList()
      { mod = new ASTModCompound(mod, mod2); }
  )?
  { return mod; }
}

ASTModality Modality():
{
  ASTTerm term, term2, term3;
  ASTModality mod, mod2 = null;
  Token id;
  Token t;
}
{
          id=<IDENTIFIER> ":=" term=Term()
            { return new ASTModAssignment(id, term); }
        | t="while" term=Term() "do" mod=ModalityList() "end"
            { return new ASTModWhile(t,term, mod); }
        | t="if" term=Term() "then" mod=ModalityList() 
            ( "else" mod2=ModalityList() )? "end"
            { return new ASTModIf(t, term, mod, mod2); }
        | t="skip"
            { return new ASTModSkip(t); }
}
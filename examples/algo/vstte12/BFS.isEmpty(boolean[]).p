(* created : Mon Nov 26 18:09:14 CET 2012 - Alpha-3 *)
#
# This file was generated by PSEUDO
# which is copyright (C) 2009 Universitaet Karlsruhe, Germany
#    written by Mattias Ulbrich
#

include "$bytecode.p"

include "declarations.p"

(* program variables *)
function
   ref _array assignable (* local variable '1' *)
   ref pre_array assignable (* method parameter, prestate *)
   heap ho1 assignable (* Heap snapshot for loop invariant *)
   bool st_0_bool assignable (* stack variable *)
   int st_0_int assignable (* stack variable *)
   int _i assignable (* local variable '2' *)
   ref st_1_ref assignable (* stack variable *)
   int st_1_int assignable (* stack variable *)
   bool branchCond assignable (* branching condition *)
   ref st_0_ref assignable (* stack variable *)

(* the translated Java program *)
program Java source "./BFS.jspec"
   sourceline 32
    assume !_array = null ; "Assume precondition"
    assume wellformed(h) ; "assumption guaranteed by Java"
    assume !_this = null ; "assumption guaranteed by Java"
    assume h[_this, created] ; "assumption guaranteed by Java"
    pre_h := h || pre_array := _array ; "Recording the prestate"
    decrBase := 0 ; "Save the decrease (variant) base"
  Label1:
   sourceline 38
    (* LDC + INVOKESTATIC - Specification injection *)
    ho1 := h
    (* spec statement deferred till after looping point *)
  Label2:
   sourceline 44
    (* ICONST_0 *)
    st_0_bool := false
    st_0_int := 0
    (* ISTORE *)
    _i := st_0_int
  Label3:
    (* deferred specification statement *)
    skip LOOPINV, {ho := ho1}((0 <= i & i <= arrlen(array) &
	     (\forall j; 0<=j&j<_i -> !h[array, idxBool(j)])) & modHeap(h, ho, {h:=ho}(emptyset))), arrlen(array) - i
    (* ILOAD *)
    st_0_int := _i
    (* ALOAD *)
    st_1_ref := _array
    (* ARRAYLENGTH *)
    assert !st_1_ref = null ; "non-null array reference"
    st_1_int := arrlen(st_1_ref)
    (* IF_ICMPGE *)
    branchCond := st_0_int >= st_1_int
    goto Label4, Label5
  Label4:
    assume branchCond
    goto Label6
  Label5:
    assume !branchCond
  Label7:
   sourceline 45
    (* ALOAD *)
    st_0_ref := _array
    (* ILOAD *)
    st_1_int := _i
    (* BALOAD *)
    assert !st_0_ref = null ; "non-null array access"
    assert st_1_int >= 0 & st_1_int < arrlen(st_0_ref) ; "array index in bounds"
    st_0_bool := h[st_0_ref, idxBool(st_1_int)] ; "read value from array"
    (* IFEQ *)
    branchCond := !st_0_bool
    goto Label8, Label9
  Label8:
    assume branchCond
    goto Label10
  Label9:
    assume !branchCond
  Label11:
   sourceline 46
    (* ICONST_0 *)
    st_0_bool := false
    st_0_int := 0
    (* IRETURN *)
    exc := null
    resBool := st_0_bool
    resInt := st_0_int
    goto LabelEnd
  Label10:
   sourceline 44
    (* IINC *)
    _i := _i + 1
    (* GOTO *)
    goto Label3
  Label6:
   sourceline 49
    (* ICONST_1 *)
    st_0_bool := true
    st_0_int := 1
    (* IRETURN *)
    exc := null
    resBool := st_0_bool
    resInt := st_0_int
    goto LabelEnd
  Label12:
  LabelEnd:
    assert exc = null ; "No exception has been thrown"
   sourceline 33
    assert resBool = !(\exists i; 0 <= i & i < arrlen(_array) & 
                                  h[_array, idxBool(i)]) ; "Assert postcondition"
   sourceline 35
    assert modHeap(h, pre_h, {h:=pre_h}(emptyset))
(* end of program *)


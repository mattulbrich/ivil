/* Generated By:JavaCC: Do not edit this line. BPLParserTokenManager.java */
package de.uka.iti.pseudo.parser.boogie;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.net.MalformedURLException;
import java.util.LinkedList;
import java.util.List;
import de.uka.iti.pseudo.parser.boogie.ast.*;
// used for main
import de.uka.iti.pseudo.environment.boogie.EnvironmentCreationState;

/** Token Manager. */
public class BPLParserTokenManager implements BPLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x80000L) != 0L)
            return 54;
         if ((active0 & 0x37b7afd67000L) != 0L)
         {
            jjmatchedKind = 65;
            return 49;
         }
         if ((active1 & 0x1000L) != 0L)
            return 20;
         if ((active0 & 0x4000008000L) != 0L)
         {
            jjmatchedKind = 65;
            return 0;
         }
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x200L) != 0L)
            return 44;
         if ((active1 & 0x8800L) != 0L)
            return 65;
         if ((active0 & 0x80010200000L) != 0L)
         {
            jjmatchedKind = 65;
            return 27;
         }
         if ((active1 & 0x200000L) != 0L)
            return 12;
         if ((active1 & 0x6000L) != 0L)
            return 5;
         if ((active0 & 0x840080000L) != 0L)
         {
            jjmatchedKind = 65;
            return 34;
         }
         return -1;
      case 1:
         if ((active1 & 0x4000L) != 0L)
            return 4;
         if ((active0 & 0x3ffdfff6f000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
            return 49;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 49;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
            return 33;
         }
         return -1;
      case 2:
         if ((active0 & 0x1ffdfffea000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
            return 49;
         }
         if ((active0 & 0x200000005000L) != 0L)
            return 49;
         return -1;
      case 3:
         if ((active0 & 0x140c91008000L) != 0L)
            return 49;
         if ((active0 & 0xbf16efe2000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 49;
         }
         return -1;
      case 4:
         if ((active0 & 0x1a16e7c0000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
            return 49;
         }
         if ((active0 & 0xa5000822000L) != 0L)
            return 49;
         return -1;
      case 5:
         if ((active0 & 0x206e380000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 5;
            }
            return 49;
         }
         if ((active0 & 0x18100440000L) != 0L)
            return 49;
         return -1;
      case 6:
         if ((active0 & 0x202e300000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 49;
         }
         if ((active0 & 0x40480000L) != 0L)
            return 49;
         return -1;
      case 7:
         if ((active0 & 0x2006000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
            return 49;
         }
         if ((active0 & 0x28300000L) != 0L)
            return 49;
         return -1;
      case 8:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 8;
            return 49;
         }
         if ((active0 & 0x2002000000L) != 0L)
            return 49;
         return -1;
      case 9:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 9;
            return 49;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 10;
            return 49;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 11;
            return 49;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 12;
            return 49;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 84);
      case 40:
         return jjStopAtPos(0, 71);
      case 41:
         return jjStopAtPos(0, 72);
      case 42:
         return jjStopAtPos(0, 56);
      case 43:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 44:
         return jjStopAtPos(0, 74);
      case 45:
         return jjStopAtPos(0, 82);
      case 47:
         return jjStartNfaWithStates_0(0, 83, 54);
      case 58:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 70);
      case 60:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 61:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 62:
         return jjStartNfaWithStates_0(0, 76, 20);
      case 91:
         return jjStopAtPos(0, 64);
      case 93:
         return jjStopAtPos(0, 63);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x18000800000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000008000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000120000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x840080000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80010200000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2204004000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x120400000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100401000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000002000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 62);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 125:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 58:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 4);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000001000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x120400000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 49);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400002000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200800000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2040044000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x88128000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x104012000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x880000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 123:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 124:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4410002000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000840000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 49);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x18840000000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0x180480000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 49);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 49);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 49);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000080000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 49);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 49);
         break;
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000800000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000020000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10160400000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 49);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 49);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 49);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 49);
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 107:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 49);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 49);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xa140400000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 49);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2080000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 49);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0x40100000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2008200000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2c000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 49);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 49);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 49);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 49);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 49);
         return jjMoveStringLiteralDfa8_0(active0, 0x2004000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 49);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 49);
         break;
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 49);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(13, 26, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x100000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x40000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x10000L
};
static final long[] jjbitVec3 = {
   0x8000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x8L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x800000000000000L, 0x0L
};
static final long[] jjbitVec12 = {
   0x400000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec15 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 78;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
               case 49:
                  if ((0x83ff409800000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 33:
                  if ((0x83ff409800000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 0:
                  if ((0x83ff409800000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(55);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddStates(3, 7);
                  }
                  else if ((0x8000409800000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  else if (curChar == 60)
                     jjAddStates(8, 10);
                  else if (curChar == 47)
                     jjAddStates(11, 12);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(51, 52);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 33)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  break;
               case 27:
                  if ((0x83ff409800000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 65:
                  if (curChar == 61)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 62 && kind > 48)
                     kind = 48;
                  break;
               case 5:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if (curChar == 38 && kind > 50)
                     kind = 50;
                  break;
               case 10:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 15:
                  if (curChar == 33 && kind > 52)
                     kind = 52;
                  break;
               case 16:
                  if (curChar == 61 && kind > 53)
                     kind = 53;
                  break;
               case 17:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if (curChar == 61 && kind > 55)
                     kind = 55;
                  break;
               case 21:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 44:
                  if (curChar == 58 && kind > 60)
                     kind = 60;
                  break;
               case 45:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 48:
                  if ((0x8000409800000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 51:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 34 && kind > 67)
                     kind = 67;
                  break;
               case 53:
                  if (curChar == 47)
                     jjAddStates(11, 12);
                  break;
               case 55:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddStates(0, 2);
                  break;
               case 57:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if (curChar == 47 && kind > 11)
                     kind = 11;
                  break;
               case 61:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 60)
                     jjAddStates(8, 10);
                  break;
               case 63:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 64:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if (curChar == 61 && kind > 49)
                     kind = 49;
                  break;
               case 67:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 61 && kind > 54)
                     kind = 54;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddStates(3, 7);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 73);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 46)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(76);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if ((0x47ffffffc7fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x47ffffffc7fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 0:
                  if ((0x47ffffffc7fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x47ffffffc7fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 27:
                  if ((0x47ffffffc7fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 12:
                  if (curChar == 124 && kind > 51)
                     kind = 51;
                  break;
               case 13:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 23:
                  if (curChar == 108 && kind > 57)
                     kind = 57;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 115 && kind > 58)
                     kind = 58;
                  break;
               case 31:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 35:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if (curChar == 97 && kind > 59)
                     kind = 59;
                  break;
               case 38:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 47:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x47ffffffc7fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x47ffffffc7fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 51:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 55:
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
               case 59:
                  jjCheckNAddStates(0, 2);
                  break;
               case 71:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 73:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 47)
                     kind = 47;
                  break;
               case 7:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 48)
                     kind = 48;
                  break;
               case 8:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 49)
                     kind = 49;
                  break;
               case 11:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 14:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               case 15:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 52)
                     kind = 52;
                  break;
               case 18:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 53)
                     kind = 53;
                  break;
               case 19:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 54)
                     kind = 54;
                  break;
               case 22:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 55)
                     kind = 55;
                  break;
               case 29:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 57)
                     kind = 57;
                  break;
               case 36:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 43:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 59)
                     kind = 59;
                  break;
               case 46:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 60)
                     kind = 60;
                  break;
               case 51:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 14);
                  break;
               case 55:
                  if (!jjCanMove_13(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
               case 59:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   57, 58, 61, 70, 73, 74, 75, 77, 65, 67, 68, 54, 56, 51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         if ((jjbitVec13[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\166\141\162", "\167\150\145\162\145", "\151\156\164", "\142\157\157\154", null, 
"\143\157\156\163\164", "\165\156\151\161\165\145", "\145\170\164\145\156\144\163", 
"\143\157\155\160\154\145\164\145", "\146\165\156\143\164\151\157\156", "\162\145\164\165\162\156\163", 
"\141\170\151\157\155", "\164\171\160\145", "\160\162\157\143\145\144\165\162\145", 
"\151\155\160\154\145\155\145\156\164\141\164\151\157\156", "\155\157\144\151\146\151\145\163", "\146\162\145\145", 
"\162\145\161\165\151\162\145\163", "\145\156\163\165\162\145\163", "\147\157\164\157", 
"\162\145\164\165\162\156", "\151\146", "\164\150\145\156", "\145\154\163\145", "\167\150\151\154\145", 
"\151\156\166\141\162\151\141\156\164", "\142\162\145\141\153", "\141\163\163\145\162\164", 
"\141\163\163\165\155\145", "\150\141\166\157\143", "\143\141\154\154", "\146\141\154\163\145", 
"\164\162\165\145", "\157\154\144", "\72\75", null, null, null, null, null, null, null, null, null, 
"\52", null, null, null, null, "\175", "\173", "\135", "\133", null, null, null, null, 
null, "\73", "\50", "\51", "\72", "\54", "\74", "\76", "\75", "\75\75", "\74\72", 
"\53\53", "\53", "\55", "\57", "\45", "\174\173", "\175\174", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0xfc0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[78];
private final int[] jjstateSet = new int[156];
protected char curChar;
/** Constructor. */
public BPLParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public BPLParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 78; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

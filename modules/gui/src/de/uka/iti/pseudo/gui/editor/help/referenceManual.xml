<ivildoc>
  <category name="Environment property">
    <entry name="termination">
      <![CDATA[

 If an environment does not contain a literal problem description, the
 programs implicitly induce problem descriptions of the form
 <tt>[0;P]</tt> for each program <tt>P</tt>.
 <p>
 The environment property <tt>ProofObligation.termination</tt> can be used
 to specify whether these problems should include a termination proof
 obligation (total correctness; using modality <tt>[[&middot;]]</tt>) or
 should not consider termination (partial correctness; using modality
 <tt>[&middot;]</tt>.

 <p>
 Set it to <code>"true"</code> for total correctness, <code>"false"</code>
 for partial correctness.]]>
    </entry>
    <entry name="strategies">
      <![CDATA[

 The environment property <tt>CompoundStrategy.strategies</tt> can be used
 to specifify the automatic strategies which are to be bundled to conduct
 an automatic proof. The order in which they are specified gives their
 order of application.

 <p>
 Usually the default is a good value. If you want to deviate, specify a
 comma separated list of implementing classes. If no package is given,
 <tt>"de.uka.iti.pseudo.auto.strategy."</tt> is assumed.

 <p><b>Example:</b>
 <pre>
 properties
   CompoundStrategy.strategies
      "HintStrategy, SimplificationStrategy, BreakpointStrategy, SMTStrategy"]]>
    </entry>
    <entry name="rewrite">
      <![CDATA[

 The environment property
 <tt>BreakpointStrategy.rewrite</tt> can be used to specify the rewrite category
 which is to be used for symbolic execution. This is useful if an alternate set
 of symbolic execution rules is to be installed.

 <p>If not specified the default "symbex" is used.]]>
    </entry>
    <entry name="splitMode">
      <![CDATA[

 TODO

 SimplificationStrategy.splitMode

 <p>SPLIT; DONT_SPLIT; SPLIT_NO_PROGRAMS

 SplitMode lists all possibilities to handle splitting:
 <ol>
 <li>Do it whenever a splitting rule application is found
 <li>Never do it
 <li>Do it only if no program terms are anywhere on the sequent (symbolic
 execution first)
 </ol>]]>
    </entry>
    <entry name="order">
      <![CDATA[

 Use the property <tt>order.<i>fct</i></tt> to specify the order ...
 TODO IVILDOC]]>
    </entry>
    <entry name="stopAtSkip">
      <![CDATA[

 The environment property <tt>BreakpointStrategy.stopAtSkip</tt> can be
 used to specify whether symbolic execution should stop whenever reaching
 a <tt>skip</tt> statement. The value can be "<code>true</code>" or "
 <code>false</code>".]]>
    </entry>
    <entry name="obeySourceBreakpoints">
      <![CDATA[

 The environment property
 <tt>BreakpointStrategy.obeySourceBreakpoints</tt> can be used to specify
 whether symbolic execution breakpoints set on level of the source code
 program are to be enabled. The value can be "<code>true</code>" or "
 <code>false</code>".]]>
    </entry>
    <entry name="stopAtLoop">
      <![CDATA[

 The environment property <tt>BreakpointStrategy.stopAtSkip</tt> can be
 used to specify whether symbolic execution should stop whenever reaching
 a goto statement of which one target lies before the current location.
 This happens usually only at the end of a loop. The value can be "
 <code>true</code>" or " <code>false</code>".]]>
    </entry>
    <entry name="obeyProgramBreakpoints">
      <![CDATA[

 The environment property
 <tt>BreakpointStrategy.obeyProgramBreakpoints</tt> can be used to specify
 whether symbolic execution breakpoints set on level of the ivil program
 are to be enabled. The value can be "<code>true</code>" or "
 <code>false</code>".]]>
    </entry>
  </category>
  <category name="Rule tag">
    <entry name="decisionProcedure">
      <![CDATA[

 <h2>Rule tag <tt>decisionProcedure</tt></h2>

 "decisionProcedure" expects a classname as argument.

 <p>It denotes the decision procedure plugin to instantiate.]]>
    </entry>
    <entry name="hintsOnBranches">
      <![CDATA[

 <h2>Rule tag <tt>hintsOnBranches</tt></h2>

 "hintsOnBranches" takes a comma separated list of integer numbers as
 argument. It is used by the proof hint strategy to decide on which child
 branches hints are to be applied. The first child branch has number "0".]]>
    </entry>
    <entry name="display">
      <![CDATA[

 <h2>Rule tag <tt>display</tt></h2>

 "display" expects a string as argument,
 possibly with embedded schema variables.

 <p>
 This string is used to annotate history entries and proof tree component
 labels.

 <p>The format is the following:
 <table>
 <tr>
 <th>Text</th>
 <th>Replacement</th>
 </tr>
 <tr>
 <td>{%c}</td>
 <td>The text representation of the instantiation for the schema variable,
 "??" if not instantiated.</td>
 </tr>
 <tr>
 <td>{explain %c}</td>
 <td>The text representation of the annotation statement to which %c points
 (if it does exists). Empty string otherwise.</td>
 </tr>
 <tr>
 <td>{explainOrQuote %c}</td>
 <td>The text representation of the annotation statement to which %c points
 (if it does). The statement otherwise. Empty string if %c does not hold a
 program term.</td>
 </tr>
 <tr>
 <td>{property name}</td>
 <td>The value of the named property of the rule application.</td>
 </tr>
 <tr>
 <td>{upd U}</td>
 <td>The textual representation of the value of the instantiation of the
 schema update.</td>
 </tr>
 </table>]]>
    </entry>
    <entry name="rewrite">
      <![CDATA[

 <h2>Rule tag <tt>rewrite</tt></h2>

 "rewrite" expects a string argument.

 <p>
 It declares the set of rewrite rules to which a rule belongs. They list
 of known rule sets include the following:
 <ol>
 <li>"updSimpl" - update simplification</li>
 <li>"close" - rules to close goals</li>
 <li>"concrete" - rules involving operations on constants (
 <tt>false | a</tt> to <tt>a</tt>)</li>
 <li>"prop simp" - propositional simplification</li>
 <li>"fol simp" - first order simplification</li>
 </ol>
 Rule sets are applied in that order by the simplification strategy.
 There are other rule sets for more specific purposes. "symbex" is used
 for symbolic execution for instance.]]>
    </entry>
    <entry name="autoonly">
      <![CDATA[

 <h2>Rule tag <tt>autoonly</tt></h2>

 "autoonly" does not take an argument.

 <p>It makes a rule invisible for manual application.]]>
    </entry>
    <entry name="additionalParam">
      <![CDATA[
 <h2>Rule tag <tt>additionalParam</tt></h2>

 "additionalParam" expects a string as argument.

 <p>The format of the string depends on the DP to be used.
 It is given to the DP on the command line.]]>
    </entry>
    <entry name="asAxiom">
      <![CDATA[

 <h2>Rule tag <tt>asAxiom</tt></h2>

 "asAxiom" does not take an argument.

 <p>It marks a rule to be translated into an axiom which allows it to
 be translated to SMT. This is not possible for all rules.]]>
    </entry>
    <entry name="excludeFromDP">
      <![CDATA[

 <h2> Rule tag <tt>excludeFromDP</tt></h2>

 An axiom can be excluded from the translation to the decision procedure by
 adding this tag. It can still be applied interactively or brought to the
 sequent by an <a href="ivil:/Proof hint/axiom">axiom proof hint</a>.]]>
    </entry>
    <entry name="derived">
      <![CDATA[

 <h2>Rule tag <tt>derived</tt></h2>

 "derived" does not an need argument.

 <p>It marks a rule to be inferrable by the rules preceeding it (plus
 includes)]]>
    </entry>
    <entry name="fromRule">
      <![CDATA[

 <h2>Rule tag <tt>fromRule</tt></h2>

 "fromRule" takes a rule name as argument.

 <p>It is added automatically to axioms which are generated automatically
 from rules. The argument is set to the name of the originating rule.]]>
    </entry>
    <entry name="prio">
      <![CDATA[ "prio" expects an integer as argument.

 <h2>Rule tag <tt>prio</tt></h2>
          <p>
          When sorting rules, the priority is used as comparison
          criterion.
          <p>
          Priorities have to be between 100 and 999, where higher priority
          means the rule is likelier to be applied.]]>
    </entry>
    <entry name="timeout">
      <![CDATA[
 <h2>Rule tag <tt>timeout</tt></h2>

 "timeout" expects an integer as argument.

 <p>For decision procedure rules. The time to wait before shutting down the
 DP.]]>
    </entry>
    <entry name="verbosity">
      <![CDATA[

 <h2>Rule tag <tt>verbosity</tt></h2>

 "verbosity" expects an integer as argument.

 <p>It defines from which verbosity level on the rule is printed in the proof
 component.]]>
    </entry>
  </category>
  <category name="Plugin Configuration">
    <entry name="">
      <![CDATA[
 <h2>Configurating the Plugin Manager</h2>
 <dl>
 <dt>Meta function</dt>
 <dd>
 Meta functions are functions which are translated to terms during rule
 application. The instances of class
 <tt>de.uka.iti.pseudo.environment.MetaFunction</tt> are registered under the
 key <tt>metaFunction</tt>.</dd>
 <dt>Where condition</dt>
 <dd>Where conditions decide when rules are applicable. The instances of class
 <tt>de.uka.iti.pseudo.environment.WhereCondition</tt> are registered under
 the key <tt>whereCondition</tt>.</dd>
 <dt>Pretty printer</dt>
 <dd>Pretty printer plugins allow the configuration of presentation of the
 logic. The instances of class
 <tt>de.uka.iti.pseudo.prettyprint.PrettyPrintPlugin</tt> are registered under
 the key <tt>prettyPrinter</tt>.</dd>
 <dt>Proof hints</dt>
 <dd>
 Hints to the proof are given in statement annotations. The instances of
 interface <tt>de.uka.iti.pseudo.auto.strategy.hint.ProofHint</tt> are
 registered under the key <tt>proofHint</tt>.</dd>
 <dt>Decision procedures</dt>
 <dd>
 Decision procedures can be used to discharge proof obligations by external
 solver programs. The instances of interface
 <tt>de.uka.iti.pseudo.auto.DecisionProcedure</tt> are registered under the
 key <tt>decisionProcedure</tt>.</dd>
 </dl>]]>
    </entry>
  </category>
  <category name="Proof hint">
    <entry name="">
      <![CDATA[ <h1>Proof hints</h1>

 Proof hints allow the user to dynamically configure the strategy in use. They
 are usually added as annotations to <tt>assert</tt> statements. The branch
 handling the proof obligation for the asserted formula is then treated
 differently to the rest of the proof. The exact nature of this different
 behaviour depends on the configuration of the hints. They can take string
 arguments.]]>
    </entry>
    <entry name="rule">
      <![CDATA[

 <h2>Proof hint <code>rule</code></h2>

 In order to perform a certain rule on a branch, this hint can be used.

 <h3>Arguments</h3>
 cut takes one argument which is the name of the rule to be applied.

 <h3>Example</h3>
 <pre>
 assert emptyset &lt;: SetM ; "use the lemma §(rule emptyset_lemma)"
 </pre>]]>
    </entry>
    <entry name="expand">
      <![CDATA[

 <h2>Proof hint <code>expand</code></h2>

 In order to expand a recursive definition on a branch, this hint can be used.
 You can specify how many times a definition is to be unrolled.

 <h3>Arguments</h3> cut takes one argument which is the name of the rule to be
 applied.
 <p>
 An optional second argument specifies the number of times the definition is
 to be unrolled.

 <h3>Example</h3>

 If there is a rule which defines the recursive function <tt>int f(int)</tt>:
 <pre>
 rule f_def
   find f(%x)
   replace 1+f(%x-1)
 </pre>

 A hint <tt>§(expand f_def)</tt> would render a formula <tt>f(2)</tt> to
 <tt>1+f(2-1)</tt>.

 <p>A hint <tt>§(expand f_def 2)</tt> would go a step further and expand to
 <tt>1 + (1 + f(2-1-1))</tt>.

 <p>(We left the base case unconsidered here.)]]>
    </entry>
    <entry name="pick">
      <![CDATA[

 <h2>Proof hint <code>pick</code></h2>

 This hint allows you to remove formulas from a sequent and to pick
 only some of them.

 <h3>Arguments</h3>
 Takes one or more sequent formula locators which match the regular expression
 <tt>(S|A).[0-9]+</tt>. <tt>A</tt> denoting antecedent and <tt>S</tt> succedent.
 The number means the number of the formula on the sequent (0 is first).

 <p> Formulas are removed using the <tt>hide_left</tt> and <tt>hide_right</tt>
 rules.

 <h3>Example</h3>
 Assume there is a larger complex sequent which looks like
 <center>
    {@code x >= 0, y >= 0, ... |- ...}
 </center>
 and that it helps the verification process to know that {@code x*y >= 0}.
 The decision procedure, however, is distracted by the remainder of the sequent.
 Hence we can guide it from within the program by adding
 <pre>
 {@code assert x*y >= 0 ; "first two imply goal §(pick A0 A1 S0)"}
 </pre>]]>
    </entry>
    <entry name="cut">
      <![CDATA[

 <h2>Proof hint <code>cut</code></h2>

 In order to perform a case distinction on a branch, this hint can be used.

 <h3>Arguments</h3>
 cut takes one argument which is the formula upon which to perform the cut.

 <h3>Example</h3>
 <pre>
 assert x*x >= 0 ; "examine by sign §(cut 'x >= 0')"
 </pre>]]>
    </entry>
    <entry name="inst">
      <![CDATA[

 <h2>Proof hint <code>inst</code></h2>

 This hint can be used to instantiate a universal quantifier in the antecedent
 or an existential one in the succedent.

 <h3>Arguments</h3>

 <tt>hint</tt> takes three arguments:
 <ol>
 <li> The first argument is either the quantified formula to be instantiated or
 the variable name to be instantiated.
 <li> The second argument must always be "with"
 <li> The third argument is the term with which the quantified variable is to
 be instantiated.
 <li> An optional fourth argument 'hide' may be added to apply the hiding rule
 </ol>

 <h3>Example</h3>
 Assuming that <code> (\forall x; p(x) = x+2)</code> is in the antecedent
 <pre>
 assert p(0) = 2 ; "use the quantifier by §(inst x with 0)"
 assert !p(1) = 2 ; "use the quantifier by §(inst '(\forall x; p(x)=x+2)' with 0)"
 </pre>]]>
    </entry>
  </category>
  <category name="Where condition">
    <entry name="">
      <![CDATA[

 <h1>Where conditions</h1>

 Where conditions are used to formulate constraints von schema instantiations
 in rule definitions. They describe conditions on the matched terms under
 which the rule may be applied.

 <p>
 Where conditions can take arguments, but do not have to. For some conditions,
 <i>marker arguments</i> (schema variables with special names) can be used to
 specify a particular behaviour of a condition.

 <h3>Example</h3>

 The where condition<br/>
 <tt>&nbsp;&nbsp;&nbsp;where intLiteral %a</tt><br/>

 in a rule makes the rule only applicable if the schema variable %a is
 instantiated with an integer literal.

 <h2>Active where conditions</h2>

 Where conditions cannot only check the instantiation context but also act and
 actively modify it.

 <p>
 An active where condition can add new schema instantiations to the context.
 Existing schema instantiations will not be changed, only new entries added.
 Please note that active conditions can also fail and not accept an
 instantiation.

 <p>
 The documentation will point out which parameters are active, and which are
 passive. Future syntax changes may make the distinction clearer.

 <h3>Example</h3>

 The where condition<br/>
 <tt>&nbsp;&nbsp;&nbsp;freshVar %z, %condition</tt><br/>

 instantiates <code>%z</code> with a variable of the same type which does not
 appear (bound or unbound) in the instantiation of <code>%condition</code>.]]>
    </entry>
    <entry name="toplevel">
      <![CDATA[
 
 <h2>Where condition <tt>toplevel</tt></h2>
 
 This condition can be used to ensure that the term which matches the find
 clause is not within the reach of an update or program modality.
 
 <h3>Syntax</h3> The where condition expects no arguments.
 
 <h3>Example:</h3>
 
 <pre>
   rule apply_equality 
   assume %a=%b |-
   where toplevel
   find %a
   replace %b
 </pre>
 
 The equality <tt>a=5</tt> must not be applied to replace the second
 <code>a</code> in the expression <tt>{a:=7}a=5</tt>
 
 <h3>See also:</h3>
 
 <h3>Result:</h3> <code>true</code> if the find clause of the rule matches
 against a term which is not in the scope of an update or a program modality,
 <code>false</code> otherwise. Does not fail.]]>
    </entry>
    <entry name="unorderedTerms">
      <![CDATA[

 TODO

 The where condition UnorderedTerms can be used to check whether two terms are
 in a certain order.

 It is used in the normalisation of equations
 <pre>
 rule equality_order
   find %t = %u |-
   where
     unorderedTerms %t, %u
   replace %u = %t
 </pre>

 It signals true iff the order value of %t is greater than the one of %u.]]>
    </entry>
    <entry name="interactive">
      <![CDATA[

 This where condition can be used in rules to indicate that a schema variable
 should be instantiated interactively.

 <h4>One parameter</h4> The where condition places a property into the rule
 application indicating that the schema variable <code>%v</code> of type
 <code>T</code> is to be interactively instantiated. It is of the form

 <pre>
   interact(%v) : T
 </pre>

 It is then the task of the interaction to process these properties and to
 amend the schema variable mapping of the rule application.

 <h4>Two parameters (type mode)</h4> The where condition can also carry a second parameter
 which must either be <code>true</code> or <code>false</code> (literally).
 <code>false</code> indicates the usual behaviour while <code>true</code> also
 allows to instantiate the type of the schema variable (<i>which <b>must</b> be
 schema type then). This is convenient for type instantiations.]]>
    </entry>
    <entry name="freshTypeVar">
      <![CDATA[

 ... to be finished ...

 <h2>Where condition <tt>freshTypeVar</tt></h2>

 This condition can be used to ensure that a type variable does not occur free nor
 bound in terms.

 <p>
 This is an example of an <em>active</em> condition since it may add schema
 instantiations. If the first formal parameter has a schema type, this
 becomes instantiated with a new type variable which does not
 occur in the arguments.

 <p>
 The resulting variable is named after the first parameter to the condition,
 possibly with an added number as suffix.

 <p>
 This condition can also be used to check whether a variable does not appear
 freely in a term. See second Example

 <h3>Syntax</h3> The where condition expects a first parameter which can
 either be a variable or a schema variable. Any number of arbitrary terms may
 follow.

 <h3>Example:</h3>

 <pre>
   to be done
 </pre>

 and (to check that a variable does not appear)

  <pre>
   rule T_all_remove
    find (\T_all %'x; %b)
    where freshTypeVar %'x, %b
    replace %b
 </pre>

 <h3>See also:</h3>
 <a href="ivil:/Where condition/freshVar">noFreeVars</a>

 <h3>Result:</h3>
 <code>true</code> if the first argument (or its instantiation) is (or has
 been chosen by this condition) a variable which does not occur unbound in the
 remaining arguments. It fails if the first argument is not matched by a
 variable.]]>
    </entry>
    <entry name="freshVar">
      <![CDATA[

 <h2>Where condition <tt>freshVar</tt></h2>

 This condition can be used to ensure that a variable does not occur free nor
 bound in terms.

 <p>
 This is an example of an <em>active</em> condition since it may add variable
 instantiations. If the first formal parameter is a schema variable, it
 becomes instantiated with a new variable of the same type which does not
 occur in the arguments.

 <p>
 The resulting variable is named after the first parameter to the condition,
 possibly with an added number as suffix.

 <p>
 This condition can also be used to check whether a variable does not appear
 freely in a term. See second Example

 <h3>Syntax</h3> The where condition expects a first parameter which can
 either be a variable or a schema variable. Any number of arbitrary terms may
 follow.

 <h3>Example:</h3>

 <pre>
   sort S
   function bool p(S, S)
   function bool allP(S)

   rule quant_definition
    find allP(%s1, %s2)
    where freshVar %x, %s2
    replace (\forall %x; p(%x, %s2))
 </pre>

 and (to check that a variable does not appear)

  <pre>
   rule forall_remove
    find (\forall %x; %b)
    where freshVar %x, %b
    replace %b
 </pre>

 <h3>See also:</h3>
 <a href="ivil:/Where condition/noFreeVars">noFreeVars</a>

 <h3>Result:</h3>
 <code>true</code> if the first argument (or its instantiation) is (or has
 been chosen by this condition) a variable which does not occur unbound in the
 remaining arguments. It fails if the first argument is not matched by a
 variable.]]>
    </entry>
    <entry name="noFreeVars">
      <![CDATA[

 <h2>Where condition <tt>noFreeVars</tt></h2>
 This condition can be used to ensure that a term contains no unbound variables.

 <h3>Syntax</h3>
 The where condition expects exactly one argument of any type.
 This can be a schema variable.

 <h3>Example:</h3>
 <pre>
   rule cut_cond
     find cond(%c, %a, %b)
   where
     toplevel
   where
     noFreeVars(%c)
   samegoal "Assume true for {%c}"
     add %c |-
     replace %a
   samegoal "Assume false for {%c}"
     add |- %c
 </pre>

 <h3>See also:</h3>
 <a href="ivil:/Where condition/freshVar">freshVar</a>

 <h3>Result:</h3>

 <code>true</code> if the argument has no free variables,
 <code>false</code> otherwise,
 never fails.]]>
    </entry>
    <entry name="presentInSuccedent">
      <![CDATA[
 
 <h2>Where condition <tt>presentInSuccedent</tt></h2>
 
 This condition can be used to ensure that a formula is present in 
 the succedent of the sequent.
 
 <p>
 A formula is considered to be present if it appears toplevel and
 syntactically equal on the sequent.
 
 <p>
 If more than one argument is provided, the check will be performed for all
 arguments. The result will be <code>true</code> only if all arguments pass
 it.
 
 <h3>Syntax</h3> The where condition expects one or more boolean terms as
 arguments.
 
 <h3>Example:</h3>
 
 <pre>
   function int card(set('a))
   
   rule nonneg_cardinality
   find card(%x)
   where not presentInSuccedent card(%x) < 0
   add |- card(%x) < 0 
 </pre>
 
 <h3>See also:</h3>
 <a href="ivil:/Where condition/presentInSequent">presentInSequent</a>,
 <a href="ivil:/Where condition/presentInAntecedent">presentInAntecedent</a>
 
 <h3>Result:</h3>
 <code>true</code> if the all arguments appear toplevel in the sequent,
 <code>false</code> otherwise. Does never fail.]]>
    </entry>
    <entry name="intLiteral">
      <![CDATA[
 
 <h2>Where condition <tt>intLiteral</tt></h2>
 This condition can be used to ensure that a term of integer type is a
 number literal.
 
 <h3>Syntax</h3>
   The where condition expects exactly one argument of type integer.
   This can be a schema variable.
 
 <h3>Example:</h3>
 <pre>
   rule add_literal
   find %a + %b
   where intLiteral %a
         intLiteral %b
   replace $$intEval(%a + %b)
 </pre>
 
 <h3>See also:</h3>
 <a href="ivil:/Meta function/intEval">intEval</a>
 
 <h3>Result:</h3>
 
 <code>true</code> if the argument is a number literal, 
 <code>false</code> otherwise,
 never fails.]]>
    </entry>
    <entry name="distinctAssumeAndFind">
      <![CDATA[
 
 <h2>Where condition <tt>distinctAssumeAndFind</tt></h2>
 
 This condition can be used to ensure that the find clause does not match the
 same as any of the assume clauses.
 
 <h3>Syntax</h3> The where condition expects no arguments.
 
 <h3>Example:</h3>
 
 <pre>
   rule replace_known_left
   assume  %b |-
   find    %b 
   where   toplevel
   where   distinctAssumeAndFind
   replace true
 </pre>
 
 This prevents from replacing an antecedent
 
 <h3>See also:</h3> <a href="ivil:/Where condition/toplevel">toplevel</a>
 
 <h3>Result:</h3>
 
 <code>true</code> if the find clauses does not match the same as an assume
 clause. <code>false</code> if the find clause matches against the same term
 in a sequent as an assumption.]]>
    </entry>
    <entry name="presentInSequent">
      <![CDATA[
 
 <h2>Where condition <tt>presentInSequent</tt></h2>
 
 This condition can be used to ensure that a formula is present either in the
 antecedent or the succedent of the sequent.
 
 <p>
 A formula is considered to be present if it appears toplevel and
 syntactically equal on the sequent.
 
 <p>
 If more than one argument is provided, the check will be performed for all
 arguments. The result will be <code>true</code> only if all arguments pass
 it.
 
 <h3>Syntax</h3> The where condition expects one or more boolean terms as
 arguments.
 
 <h3>Example:</h3>
 
 <pre>
   function int f(int)
   
   rule cut_f_zero
   find f(%x)
   where not presentInSequent f(%x)
   samegoal add f(%x) = 0 |-
   samegoal add |- f(%x) = 0
 </pre>
 
 <h3>See also:</h3>
 <a href="ivil:/Where condition/presentInAntecedent">presentInAntecedent</a>,
 <a href="ivil:/Where condition/presentInSuccedent">presentInSuccedent</a>
 
 <h3>Result:</h3>
 <code>true</code> if the all arguments appear toplevel in the sequent,
 <code>false</code> otherwise. Does never fail.]]>
    </entry>
    <entry name="axiom">
      <![CDATA[
 
 <h2>Where condition <tt>axiom</tt></h2>
 
 This condition can be used to ensure that a term has been defined as an
 axiom.
 
 <p>
 In addition to giving the term of an axiom, the property "axiomName" must be
 set on the rule application
 
 <h3>Syntax</h3> The where condition expects one parameter.
 
 <h3>Example:</h3>
 The condition is used in the rule
 
 <pre>
   rule `axiom`
   where `axiom` %b
   add %b |-
   tags autoonly
        display "Insert axiom {property axiomName}"
 </pre>
 
 (axiom needs to back-quoted since it is a keyword)
 
 <h3>See also:</h3> <a href="ivil:/Rule property/asAxiom">asAxiom</a>
 
 <h3>Result:</h3>
 
 <code>true</code> if the argument has been declared as axiom under the
 specified name. Fails otherwise.]]>
    </entry>
    <entry name="presentInAntecedent">
      <![CDATA[
 
 <h2>Where condition <tt>presentInAntecedent</tt></h2>
 
 This condition can be used to ensure that a formula is present either in the
 antecedent or the succedent of the sequent.
 
 <p>
 A formula is considered to be present if it appears toplevel and
 syntactically equal on the sequent.
 
 <p>
 If more than one argument is provided, the check will be performed for all
 arguments. The result will be <code>true</code> only if all arguments pass
 it.
 
 <h3>Syntax</h3> The where condition expects one or more boolean terms as
 arguments.
 
 <h3>Example:</h3>
 
 <pre>
   function int card(set('a))
   
   rule positive_cardinality
   find card(%x)
   where not presentInAntecedent card(%x) >= 0
   add card(%x) >= 0 |-
 </pre>
 
 <h3>See also:</h3>
 <a href="ivil:/Where condition/presentInSequent">presentInSequent</a>,
 <a href="ivil:/Where condition/presentInSuccedent">presentInSuccedent</a>
 
 <h3>Result:</h3>
 <code>true</code> if the all arguments appear toplevel in the sequent,
 <code>false</code> otherwise. Does never fail.]]>
    </entry>
  </category>
  <category name="Meta function">
    <entry name="$$skolem">
      <![CDATA[

 <h2>Meta function <tt>$$skolem</tt></h2>

 This meta function can be used to create a new skolem symbol. Since ivil does
 not support free variables (unbound) every skolem symbol is nullary function
 symbol.

 <h3>Syntax</h3>

 The meta function takes one argument of arbitrary type and returns a term of
 the same type. If applied twice or more often to the same term, it results in
 the same term. This term is new constant symbol which has not yet occurred in
 the proof.

 <h3>Example:</h3>

 <pre>
 rule forall_right
   find  |-  (\forall %x; %b)
   replace  $$subst(%x, $$skolem(%x), %b)
 </pre>

 <h3>See also:</h3>
 <a href="ivil:/Meta function/$$subst">$$subst</a>]]>
    </entry>
    <entry name="$$subst">
      <![CDATA[

 <h2>Meta function <tt>$$subst</tt></h2>

 This meta function can be used to substitute a logical variable (not a program variable) by an
 arbitrary term in another term.

 <h3>Syntax</h3>

 The meta function <pre>
    'a $$subst('b, 'b, 'a)
 </pre>
 takes three arguments and returns a term of the type of the last argument.
 The first argument denotes the variable to be substitued, the second denotes
 the value to replace with and the third denotes the target term in which every
 <i>free</i> occurrence of the first argument is replaced by the second argument.
 Bound occurrences are kept untouched.

 <h3>Example:</h3>

 <pre>
 rule
   find  |-  (\forall %x; %b)
   replace  $$subst(%x, $$skolem(%x), %b)
 </pre>

 <h3>See also:</h3>
 <a href="ivil:/Meta function/$$subst">$$subst</a><br/>
 <a href="ivil:/Meta function/$$polymorphicSubst">$$polymorphicSubst</a>]]>
    </entry>
  </category>
</ivildoc>

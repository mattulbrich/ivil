/* Generated By:JavaCC: Do not edit this line. ASTParserTokenManager.java */
/*
 * Copyright (C) 2008 Jï¿½lio Vilmar Gesser.
 * Copyright (C) 2011 Timm Felden.
 *
 * This file is part of Java 1.5/JML* parser and Abstract Syntax Tree.
 *
 * Java 1.5 parser and Abstract Syntax Tree is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Java 1.5 parser and Abstract Syntax Tree is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Java 1.5 parser and Abstract Syntax Tree.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.uka.iti.ivil.jml.parser;
import java.io.*;
import java.util.*;
import de.uka.iti.ivil.jml.parser.ast.*;
import de.uka.iti.ivil.jml.parser.ast.body.*;
import de.uka.iti.ivil.jml.parser.ast.expr.*;
import de.uka.iti.ivil.jml.parser.ast.spec.*;
import de.uka.iti.ivil.jml.parser.ast.stmt.*;
import de.uka.iti.ivil.jml.parser.ast.type.*;

/** Token Manager. */
public class ASTParserTokenManager implements ASTParserConstants
{
  private List < Comment > comments;

  private final Stack < JavadocComment > javadocStack = new Stack < JavadocComment > ();

  private JavadocComment lastJavadoc;

  void pushJavadoc()
  {
    javadocStack.push(lastJavadoc);
  }
  JavadocComment popJavadoc()
  {
    return javadocStack.pop();
  }
  List < Comment > getComments()
  {
    return comments;
  }

  void clearComments()
  {
    comments = null;
    javadocStack.clear();
    lastJavadoc = null;
  }

  private void CommonTokenAction(Token token)
  {
    lastJavadoc = null;
    if (token.specialToken != null)
    {
      if (comments == null)
      {
        comments = new LinkedList < Comment > ();
      }
      Token special = token.specialToken;
      if (special.kind == JAVA_DOC_COMMENT)
      {
        lastJavadoc = new JavadocComment(special.beginLine, special.beginColumn, special.endLine, special.endColumn, special.image.substring(3, special.image.length() - 2));
        comments.add(lastJavadoc);
      }
      else if (special.kind == SINGLE_LINE_COMMENT)
      {
        LineComment comment = new LineComment(special.beginLine, special.beginColumn, special.endLine, special.endColumn, special.image.substring(2));
        comments.add(comment);
      }
      else if (special.kind == MULTI_LINE_COMMENT)
      {
        BlockComment comment = new BlockComment(special.beginLine, special.beginColumn, special.endLine, special.endColumn, special.image.substring(2, special.image.length() - 2));
        comments.add(comment);
      }
    }
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffe0000L) != 0L || (active1 & 0x3fL) != 0L)
         {
            jjmatchedKind = 110;
            return 37;
         }
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 165;
            return -1;
         }
         if ((active0 & 0x20c0L) != 0L || (active2 & 0x201000L) != 0L)
            return 55;
         if ((active1 & 0x200000000000000L) != 0L || (active2 & 0x8020000000L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0xfffffeff9ffe0000L) != 0L || (active1 & 0x3fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 37;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 1;
            }
            return 87;
         }
         if ((active0 & 0x2040L) != 0L)
            return 60;
         if ((active0 & 0x10060000000L) != 0L)
            return 37;
         return -1;
      case 2:
         if ((active0 & 0x80L) != 0L)
            return 87;
         if ((active0 & 0x1304000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 37;
         if ((active0 & 0xfffecebfdffe0000L) != 0L || (active1 & 0x3bL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 37;
         }
         return -1;
      case 3:
         if ((active0 & 0xdffcae3e5e9e0000L) != 0L || (active1 & 0x31L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
            return 37;
         }
         if ((active0 & 0x2002408181600000L) != 0L || (active1 & 0xaL) != 0L)
            return 37;
         return -1;
      case 4:
         if ((active0 & 0x1b7cae02580e0000L) != 0L || (active1 & 0x11L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 4;
            }
            return 37;
         }
         if ((active0 & 0xc480003c06900000L) != 0L || (active1 & 0x20L) != 0L)
            return 37;
         return -1;
      case 5:
         if ((active0 & 0x121c2a12180a0000L) != 0L || (active1 & 0x11L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 37;
         }
         if ((active0 & 0x8960840040040000L) != 0L)
            return 37;
         return -1;
      case 6:
         if ((active0 & 0xc001210080000L) != 0L)
            return 37;
         if ((active0 & 0x12102a0008020000L) != 0L || (active1 & 0x11L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
            return 37;
         }
         return -1;
      case 7:
         if ((active0 & 0x10102a0000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 7;
            return 37;
         }
         if ((active0 & 0x200000008020000L) != 0L || (active1 & 0x10L) != 0L)
            return 37;
         return -1;
      case 8:
         if ((active0 & 0x10000a0000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 8;
            return 37;
         }
         if ((active0 & 0x10200000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 37;
         return -1;
      case 9:
         if ((active0 & 0xa0000000000L) != 0L)
            return 37;
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
            return 37;
         }
         return -1;
      case 10:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 10;
            return 37;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 5);
      case 12:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 3);
      case 26:
         return jjStopAtPos(0, 165);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 37:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400040L);
      case 40:
         return jjStopAtPos(0, 113);
      case 41:
         return jjStopAtPos(0, 114);
      case 42:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 43:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40080L);
      case 44:
         return jjStopAtPos(0, 120);
      case 45:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80100L);
      case 46:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8020000000L);
      case 47:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x20c0L, 0x0L, 0x200000L);
      case 58:
         return jjStopAtPos(0, 128);
      case 59:
         return jjStopAtPos(0, 119);
      case 60:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2c4020004L);
      case 61:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000002L);
      case 62:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc18000008L);
      case 63:
         return jjStopAtPos(0, 127);
      case 64:
         return jjStopAtPos(0, 122);
      case 91:
         return jjStopAtPos(0, 117);
      case 93:
         return jjStopAtPos(0, 118);
      case 94:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x380000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc00000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x70000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x380000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c00000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f0000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3800000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1f80000000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x7L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0x0L);
      case 123:
         return jjStopAtPos(0, 115);
      case 124:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800020L);
      case 125:
         return jjStopAtPos(0, 116);
      case 126:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 42:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 43:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 45:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         break;
      case 46:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 60:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 61:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3c0000000L);
      case 62:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x418000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800400c00000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x41000010000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 37);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xe080000001000000L, active1, 0x20L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2082000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x380100000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40c04c080000L, active1, 0x18L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000100000L, active1, 0x7L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x422000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000200000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 46:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 157);
         break;
      case 61:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 155);
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 62:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000000L);
      case 64:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 87);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000003000000L, active1, 0x1L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2808000000000000L, active1, 0x28L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000400000000L, active1, 0x10L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040180c000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x90002000080000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400060000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0xc200000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80080460000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40a08200a00000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000L, active1, 0x2L, active2, 0L);
      case 119:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 37);
         break;
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 156);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 62:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 158);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x3810100000L, active1, 0x10L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000800000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 37);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 37);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 37);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 37);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x400200200040000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200800000000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x20020000080000L, active1, 0x20L, active2, 0L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 37);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000040000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x406000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x910080008020000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 159);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc080000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 37);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x10020000080000L, active1, 0L, active2, 0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000008000000L, active1, 0L, active2, 0L);
      case 107:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 37);
         break;
      case 108:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x40240000060000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 37);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 37);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0000L, active1, 0L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 37);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 37);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 37);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x11L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x80008000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 37);
         break;
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 37);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x208000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000020000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 37);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 37);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 37);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 37);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 37);
         return jjMoveStringLiteralDfa8_0(active0, 0x10080000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000020000000000L, active1, 0x1L);
      case 112:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 37);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 37);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 37);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 37);
         break;
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 37);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 60, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x7fffffffffffffL, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x401f0003ffc3L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0x33fffffffff7fffL
};
static final long[] jjbitVec8 = {
   0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffec000000007ffL, 0xffffffffffffffffL, 0x9c00c060002fffffL
};
static final long[] jjbitVec10 = {
   0xfffffffd0000L, 0xe000L, 0x2003fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23fffffffffffff0L, 0x3ff010000L, 0x23c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x2000300010000L
};
static final long[] jjbitVec13 = {
   0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3bfc718d63dc7e8L, 0x200000000000000L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x23effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x1ffffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x1c7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x18800000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0x1fffffffL, 0x1f3fffffff0000L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xfffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec29 = {
   0x8000000000000000L, 0x8002000000100001L, 0x3ffff00000000L, 0x0L
};
static final long[] jjbitVec30 = {
   0xe3fbbd503e2ffc84L, 0xffffffff000003e0L, 0xfL, 0x0L
};
static final long[] jjbitVec31 = {
   0x1f3e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec32 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec36 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec37 = {
   0x6L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0xffff3fffffffffffL, 0x7ffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec40 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0x1fff0000000000ffL
};
static final long[] jjbitVec41 = {
   0x18000000000000L, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec42 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec43 = {
   0x0L, 0x0L, 0x420243cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec44 = {
   0xffffffffffffffffL, 0x400ffffe0ffffffL, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
};
static final long[] jjbitVec45 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc7bL, 0x33fffffffff7fffL
};
static final long[] jjbitVec46 = {
   0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec47 = {
   0x7fffffe003f000fL, 0xffffc3ff01ffffffL, 0xffffffffffffffffL, 0x9ffffdffbfefffffL
};
static final long[] jjbitVec48 = {
   0xffffffffffff8000L, 0xe7ffL, 0x3ffffffffffffL, 0x0L
};
static final long[] jjbitVec49 = {
   0xf3fffffffffffffeL, 0xffcfff1f3fffL, 0xf3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec50 = {
   0xd36dfdfffff987eeL, 0x1fffc05e003987L, 0xf3edfdfffffbbfeeL, 0x2ffcf00013bbfL
};
static final long[] jjbitVec51 = {
   0xf3edfdfffff99feeL, 0x2ffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0x200ff8000803dc7L
};
static final long[] jjbitVec52 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xf3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec53 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec54 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec55 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec56 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x1ffffffffff003fL
};
static final long[] jjbitVec57 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec58 = {
   0x1fffff001fdfffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff388fffffL
};
static final long[] jjbitVec59 = {
   0xffffffff03ff3800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec60 = {
   0xfff0fff1fffffffL, 0x1f3fffffffffc0L, 0x0L, 0x0L
};
static final long[] jjbitVec61 = {
   0x80007c000000f000L, 0x8002fc0f00100001L, 0x3ffff00000000L, 0x7e21fff0000L
};
static final long[] jjbitVec62 = {
   0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec63 = {
   0x10000000000006L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec64 = {
   0x3L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec65 = {
   0x0L, 0x800000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec66 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec67 = {
   0x18000f0000ffffL, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec68 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 87;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 165)
                     kind = 165;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 47)
                     jjAddStates(7, 8);
                  else if (curChar == 36)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 15);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(16, 18);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(19, 25);
                  }
                  break;
               case 87:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(26, 28);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 55:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 47)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(26, 28);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(29, 31);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 39)
                     jjAddStates(13, 15);
                  break;
               case 7:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar == 39 && kind > 108)
                     kind = 108;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 8);
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 13:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 31:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 34:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 36:
                  if (curChar != 36)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (kind > 165)
                     kind = 165;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 5);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(47, 5);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar != 46)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(40, 42);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(40, 42);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(53, 5);
                  break;
               case 54:
                  if (curChar == 47)
                     jjAddStates(7, 8);
                  break;
               case 56:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(26, 28);
                  break;
               case 57:
                  if ((0x2400L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 58:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 59:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 62:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(16, 18);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if (curChar != 48)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(19, 25);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 65);
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 65);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 73:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(73);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 76:
                  if (curChar == 46)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 79:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(80, 5);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 83:
                  if (curChar == 46)
                     jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(86, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 165)
                     kind = 165;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(37);
                  }
                  break;
               case 87:
               case 56:
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(26, 28);
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 5:
                  if ((0x5000000050L & l) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 10:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 15:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 20:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(53, 55);
                  break;
               case 24:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 25:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 30:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (kind > 165)
                     kind = 165;
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 61:
                  if (kind > 12)
                     kind = 12;
                  break;
               case 65:
                  if ((0x100000001000L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 68:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(69, 65);
                  break;
               case 71:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(72);
                  break;
               case 74:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 78:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 81:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 84:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(37);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 165)
                        kind = 165;
                  }
                  break;
               case 87:
               case 56:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(26, 28);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 12);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 165)
                     kind = 165;
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 87 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x8000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3f0000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 262;
         }
         if ((active0 & 0xe04040fc703e0000L) != 0L || (active1 & 0x1b89bffL) != 0L)
         {
            jjmatchedKind = 110;
            return 70;
         }
         if ((active1 & 0x3c414000L) != 0L)
         {
            jjmatchedKind = 165;
            return 225;
         }
         if ((active1 & 0x200000000000000L) != 0L || (active2 & 0x20000000L) != 0L)
            return 34;
         if ((active0 & 0x3800000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 195;
         }
         if ((active0 & 0xfc00000L) != 0L)
         {
            jjmatchedKind = 110;
            return 161;
         }
         if ((active0 & 0x3c000000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 2;
         }
         if ((active0 & 0x1f80000000000000L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 97;
         }
         if ((active0 & 0x380000000L) != 0L || (active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 110;
            return 28;
         }
         return -1;
      case 1:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 200;
         }
         if ((active1 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 252;
         }
         if ((active1 & 0x18010000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0xc000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 160;
         }
         if ((active0 & 0x380000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 261;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active1 & 0x20004000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 230;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x10060000000L) != 0L)
            return 70;
         if ((active0 & 0xffddc6fd93fe0000L) != 0L || (active1 & 0x3b8bbffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 70;
         }
         if ((active1 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 242;
         }
         return -1;
      case 2:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 286;
         }
         if ((active1 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 2;
            }
            return 251;
         }
         if ((active0 & 0x1304000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 70;
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 199;
         }
         if ((active0 & 0xfffcc6bddffe0000L) != 0L || (active1 & 0x3b8bbfbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 70;
         }
         if ((active1 & 0x38414000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 26;
         }
         return -1;
      case 3:
         if ((active1 & 0x3c404000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 198;
         if ((active0 & 0x2000408181600000L) != 0L || (active1 & 0x4aL) != 0L)
            return 70;
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
            return 285;
         }
         if ((active0 & 0xdffca63e5e9e0000L) != 0L || (active1 & 0x3b8bbb1L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
            return 70;
         }
         if ((active1 & 0x10000L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x1b7ca602580e0000L) != 0L || (active1 & 0x3983991L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 4;
            }
            return 70;
         }
         if ((active1 & 0x24404000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0xc480003c06900000L) != 0L || (active1 & 0x208220L) != 0L)
            return 70;
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 4;
            }
            return 284;
         }
         if ((active1 & 0x18000000L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x121c2212180a0000L) != 0L || (active1 & 0x3983891L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 70;
         }
         if ((active0 & 0x8960840040040000L) != 0L || (active1 & 0x100L) != 0L)
            return 70;
         if ((active1 & 0x34404000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 283;
         }
         return -1;
      case 6:
         if ((active1 & 0x24404000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
            return 313;
         }
         if ((active0 & 0xc001210080000L) != 0L || (active1 & 0x2002000L) != 0L)
            return 70;
         if ((active0 & 0x1210220008020000L) != 0L || (active1 & 0x1981891L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
            return 70;
         }
         if ((active1 & 0x10000000L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x1010220000000000L) != 0L || (active1 & 0x1181081L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 7;
            return 70;
         }
         if ((active1 & 0x24004000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 7;
            return 70;
         }
         if ((active0 & 0x200000008020000L) != 0L || (active1 & 0x800810L) != 0L)
            return 70;
         if ((active1 & 0x400000L) != 0L)
            return 32;
         return -1;
      case 8:
         if ((active0 & 0x10000a0000000000L) != 0L || (active1 & 0x1181080L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 8;
            return 70;
         }
         if ((active0 & 0x10200000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 70;
         if ((active1 & 0x4004000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
            return 32;
         }
         if ((active1 & 0x20000000L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0xa0000000000L) != 0L || (active1 & 0x1001080L) != 0L)
            return 70;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x180000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
            return 70;
         }
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
            return 32;
         }
         if ((active1 & 0x4000000L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active1 & 0x100000L) != 0L)
            return 70;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 10;
            return 70;
         }
         if ((active1 & 0x4000L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 70;
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 11;
            return 70;
         }
         return -1;
      case 12:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 12;
            return 70;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 5);
      case 12:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 3);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x10L);
      case 37:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x400040L);
      case 40:
         return jjStopAtPos(0, 113);
      case 41:
         return jjStopAtPos(0, 114);
      case 42:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_1(0x200L, 0x0L, 0x100000L);
      case 43:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x40080L);
      case 44:
         return jjStopAtPos(0, 120);
      case 45:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x80100L);
      case 46:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x20000000L);
      case 47:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x200000L);
      case 58:
         return jjStopAtPos(0, 128);
      case 59:
         return jjStopAtPos(0, 119);
      case 60:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000L, 0x2c4020004L);
      case 61:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x100000002L);
      case 62:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0xc18000008L);
      case 63:
         return jjStopAtPos(0, 127);
      case 64:
         return jjStopAtPos(0, 8);
      case 91:
         return jjStopAtPos(0, 117);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3c414000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 118);
      case 94:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x60000L, 0x3c0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x380000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0xfc00000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x70000000L, 0x1800L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x380000000L, 0x2000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x7c00000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x8000000000L, 0x8000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x3f0000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x80000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x300000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x3800000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x3c000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x1800000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x1f80000000000000L, 0x2000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0xe000000000000000L, 0x7L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x18L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20L, 0x0L);
      case 123:
         return jjStopAtPos(0, 115);
      case 124:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x800020L);
      case 125:
         return jjStopAtPos(0, 116);
      case 126:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 43:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 45:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 58:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 60:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 61:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x3c0000000L);
      case 62:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x418000000L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x4800400c00000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x41000010000000L, active1, 0x21905000L, active2, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 40, 70);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0xe080000001000000L, active1, 0x8020L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x1800000000L, active1, 0x2010800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x2082000000L, active1, 0x40L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x60000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x380100000000L, active1, 0x402000L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x40c04c080000L, active1, 0x280018L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x18000000100000L, active1, 0x7L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000L, active1, 0x4000180L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x300000000000000L, active1, 0x18000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x422000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000L, active1, 0x200L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000200000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 46:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 157);
         break;
      case 61:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 155);
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 62:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000003000000L, active1, 0x100001L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000000L, active1, 0x1000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x200000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x2808000000000000L, active1, 0x228L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000400000000L, active1, 0x20000010L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x100040180c000000L, active1, 0x10000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x90002000080000L, active1, 0x488000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x400060000000000L, active1, 0x1000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x800000L, active2, 0L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 38, 70);
         return jjMoveStringLiteralDfa3_1(active0, 0xc200000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x80080460000L, active1, 0x21c0L, active2, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x40a08200a00000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x140000000L, active1, 0x4000002L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x4800L, active2, 0L);
      case 119:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 48, 70);
         break;
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(2, 66, 70);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x18000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 156);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 62:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 158);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x3810100000L, active1, 0x10L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000800000L, active1, 0x4000000L, active2, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(3, 67, 70);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(3, 21, 70);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(3, 22, 70);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 70);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(3, 65, 70);
         return jjMoveStringLiteralDfa4_1(active0, 0x400200200040000L, active1, 0x20204800L, active2, 0L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 46, 70);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x200800000000000L, active1, 0x80L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 49, 198);
         return jjMoveStringLiteralDfa4_1(active0, 0x20020000080000L, active1, 0x20L, active2, 0L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 70);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x2000001L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 39, 70);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(3, 70, 70);
         return jjMoveStringLiteralDfa4_1(active0, 0xc000040000000000L, active1, 0x200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x18080000L, active2, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(3, 24, 70);
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000000L, active1, 0x1001000L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 61, 70);
         return jjMoveStringLiteralDfa4_1(active0, 0x406000000L, active1, 0x108000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x910080008020000L, active1, 0x400000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000000L, active1, 0x802100L, active2, 0L);
      case 118:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 80, 32);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 159);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0xc080000000000L, active1, 0x2000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0xa00000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 34, 70);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(4, 69, 70);
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x10020000080000L, active1, 0x11001000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(4, 23, 70);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000000L, active1, 0x4400000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x120000008000000L, active1, 0x800000L, active2, 0L);
      case 107:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 70);
         break;
      case 108:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(4, 85, 70);
         return jjMoveStringLiteralDfa5_1(active0, 0x1040000000L, active1, 0L, active2, 0L);
      case 109:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(4, 73, 70);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x20000100L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 58, 70);
         return jjMoveStringLiteralDfa5_1(active0, 0x40240000060000L, active1, 0x6800L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(4, 25, 70);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(4, 26, 70);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 37, 70);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 55, 70);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 79, 70);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x10L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L, active1, 0x100000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0xa0000L, active1, 0x1000L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 53, 70);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 56, 70);
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 70);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 47, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(5, 72, 70);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000L, active1, 0x800L);
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 59, 70);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x480011L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x1010000000L, active1, 0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 54, 70);
         return jjMoveStringLiteralDfa6_1(active0, 0x80008000000L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000000000L, active1, 0x900000L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 63, 70);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(5, 18, 70);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 42, 70);
         return jjMoveStringLiteralDfa6_1(active0, 0x208000000000000L, active1, 0x20000000L);
      case 121:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x80000020000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 50, 70);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 51, 70);
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000L, active1, 0x1900801L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(6, 92, 32);
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x10L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(6, 19, 70);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x480000L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(6, 33, 70);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(6, 77, 70);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(6, 89, 70);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x1000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(6, 28, 70);
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000000000L, active1, 0x4004000L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 36, 70);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x100000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(7, 27, 70);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(7, 68, 70);
         return jjMoveStringLiteralDfa8_1(active0, 0x10080000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(7, 86, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x4004000L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x1000020000000000L, active1, 0x1000001L);
      case 112:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 57, 70);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x20000000L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(7, 75, 70);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(7, 87, 70);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(7, 17, 70);
         break;
      case 118:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x4080000L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 52, 70);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 45, 70);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(8, 93, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x1000000000000000L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x80000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(8, 64, 70);
         return jjMoveStringLiteralDfa9_1(active0, 0x20000000000L, active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x100000L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(9, 71, 70);
         break;
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 43, 70);
         break;
      case 103:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(9, 76, 70);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x80000L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 41, 70);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(9, 88, 70);
         break;
      case 116:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(9, 90, 32);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(10, 78, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x80000L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(10, 84, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x80000L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 60, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_1(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(13, 83, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_1(12, 0L, active1, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 313;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 262:
               case 70:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 3:
                  if (kind > 165)
                     kind = 165;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 74);
                  else if (curChar == 36)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(75, 78);
                  else if (curChar == 39)
                     jjAddStates(79, 81);
                  else if (curChar == 46)
                     jjCheckNAdd(34);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(82, 84);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(85, 91);
                  }
                  break;
               case 1:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 286:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 161:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 284:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 283:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 195:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 27:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 252:
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 242:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 225:
                  if (curChar != 36)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 230:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 160:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 2:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 313:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 199:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 198:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 285:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 28:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 97:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 26:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 251:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 261:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 200:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(92, 94);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if (curChar == 39)
                     jjAddStates(79, 81);
                  break;
               case 40:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if (curChar == 39 && kind > 108)
                     kind = 108;
                  break;
               case 43:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 41);
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 46:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 54:
                  if (curChar == 34)
                     jjCheckNAddStates(75, 78);
                  break;
               case 55:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 57:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 64:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 65:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(95, 99);
                  break;
               case 66:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 67:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 69:
                  if (curChar != 36)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (kind > 165)
                     kind = 165;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 74);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 38);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 79:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(80, 38);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar != 46)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(103, 105);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(103, 105);
                  break;
               case 85:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(86, 38);
                  break;
               case 289:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(82, 84);
                  break;
               case 290:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(290, 291);
                  break;
               case 292:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(292);
                  break;
               case 293:
                  if (curChar != 48)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(85, 91);
                  break;
               case 295:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(295, 291);
                  break;
               case 296:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(296, 291);
                  break;
               case 298:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 299:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(299);
                  break;
               case 301:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 302:
                  if (curChar == 46)
                     jjCheckNAdd(303);
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(303, 304);
                  break;
               case 305:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(306);
                  break;
               case 306:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(306, 38);
                  break;
               case 308:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 309:
                  if (curChar == 46)
                     jjCheckNAdd(310);
                  break;
               case 311:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(312);
                  break;
               case 312:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(312, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 262:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 287;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 281;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 3:
                  if (kind > 165)
                     kind = 165;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  else if (curChar == 92)
                     jjAddStates(111, 117);
                  if (curChar == 105)
                     jjAddStates(118, 120);
                  else if (curChar == 110)
                     jjAddStates(121, 123);
                  else if (curChar == 99)
                     jjAddStates(124, 126);
                  else if (curChar == 115)
                     jjAddStates(127, 131);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 114)
                     jjCheckNAdd(0);
                  break;
               case 286:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 161:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 186;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 172;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 284:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 99)
                     jjCheckNAdd(0);
                  break;
               case 195:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 217;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 194;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 27:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 252:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 242:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 225:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 252;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 249;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 242;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 236;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 230;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 224;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 230:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 160:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 185;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 2:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 313:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  break;
               case 199:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 215;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 198:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 214;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 285:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 28:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 97:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 147;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 133;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 26:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 251:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 109)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  break;
               case 261:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 286;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 280;
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 200:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 216;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 0:
                  if (curChar == 101 && kind > 82)
                     kind = 82;
                  break;
               case 4:
                  if (curChar == 114 && kind > 82)
                     kind = 82;
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 100 && kind > 82)
                     kind = 82;
                  break;
               case 11:
               case 98:
                  if (curChar == 101)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 116 && kind > 82)
                     kind = 82;
                  break;
               case 24:
                  if (curChar == 99)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(132, 133);
                  break;
               case 38:
                  if ((0x5000000050L & l) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 40:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar == 92)
                     jjAddStates(134, 136);
                  break;
               case 43:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 48:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 53:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 55:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 56:
                  if (curChar == 92)
                     jjAddStates(137, 139);
                  break;
               case 57:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 58:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 63:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (kind > 165)
                     kind = 165;
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 78:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 84:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 87:
                  if (curChar == 115)
                     jjAddStates(127, 131);
                  break;
               case 88:
                  if (curChar == 99 && kind > 82)
                     kind = 82;
                  break;
               case 89:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 99:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 104 && kind > 82)
                     kind = 82;
                  break;
               case 111:
               case 123:
               case 135:
               case 150:
               case 162:
               case 174:
                  if (curChar == 116)
                     jjCheckNAdd(110);
                  break;
               case 112:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 124:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 99)
                     jjAddStates(124, 126);
                  break;
               case 151:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 163:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 175:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 110)
                     jjAddStates(121, 123);
                  break;
               case 189:
                  if (curChar == 108 && kind > 82)
                     kind = 82;
                  break;
               case 190:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 196:
                  if (curChar == 108)
                     jjCheckNAdd(0);
                  break;
               case 197:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 201:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 108)
                     jjCheckNAdd(23);
                  break;
               case 203:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 92)
                     jjAddStates(111, 117);
                  break;
               case 220:
                  if (curChar == 108 && kind > 74)
                     kind = 74;
                  break;
               case 221:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 226:
                  if (curChar == 115 && kind > 74)
                     kind = 74;
                  break;
               case 227:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 231:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 120 && kind > 74)
                     kind = 74;
                  break;
               case 233:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if (curChar == 110 && kind > 74)
                     kind = 74;
                  break;
               case 236:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if (curChar == 102 && kind > 74)
                     kind = 74;
                  break;
               case 239:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 243:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 116 && kind > 74)
                     kind = 74;
                  break;
               case 245:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 253:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if (curChar == 105)
                     jjAddStates(118, 120);
                  break;
               case 255:
                  if (curChar == 116 && kind > 81)
                     kind = 81;
                  break;
               case 256:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 263:
                  if (curChar == 121 && kind > 81)
                     kind = 81;
                  break;
               case 264:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 278:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 287:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 291:
                  if ((0x100000001000L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 294:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(295);
                  break;
               case 295:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(295, 291);
                  break;
               case 297:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(298);
                  break;
               case 298:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(298);
                  break;
               case 300:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(301, 302);
                  break;
               case 301:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(301, 302);
                  break;
               case 303:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(140, 141);
                  break;
               case 304:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(142, 143);
                  break;
               case 307:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(308);
                  break;
               case 308:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 310:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(144, 145);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 262:
               case 70:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 165)
                        kind = 165;
                  }
                  break;
               case 1:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 286:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 161:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 284:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 283:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 195:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 27:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 160:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 313:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 199:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 198:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 285:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 28:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 97:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 26:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 261:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 200:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(75, 78);
                  break;
               case 69:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 165)
                     kind = 165;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 313 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x4000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3f0000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 262;
         }
         if ((active0 & 0xe04040fc703e0000L) != 0L || (active1 & 0x1b89bffL) != 0L)
         {
            jjmatchedKind = 110;
            return 70;
         }
         if ((active1 & 0x3c414000L) != 0L)
         {
            jjmatchedKind = 165;
            return 225;
         }
         if ((active1 & 0x200000000000000L) != 0L || (active2 & 0x20000000L) != 0L)
            return 34;
         if ((active0 & 0x3800000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 195;
         }
         if ((active0 & 0xfc00000L) != 0L)
         {
            jjmatchedKind = 110;
            return 161;
         }
         if ((active0 & 0x3c000000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 2;
         }
         if ((active0 & 0x1f80000000000000L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 97;
         }
         if ((active0 & 0x380000000L) != 0L || (active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 110;
            return 28;
         }
         return -1;
      case 1:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 200;
         }
         if ((active1 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 252;
         }
         if ((active1 & 0x18010000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0xc000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 160;
         }
         if ((active0 & 0x380000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 261;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active1 & 0x20004000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 230;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x10060000000L) != 0L)
            return 70;
         if ((active0 & 0xffddc6fd93fe0000L) != 0L || (active1 & 0x3b8bbffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 70;
         }
         if ((active1 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 242;
         }
         return -1;
      case 2:
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 286;
         }
         if ((active1 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 2;
            }
            return 251;
         }
         if ((active0 & 0x1304000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 70;
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 199;
         }
         if ((active0 & 0xfffcc6bddffe0000L) != 0L || (active1 & 0x3b8bbfbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 70;
         }
         if ((active1 & 0x38414000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 26;
         }
         return -1;
      case 3:
         if ((active1 & 0x3c404000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 198;
         if ((active0 & 0x2000408181600000L) != 0L || (active1 & 0x4aL) != 0L)
            return 70;
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
            return 285;
         }
         if ((active0 & 0xdffca63e5e9e0000L) != 0L || (active1 & 0x3b8bbb1L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
            return 70;
         }
         if ((active1 & 0x10000L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x1b7ca602580e0000L) != 0L || (active1 & 0x3983991L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 4;
            }
            return 70;
         }
         if ((active1 & 0x24404000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0xc480003c06900000L) != 0L || (active1 & 0x208220L) != 0L)
            return 70;
         if ((active0 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 4;
            }
            return 284;
         }
         if ((active1 & 0x18000000L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x121c2212180a0000L) != 0L || (active1 & 0x3983891L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 70;
         }
         if ((active0 & 0x8960840040040000L) != 0L || (active1 & 0x100L) != 0L)
            return 70;
         if ((active1 & 0x34404000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 283;
         }
         return -1;
      case 6:
         if ((active1 & 0x24404000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
            return 313;
         }
         if ((active0 & 0xc001210080000L) != 0L || (active1 & 0x2002000L) != 0L)
            return 70;
         if ((active0 & 0x1210220008020000L) != 0L || (active1 & 0x1981891L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
            return 70;
         }
         if ((active1 & 0x10000000L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x1010220000000000L) != 0L || (active1 & 0x1181081L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 7;
            return 70;
         }
         if ((active1 & 0x24004000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 7;
            return 70;
         }
         if ((active0 & 0x200000008020000L) != 0L || (active1 & 0x800810L) != 0L)
            return 70;
         if ((active1 & 0x400000L) != 0L)
            return 32;
         return -1;
      case 8:
         if ((active0 & 0x10000a0000000000L) != 0L || (active1 & 0x1181080L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 8;
            return 70;
         }
         if ((active0 & 0x10200000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 70;
         if ((active1 & 0x4004000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
            return 32;
         }
         if ((active1 & 0x20000000L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0xa0000000000L) != 0L || (active1 & 0x1001080L) != 0L)
            return 70;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x180000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
            return 70;
         }
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
            return 32;
         }
         if ((active1 & 0x4000000L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active1 & 0x100000L) != 0L)
            return 70;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 10;
            return 70;
         }
         if ((active1 & 0x4000L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 70;
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 11;
            return 70;
         }
         return -1;
      case 12:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 12;
            return 70;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 10);
      case 12:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 3);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x10L);
      case 37:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x400040L);
      case 40:
         return jjStopAtPos(0, 113);
      case 41:
         return jjStopAtPos(0, 114);
      case 42:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100000L);
      case 43:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x40080L);
      case 44:
         return jjStopAtPos(0, 120);
      case 45:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x80100L);
      case 46:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x20000000L);
      case 47:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x200000L);
      case 58:
         return jjStopAtPos(0, 128);
      case 59:
         return jjStopAtPos(0, 119);
      case 60:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40000000L, 0x2c4020004L);
      case 61:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100000002L);
      case 62:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0xc18000008L);
      case 63:
         return jjStopAtPos(0, 127);
      case 91:
         return jjStopAtPos(0, 117);
      case 92:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x3c414000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 118);
      case 94:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x60000L, 0x3c0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x380000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0xfc00000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x70000000L, 0x1800L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x380000000L, 0x2000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x7c00000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_2(0x8000000000L, 0x8000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x3f0000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x400000000000L, 0x80000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x300000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x3800000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x3c000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x40000000000000L, 0x1800000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x1f80000000000000L, 0x2000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0xe000000000000000L, 0x7L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x18L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20L, 0x0L);
      case 123:
         return jjStopAtPos(0, 115);
      case 124:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x800020L);
      case 125:
         return jjStopAtPos(0, 116);
      case 126:
         return jjStopAtPos(0, 126);
      default :
         return jjMoveNfa_2(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 43:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 45:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 58:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 60:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 61:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x3c0000000L);
      case 62:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x418000000L);
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x4800400c00000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x41000010000000L, active1, 0x21905000L, active2, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 40, 70);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0xe080000001000000L, active1, 0x8020L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x1800000000L, active1, 0x2010800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x2082000000L, active1, 0x40L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x60000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x380100000000L, active1, 0x402000L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x40c04c080000L, active1, 0x280018L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x18000000100000L, active1, 0x7L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000L, active1, 0x4000180L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0x300000000000000L, active1, 0x18000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x422000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000000L, active1, 0x200L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000200000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 46:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 157);
         break;
      case 61:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 155);
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 62:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000003000000L, active1, 0x100001L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000000000000L, active1, 0x1000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x200000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x2808000000000000L, active1, 0x228L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000400000000L, active1, 0x20000010L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x100040180c000000L, active1, 0x10000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x90002000080000L, active1, 0x488000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x400060000000000L, active1, 0x1000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x800000L, active2, 0L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 38, 70);
         return jjMoveStringLiteralDfa3_2(active0, 0xc200000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x80080460000L, active1, 0x21c0L, active2, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0x40a08200a00000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x140000000L, active1, 0x4000002L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x4800L, active2, 0L);
      case 119:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 48, 70);
         break;
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(2, 66, 70);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x18000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 156);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 62:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 158);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x3810100000L, active1, 0x10L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000800000L, active1, 0x4000000L, active2, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(3, 67, 70);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(3, 21, 70);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(3, 22, 70);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(3, 31, 70);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(3, 65, 70);
         return jjMoveStringLiteralDfa4_2(active0, 0x400200200040000L, active1, 0x20204800L, active2, 0L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 46, 70);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x200800000000000L, active1, 0x80L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_2(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 49, 198);
         return jjMoveStringLiteralDfa4_2(active0, 0x20020000080000L, active1, 0x20L, active2, 0L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(3, 32, 70);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x2000001L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 39, 70);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(3, 70, 70);
         return jjMoveStringLiteralDfa4_2(active0, 0xc000040000000000L, active1, 0x200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x18080000L, active2, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(3, 24, 70);
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000000L, active1, 0x1001000L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 61, 70);
         return jjMoveStringLiteralDfa4_2(active0, 0x406000000L, active1, 0x108000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x910080008020000L, active1, 0x400000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000000000L, active1, 0x802100L, active2, 0L);
      case 118:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(3, 80, 32);
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 159);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x80000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0xc080000000000L, active1, 0x2000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0xa00000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(4, 34, 70);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(4, 69, 70);
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x10020000080000L, active1, 0x11001000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x80L, active2, 0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(4, 23, 70);
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000000000L, active1, 0x4400000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x120000008000000L, active1, 0x800000L, active2, 0L);
      case 107:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(4, 20, 70);
         break;
      case 108:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(4, 85, 70);
         return jjMoveStringLiteralDfa5_2(active0, 0x1040000000L, active1, 0L, active2, 0L);
      case 109:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(4, 73, 70);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x20000100L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 58, 70);
         return jjMoveStringLiteralDfa5_2(active0, 0x40240000060000L, active1, 0x6800L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(4, 25, 70);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(4, 26, 70);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 37, 70);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 55, 70);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(4, 79, 70);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x10L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0x10000000L, active1, 0x100000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0xa0000L, active1, 0x1000L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 53, 70);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 56, 70);
         return jjMoveStringLiteralDfa6_2(active0, 0x10000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_2(active0, 0x200000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(5, 30, 70);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 47, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(5, 72, 70);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa6_2(active0, 0x200000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_2(active0, 0x4000000000000L, active1, 0x800L);
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 59, 70);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x480011L);
      case 108:
         return jjMoveStringLiteralDfa6_2(active0, 0x1010000000L, active1, 0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa6_2(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 54, 70);
         return jjMoveStringLiteralDfa6_2(active0, 0x80008000000L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000000000L, active1, 0x900000L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 63, 70);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x1000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(5, 18, 70);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 42, 70);
         return jjMoveStringLiteralDfa6_2(active0, 0x208000000000000L, active1, 0x20000000L);
      case 121:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_2(active0, 0x200000000000L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x80000020000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 50, 70);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 51, 70);
         return jjMoveStringLiteralDfa7_2(active0, 0x20000000000L, active1, 0x1900801L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(6, 92, 32);
         return jjMoveStringLiteralDfa7_2(active0, 0x200000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x10L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(6, 19, 70);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x480000L);
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(6, 33, 70);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(6, 77, 70);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(6, 89, 70);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x1000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(6, 28, 70);
         return jjMoveStringLiteralDfa7_2(active0, 0x10000000000000L, active1, 0x4004000L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x8000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 36, 70);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa8_2(active0, 0x200000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x100000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(7, 27, 70);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(7, 68, 70);
         return jjMoveStringLiteralDfa8_2(active0, 0x10080000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(7, 86, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x4004000L);
      case 105:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa8_2(active0, 0x1000020000000000L, active1, 0x1000001L);
      case 112:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 57, 70);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x20000000L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(7, 75, 70);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(7, 87, 70);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(7, 17, 70);
         break;
      case 118:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x4080000L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 52, 70);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 45, 70);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(8, 93, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x1000000000000000L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa9_2(active0, 0x80000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(8, 64, 70);
         return jjMoveStringLiteralDfa9_2(active0, 0x20000000000L, active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x100000L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(9, 71, 70);
         break;
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 43, 70);
         break;
      case 103:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(9, 76, 70);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x80000L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 41, 70);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(9, 88, 70);
         break;
      case 116:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(9, 90, 32);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_2(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_2(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(10, 78, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x80000L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(10, 84, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_2(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x80000L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(11, 60, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_2(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_2(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(13, 83, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_2(12, 0L, active1, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 313;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 262:
               case 70:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 3:
                  if (kind > 165)
                     kind = 165;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 74);
                  else if (curChar == 36)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(75, 78);
                  else if (curChar == 39)
                     jjAddStates(79, 81);
                  else if (curChar == 46)
                     jjCheckNAdd(34);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(82, 84);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(85, 91);
                  }
                  break;
               case 1:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 286:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 161:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 284:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 283:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 195:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 27:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 252:
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 242:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 225:
                  if (curChar != 36)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 230:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 160:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 2:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 313:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 199:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 198:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 285:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 28:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 97:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 26:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 251:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 261:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 200:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(92, 94);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if (curChar == 39)
                     jjAddStates(79, 81);
                  break;
               case 40:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if (curChar == 39 && kind > 108)
                     kind = 108;
                  break;
               case 43:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 41);
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 46:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 54:
                  if (curChar == 34)
                     jjCheckNAddStates(75, 78);
                  break;
               case 55:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 57:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 64:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 65:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(95, 99);
                  break;
               case 66:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 67:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 69:
                  if (curChar != 36)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (kind > 165)
                     kind = 165;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 74);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 38);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 79:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(80, 38);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar != 46)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(103, 105);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(103, 105);
                  break;
               case 85:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(86, 38);
                  break;
               case 289:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(82, 84);
                  break;
               case 290:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(290, 291);
                  break;
               case 292:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(292);
                  break;
               case 293:
                  if (curChar != 48)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(85, 91);
                  break;
               case 295:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(295, 291);
                  break;
               case 296:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(296, 291);
                  break;
               case 298:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 299:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(299);
                  break;
               case 301:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 302:
                  if (curChar == 46)
                     jjCheckNAdd(303);
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(303, 304);
                  break;
               case 305:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(306);
                  break;
               case 306:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(306, 38);
                  break;
               case 308:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 309:
                  if (curChar == 46)
                     jjCheckNAdd(310);
                  break;
               case 311:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(312);
                  break;
               case 312:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(312, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 262:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 287;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 281;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 3:
                  if (kind > 165)
                     kind = 165;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  else if (curChar == 92)
                     jjAddStates(111, 117);
                  if (curChar == 105)
                     jjAddStates(118, 120);
                  else if (curChar == 110)
                     jjAddStates(121, 123);
                  else if (curChar == 99)
                     jjAddStates(124, 126);
                  else if (curChar == 115)
                     jjAddStates(127, 131);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 114)
                     jjCheckNAdd(0);
                  break;
               case 286:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 161:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 186;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 172;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 284:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 99)
                     jjCheckNAdd(0);
                  break;
               case 195:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 217;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 194;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 27:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 252:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 242:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 225:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 252;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 249;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 242;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 236;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 230;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 224;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 230:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 160:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 185;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 2:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 313:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  break;
               case 199:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 215;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 198:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 214;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 285:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 28:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 97:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 147;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 133;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 26:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 251:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 109)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  break;
               case 261:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 286;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 280;
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 200:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 216;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 0:
                  if (curChar == 101 && kind > 82)
                     kind = 82;
                  break;
               case 4:
                  if (curChar == 114 && kind > 82)
                     kind = 82;
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 100 && kind > 82)
                     kind = 82;
                  break;
               case 11:
               case 98:
                  if (curChar == 101)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 116 && kind > 82)
                     kind = 82;
                  break;
               case 24:
                  if (curChar == 99)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(132, 133);
                  break;
               case 38:
                  if ((0x5000000050L & l) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 40:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar == 92)
                     jjAddStates(134, 136);
                  break;
               case 43:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 48:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 53:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 55:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 56:
                  if (curChar == 92)
                     jjAddStates(137, 139);
                  break;
               case 57:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 58:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 63:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (kind > 165)
                     kind = 165;
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 78:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 84:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 87:
                  if (curChar == 115)
                     jjAddStates(127, 131);
                  break;
               case 88:
                  if (curChar == 99 && kind > 82)
                     kind = 82;
                  break;
               case 89:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 99:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 104 && kind > 82)
                     kind = 82;
                  break;
               case 111:
               case 123:
               case 135:
               case 150:
               case 162:
               case 174:
                  if (curChar == 116)
                     jjCheckNAdd(110);
                  break;
               case 112:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 124:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 99)
                     jjAddStates(124, 126);
                  break;
               case 151:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 163:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 175:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 110)
                     jjAddStates(121, 123);
                  break;
               case 189:
                  if (curChar == 108 && kind > 82)
                     kind = 82;
                  break;
               case 190:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 196:
                  if (curChar == 108)
                     jjCheckNAdd(0);
                  break;
               case 197:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 201:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 108)
                     jjCheckNAdd(23);
                  break;
               case 203:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 92)
                     jjAddStates(111, 117);
                  break;
               case 220:
                  if (curChar == 108 && kind > 74)
                     kind = 74;
                  break;
               case 221:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 226:
                  if (curChar == 115 && kind > 74)
                     kind = 74;
                  break;
               case 227:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 231:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 120 && kind > 74)
                     kind = 74;
                  break;
               case 233:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if (curChar == 110 && kind > 74)
                     kind = 74;
                  break;
               case 236:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if (curChar == 102 && kind > 74)
                     kind = 74;
                  break;
               case 239:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 243:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 116 && kind > 74)
                     kind = 74;
                  break;
               case 245:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 253:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if (curChar == 105)
                     jjAddStates(118, 120);
                  break;
               case 255:
                  if (curChar == 116 && kind > 81)
                     kind = 81;
                  break;
               case 256:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 263:
                  if (curChar == 121 && kind > 81)
                     kind = 81;
                  break;
               case 264:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 278:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 287:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 291:
                  if ((0x100000001000L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 294:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(295);
                  break;
               case 295:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(295, 291);
                  break;
               case 297:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(298);
                  break;
               case 298:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(298);
                  break;
               case 300:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(301, 302);
                  break;
               case 301:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(301, 302);
                  break;
               case 303:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(140, 141);
                  break;
               case 304:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(142, 143);
                  break;
               case 307:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(308);
                  break;
               case 308:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 310:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(144, 145);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 262:
               case 70:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(70);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 165)
                        kind = 165;
                  }
                  break;
               case 1:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 286:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 161:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 284:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 283:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 195:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 27:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 160:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 313:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 199:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 198:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 285:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 28:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 97:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 26:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 261:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 200:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(75, 78);
                  break;
               case 69:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 165)
                     kind = 165;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 313 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 41, 5, 44, 45, 48, 49, 55, 62, 22, 23, 30, 31, 7, 9, 20, 
   64, 65, 66, 68, 70, 65, 71, 73, 74, 81, 56, 57, 59, 1, 2, 5, 
   22, 23, 33, 30, 31, 40, 41, 5, 50, 51, 5, 75, 76, 82, 83, 84, 
   3, 4, 10, 11, 13, 24, 32, 34, 42, 43, 46, 47, 52, 53, 77, 78, 
   79, 80, 85, 86, 73, 74, 38, 77, 78, 81, 82, 55, 56, 63, 64, 40, 
   42, 53, 290, 291, 292, 294, 296, 291, 297, 299, 300, 307, 34, 35, 38, 55, 
   56, 66, 63, 64, 73, 74, 38, 83, 84, 38, 301, 302, 308, 309, 310, 225, 
   231, 234, 237, 243, 250, 253, 262, 282, 288, 195, 201, 218, 161, 173, 187, 97, 
   109, 122, 134, 148, 36, 37, 43, 44, 46, 57, 65, 67, 303, 304, 305, 306, 
   311, 312, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 216:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec42[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 216:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 220:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 221:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec68[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\57\52\100", "\57\57\100", null, "\52\57", 
"\12", null, null, null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\141\163\163\145\162\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\157", "\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\164\162\151\143\164\146\160", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\141\154\163\157", 
"\141\163\163\151\147\156\141\142\154\145", "\141\163\163\165\155\145", "\141\170\151\157\155", null, 
"\144\151\166\145\162\147\145\163", "\144\145\143\162\145\141\163\151\156\147", "\145\156\163\165\162\145\163", 
"\134\145\166\145\162\171\164\150\151\156\147", "\147\150\157\163\164", "\134\151\156\166", null, null, 
"\154\157\157\160\137\151\156\166\141\162\151\141\156\164", "\155\145\141\163\165\162\145\144\137\142\171", "\155\157\144\145\154", 
"\134\156\157\164\150\151\156\147", "\162\145\161\165\151\162\145\163", 
"\162\145\160\162\145\163\145\156\164\163", "\163\151\147\156\141\154\163", "\134\163\165\143\150\137\164\150\141\164", 
"\134\164\171\160\145", "\134\164\171\160\145\157\146", "\134\145\154\145\155\164\171\160\145", 
"\74\72", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", "\56", "\100", "\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\56\56\56", "\74\75\75\76", "\74\75\41\75\76", "\75\75\76", "\74\75\75", 
"\76\76\76", "\76\76", "\76", null, "\32", "\56\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "SPEC",
   "SSPEC",
   "IN_JAVA_DOC_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, -1, 0, 0, -1, 3, 4, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe06c1L, 0xfffe708cffffffffL, 0xffffffffffL, 
};
static final long[] jjtoSkip = {
   0xc93eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xc800L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x13000L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[313];
private final int[] jjstateSet = new int[626];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ASTParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ASTParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 313; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = ASTParser.GTToken.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 12 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
    input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 162 :
        image.append(jjstrLiteralImages[162]);
        lengthOfMatch = jjstrLiteralImages[162].length();
    matchedToken.kind = GT;
    ((ASTParser.GTToken) matchedToken).realKind = RUNSIGNEDSHIFT;
    input_stream.backup(2);
         break;
      case 163 :
        image.append(jjstrLiteralImages[163]);
        lengthOfMatch = jjstrLiteralImages[163].length();
    matchedToken.kind = GT;
    ((ASTParser.GTToken) matchedToken).realKind = RSIGNEDSHIFT;
    input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}


//
// This file contains partial parser defition for terms only
//


ASTTerm Term():
{ 
  ASTTerm term;
  List<ASTTerm> list = new ArrayList<ASTTerm>(); 
}
{

        ( term=OpIdentifier() { list.add(term); } )*
        term=AsTerm() { list.add(term); }
        (
          ( term=OpIdentifier() { list.add(term); } )+
          term=AsTerm() { list.add(term); }
        )*
   { 
     if(list.size() > 1)
        return new ASTListTerm(list);
     else
        return list.get(0);
   }
}

ASTTerm UpdateTerm():
{
  ASTTerm term;
  List<ASTAssignmentStatement> assignments;
}
{
         "{" assignments=UpdateTerm_List() "}" term=UpdateTerm() 
            { return new ASTUpdateTerm(assignments, term); }
       | term=AsTerm()
            { return term; }
}

List<ASTAssignmentStatement> UpdateTerm_List():	 
{
  Token t;
  ASTTerm term;
  ASTAssignmentStatement assignment;
  List<ASTAssignmentStatement> assignments = new ArrayList<ASTAssignmentStatement>();
}
{
          assignment=Assignment() 
          	{ assignments.add(assignment); }
          ( "||"  assignment=Assignment() 
                { assignments.add(assignment); } )*
          	
          { return assignments; }
}         

ASTTerm AsTerm():
{ 
  ASTTerm term;
  ASTType type; 
}
{
        term=BaseTerm()
        (
          "as"
          type=TypeRef()
            { term = new ASTAsType(term, type); }
        )?  
         { return term; }
}

ASTTerm BaseTerm():
{ 
  ASTTerm term;
}
{
        ( LOOKAHEAD(2) "(" term=BinderTerm() ")"
        | "(" term=Term() ")"
        | term=ApplicationTerm()
        | term=SchemaVariable()
        | term=NumberLiteral()
        | term=ProgramTerm()
        )
        { return term; }
}

ASTTerm ProgramTerm():
{
  ASTProgramTerm pt;
}
{
    (  "[" pt=ProgramTerm_Content(false) "]" 
    |  "[[" pt=ProgramTerm_Content(true) "]"
    )
    { return pt; }
}

ASTProgramTerm ProgramTerm_Content(boolean termination):
{
  Token t, label;
  ASTStatement matchStatement = null, st;
  ASTProgramUpdate up;
  List<ASTProgramUpdate> list = new LinkedList<ASTProgramUpdate>();
}
{
       ( label=<NATURAL> 
       | label=<SCHEMALABEL_IDENTIFIER>
       )
       
       // never have both!
       ( 
         ":" matchStatement=Statement()
           { return new ASTProgramTerm(label, termination, matchStatement); } 
       |      
         ( "||" t=<NATURAL> ":=" st=Statement() 
           { list.add(new ASTProgramUpdate(t, st)); } )+
       )?
       
       { return new ASTProgramTerm(label, termination, list); }
}

ASTBinderTerm BinderTerm():
{
  Token binderToken;
  Token varToken;
  ASTType type = null; 
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>(); 
}
{
        binderToken = <BINDER_IDENTIFIER>
        
        ( varToken=<IDENTIFIER> | varToken=<SCHEMA_IDENTIFIER> )
        ( "as" type = TypeRef() )?
        ( ";" t=Term() { subterms.add(t); } )+
   { return new ASTBinderTerm(binderToken, type, varToken, subterms); }
}

ASTType TypeRef():
{
  Token token;
  List<ASTType> args = new ArrayList<ASTType>();
  ASTType ty;
}
{
		token = <IDENTIFIER>
		( LOOKAHEAD(2) // a binder declaration may follow, but has a binder-identifier next
		  "(" ty=TypeRef() { args.add(ty); }
		  		( "," ty=TypeRef() { args.add(ty); } )*
		  ")"
		)?
		{ return new ASTTypeApplication(token, args); }
	|
		token = <TYVAR_IDENTIFIER>
		{ return new ASTTypeVar(token); }
}

        
ASTTerm ApplicationTerm():
{
  Token symbol;
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>();
}
{
        (symbol=<IDENTIFIER> | symbol=<META_IDENTIFIER> | symbol=<INTERNAL_IDENTIFIER>)
        
        ( /* parentheses are not empty, constants dont have them */ 
          "("
          t=Term() { subterms.add(t); }
          ( "," t=Term() { subterms.add(t); } )*
          ")"
        )?
        
    { if(subterms.size() > 0) 
        return new ASTApplicationTerm(symbol, subterms); 
      else
        return new ASTIdentifierTerm(symbol);
    }
}

ASTTerm OpIdentifier():
{ 
  Token t;
}
{
        t=<OP_IDENTIFIER> 
  { return new ASTOperatorIdentifierTerm(t); }
}

ASTNumberLiteralTerm NumberLiteral():
{
  Token t;
}
{
        t=<NATURAL>
  { return new ASTNumberLiteralTerm(t); }
}

ASTSchemaVariableTerm SchemaVariable():
{
	Token t;
}
{
        t=<SCHEMA_IDENTIFIER>
  { return new ASTSchemaVariableTerm(t); }
}
options {
  MULTI=true;
  STATIC=false;
  VISITOR=true;
  VISITOR_RETURN_TYPE="String";
  NODE_DEFAULT_VOID=true;
  TRACK_TOKENS=true;
}

PARSER_BEGIN(AlgoParser)

package de.uka.iti.pseudo.algo;

import java.io.*;
import de.uka.iti.pseudo.util.Pair;

/** An Arithmetic Grammar. */
@SuppressWarnings("all")
public class AlgoParser {

  private static String stripQuotes(String s) {
    return s.substring(1, s.length()-1);
  }
  
  // strip leading "inline" and trailing "end"
  private static String stripInline(String s) {
    return s.substring(7, s.length()-3);
  }

  /** Main debug entry point. */
  public static void main(String args[]) throws IOException {
    String filename;
    AlgoParser t;
    if(args.length == 0) {
       filename = "<stdin>";
       t = new AlgoParser(System.in);
    } else {
       filename = args[0];
       t = new AlgoParser(new FileInputStream(filename));
    } 

    System.out.println("Reading from " + filename);

    try {
      ASTStart n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch(ParseException e) {
      System.out.println("Parser failed.");
      System.out.println(filename + getErrorLocation(e));
      e.printStackTrace();
    } catch (Exception e) {
      System.out.println("Oops.");
      e.printStackTrace();
    }
  }

  public static String getErrorLocation(ParseException parseEx) {
      return ":" + 
             parseEx.currentToken.beginLine + ":" + 
             parseEx.currentToken.beginColumn;
  }

}

PARSER_END(AlgoParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  // TODO escaping " in strings
  <STRING_LITERAL:  "\"" ( ~["\""] )* "\"" >
}

TOKEN : /* KEYWORDS */
{
  < AS : "as" >
| < IF : "if" >
| < IN : "in" >
| < DO : "do" >
| < END : "end" >
| < NOT : "not" >
| < VAR : "var" >
| < INV : "inv" >
| < ALGO : "algo" >
| < ELSE : "else" >
| < MARK : "mark" >
| < NOTE : "note" >
| < SUCH : "such" >
| < THAT : "that" >
| < THEN : "then" >
| < USES : "uses" >
| < WITH : "with" >
| < HINT : "hint" >
| < WHILE : "while" >
| < INPUT : "input" >
| < CHOOSE : "choose" >
| < OPTION : "option" >
| < OUTPUT : "output" >
| < ASSERT : "assert" >
| < ASSUME : "assume" >
| < REFINE : "refine" >
| < RETURN : "return" >
| < ITERATE : "iterate" >
| < ENSURES : "ensures" >
| < WITNESS : "witness" >
| < REQUIRES : "requires" >
| < ABBREVIATION: "abbreviation" >
}

MORE : /* INLINE MODE */
{
  "inline" : InlineMode
}

<InlineMode> TOKEN :
{
  < INLINE_BLOCK : "end" > : DEFAULT
}

<InlineMode> MORE :
{
  < ( [ "a"-"z","A"-"Z","_" ] )+ >
| < ~[ "a"-"z","A"-"Z","_" ] > 
}

TOKEN : /* IDENTIFIERS */
{
  < BINDER_IDENTIFIER: "\\" <IDENTIFIER> >
|
  < TYVAR_IDENTIFIER: "'" <IDENTIFIER> >
|
  < ABBREV_IDENTIFIER: "@" <IDENTIFIER> >
|
  < IDENTIFIER: ["a"-"z","A"-"Z","_","$"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
}

/** Main production. */
ASTStart Start() #Start : {}
{
  ( Uses() | Option() )*
  ( Abbreviation() )*
  ( Algo() )+
  ( Refinement() { jjtThis.jjtSetValue(jjtree.peekNode()); } )?
  <EOF>
  { return jjtThis; }
}

void Uses() : 
{
  Token t;
} 
{
  "uses" 
  (  t=<STRING_LITERAL>
     {
        jjtThis.jjtSetValue(stripQuotes(t.image));
     } #UsesInputDeclaration
  |
     t=<INLINE_BLOCK>
     {
        jjtThis.jjtSetValue(stripInline(t.image));
     } #UsesInlineDeclaration
  )
}

void Option() #Option :
{
  Token t1, t2;
}
{
  "option"
  t1 = <IDENTIFIER> "=" t2 = <STRING_LITERAL>
  { jjtThis.jjtSetValue(Pair.make(t1,t2)); }
}

void Abbreviation() #Abbreviation :
{
  Token t;
}
{
  "abbreviation" 
  AbbrevIdentifier()
  ":="
  Expression()
}

void Algo() #Algo : 
{
  Token t;
}
{
  "algo" Identifier()

  (  "input" Declarations()   #InputDecl 
   | "output" Declarations()  #OutputDecl
   | "var" Declarations()     #VarDecl
   | "requires" Expression()  #RequiresDecl
   | "ensures" Expression()   #EnsuresDecl
  )*

  "do"
    StatementBlock()
  "end"
}

void StatementBlock() #StatementBlock : {}
{
  // ;; is a relict of ancient days
  Statement() ( ( ";;" | ";" ) Statement() )*
}

/** Declarations */
void Declarations() : {}
{
  ( Identifier() ( "," Identifier() )* ":" Type() )+
}

void Type() #Type : {}
{
  Identifier() 
  (
    "("
    Type()
    ( "," Type() )*
    ")"
  )?
}

/** Statements */
void Statement() : {}
{
    ChooseStatement()
  | LOOKAHEAD(2) AssignmentStatement()
  | MapAssignmentStatement()
  | ReturnStatement()
  | WhileStatement()
  | IterateStatement()
  | IfStatement()
  // | CallStatement()
  | AssertStatement()
  | AssumeStatement()
  | NoteStatement()
  | MarkStatement()
  | InlineStatement()
}

void AssignmentStatement() #AssignmentStatement : {}
{
  Identifier() ":=" Expression()
}

void MapAssignmentStatement() #MapAssignmentStatement : {}
{
  Identifier() "[" Expression() "]" ":=" Expression()
}

void ReturnStatement() #ReturnStatement : {}
{
  "return"
}

void ChooseStatement() #ChooseStatement : 
{
  Token t = null;
}
{
  "choose"
    Identifier() ("," Identifier() )*
  "such" "that"
    Expression()
   ( "hint" t=<STRING_LITERAL> 
       { jjtThis.jjtSetValue(stripQuotes(t.image)); }
    )?
}

void WhileStatement() #WhileStatement : {}
{
  "while"
    Expression()
    "inv" Expression()
    "var" Expression()
  "do"
    StatementBlock()
  "end"
}

void IterateStatement() #IterateStatement : 
{
  Token t = null;
}
{
  "iterate" Expression() 
  "with" Identifier()
  "in" Identifier()
  "inv" Expression()
  ( "hint" t=<STRING_LITERAL> 
       { jjtThis.jjtSetValue(stripQuotes(t.image)); }
  )?
  "do"
    StatementBlock()
  "end"
}

void IfStatement() #IfStatement : {}
{
  "if" Expression()
  "then" StatementBlock()
  ( "else" StatementBlock() )?
  "end"
}

void AssertStatement() #AssertStatement : {}
{
  "assert" Expression()
}

void AssumeStatement() #AssumeStatement : {}
{
  "assume" Expression()
}

void NoteStatement() #NoteStatement : 
{ Token t = null; }
{
  "note" Expression() 
    ( "hint" t=<STRING_LITERAL> 
       { jjtThis.jjtSetValue(stripQuotes(t.image)); }
    )?
}

void MarkStatement() #MarkStatement :
{ Token t = null; }
{
  "mark" t=<INTEGER_LITERAL>
    { jjtThis.jjtSetValue(t.image); }
}

void InlineStatement() #InlineStatement : 
{
  Token t;
}
{
  t=<INLINE_BLOCK>
     { jjtThis.jjtSetValue(stripInline(t.image)); }
} 

void IntegerLiteral() #Identifier :
{
  Token t;
}
{
  t=<INTEGER_LITERAL>
  {
    jjtThis.jjtSetValue(Integer.decode(t.image));
  }
}

void Identifier() #Identifier :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void BinderIdentifier() #BinderIdentifier :
{
  Token t;
}
{
  t=<BINDER_IDENTIFIER>
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void AbbrevIdentifier() #AbbrevIdentifier :
{
  Token t;
}
{
  t=<ABBREV_IDENTIFIER>
  {
    jjtThis.jjtSetValue(t.image);
  }
}

/** Expressions. */
void Expression() : {}
{ 
  PatternExpression()
}

void PatternExpression() :
{ 
  Token t=null;
}
{ 
// No double patterns!
   EquivalenceExpression() ( t="~~>"  EquivalenceExpression() 
      { jjtThis.jjtSetValue(t); } #BinaryExpression(2) )?
}

void EquivalenceExpression() :
{ 
  Token t=null;
}
{ 
   OrExpression() ( t="<->"  EquivalenceExpression() 
      { jjtThis.jjtSetValue(t); } #BinaryExpression(2) )?
}

void OrExpression() :
{
  Token t=null;
}
{ 
   AndExpression() ( ( t="->" | t="|" ) OrExpression() 
      { jjtThis.jjtSetValue(t); } #BinaryExpression(2) )?
}

void AndExpression() :
{
  Token t=null;
}
{ 
   RelationExpression() ( ( t="&" ) AndExpression() 
      { jjtThis.jjtSetValue(t); } #BinaryExpression(2) )?
}

void RelationExpression() :
{
  Token t=null;
}
{ 
   // "in" must be relayed as "::"
   AddExpression() 
   ( 
    ( (t="=" | t="<:" | t="::" | t="in" { t.image="::"; } | t="<" | t="<=" | t=">" | t=">=") 
       RelationExpression() 
         { jjtThis.jjtSetValue(t); } #BinaryExpression(2)
    |
      (t="!=" | t="!::")
       RelationExpression()
         { t.image = t.image.substring(1);
           jjtThis.jjtSetValue(t); } #BinaryExpression(2) 
         { jjtThis.jjtSetValue(new Token(0, "!")); } #UnaryExpression(1)
    ) 
   )?
}

void AddExpression() :
{
  Token t=null;
}
{ 
   // Left assoc!
   MultExpression() ( (t="+" | t="-" | t="\\/" ) MultExpression()  
      { jjtThis.jjtSetValue(t); } #BinaryExpression(2) )*
}

void MultExpression() :
{
  Token t=null;
}
{ 
   UnaryExpression() ( (t="*" | t="/" | t="/\\" | t="\\" ) MultExpression()  
      { jjtThis.jjtSetValue(t); } #BinaryExpression(2) )?
}

void UnaryExpression() :
{
   Token t = null;
}
{
     // "not" is a synonym for "!"
     ( ( t="-" | t="!" | t="not" { t.image="!"; } | t="^" ) UnaryExpression() { jjtThis.jjtSetValue(t); } ) #UnaryExpression(1)
   |
     PostFixExpression()
}

void PostFixExpression() :
{}
{
   PrimaryExpression() 
   ( 
      "[" ExpressionCommaList() "]" #MapAccessExpression(2) 
   |
      "as" Type() #AsExpression(2)
   |
      "." Identifier() #FieldAccessExpression(2)
   )*
}

void PrimaryExpression() :
{}
{
     ( Identifier() ( "(" ExpressionCommaList() ")" )? ) #ApplicationExpression
   | LOOKAHEAD(2) 
     ( "(" BinderIdentifier() Expression() 
         ( ";" Expression() )* ")" ) #BinderExpression
   |
     SetExtensionExpression()
   | 
     "(" Expression() ")"
   |
     IntegerLiteral()
   |
     AbbrevIdentifier()
}

void ExpressionCommaList() #ExpressionCommaList :
{}
{
  Expression() ( "," Expression() )*
}

void SetExtensionExpression() : {}
{
// TODO do more than only singletons and empty set
    "{"
    ( LOOKAHEAD(2)
      ( Identifier()
        ":"
        Expression() 
        "}" ) #SetComprehensionExpression
    |
      (
       ( Expression() )? 
       "}" ) #SetExtensionExpression
    )
}

/*
 * Refinements
 */

void Refinement() #Refinement :
{
  Token t;
}
{
    "refine" ( "algo" )? 
    Identifier() "as" Identifier()
    ( CouplingFormula() )+
}

void CouplingFormula() #CouplingFormula :
{
  Token t;
  String no;
}
{
    (
      "mark" t=<INTEGER_LITERAL> { no = t.image; }
      "inv" Expression()
      "var" Expression()
    |
      "requires" { no = "-1"; } Expression()
      "var" Expression()
    | 
      "ensures" { no = "0"; } Expression()
    )
    { jjtThis.jjtSetValue(no); }
}
 
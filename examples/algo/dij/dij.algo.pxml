<?xml version="1.0"?>
<proof format="1"><info>
    <date>Wed Mar 13 01:10:07 CET 2013</date>
    <version>0.0</version>
    <problem> |- [[0;Dij]]true</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="auto_tbox_assume" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[0;Dij]](true as bool) as bool</schemavariable>
      <schemavariable name="%b">finite(fullset as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{  }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="" id="1">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[1;Dij]](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as node;(\forall y as node;$gte(weight(\var x as node,\var y as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{  }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="2">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[2;Dij]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="3">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[3;Dij]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="4">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) }([[4;Dij]](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="5">
      <find>S.0.2</find>
      <schemavariable name="%t">$store(distance as map(node,int),start as node,0 as int) as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="6">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[4;Dij]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="7">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := singleton(start as node) as set(node) }([[5;Dij]](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) || distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="8">
      <find>S.0.2</find>
      <schemavariable name="%t">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) || distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="9">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[5;Dij]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="10">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := emptyset as set(node) }([[6;Dij]](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="11">
      <find>S.0.3</find>
      <schemavariable name="%t">emptyset as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="autot_loop_invariant_update" path="" id="12">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%inv">$and($subset(visited as set(node),dom_distance as set(node)) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%var">$complement(visited as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">[[6;Dij]](true as bool) as bool</schemavariable>
      <typevariable name="var">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0" id="13">
      <find>S.0</find>
      <schemavariable name="%t">$and($subset(visited as set(node),dom_distance as set(node)) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_in_anyset" path="0" id="14">
      <find>S.0.0</find>
      <schemavariable name="%s">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="s">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="15">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,singleton(start as node) as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,singleton(start as node) as set(node)) as bool,$gte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(singleton(start as node) as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,emptyset as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var y as node) as int,$plus($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,emptyset as set(node)) as bool,$and($mem(\var b as node,singleton(start as node) as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var b as node) as int,$plus($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,emptyset as set(node)) as bool,$mem(\var b as node,$diff(singleton(start as node) as set(node),emptyset as set(node)) as set(node)) as bool) as bool,$lte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var a as node) as int,$load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,emptyset as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,singleton(start as node) as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store_same" path="0" id="16">
      <find>S.0.0.0</find>
      <schemavariable name="%v">0 as int</schemavariable>
      <schemavariable name="%d">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="17">
      <find>S.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="18">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(start as node,singleton(start as node) as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,singleton(start as node) as set(node)) as bool,$gte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(singleton(start as node) as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,emptyset as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var y as node) as int,$plus($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,emptyset as set(node)) as bool,$and($mem(\var b as node,singleton(start as node) as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var b as node) as int,$plus($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,emptyset as set(node)) as bool,$mem(\var b as node,$diff(singleton(start as node) as set(node),emptyset as set(node)) as set(node)) as bool) as bool,$lte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var a as node) as int,$load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,emptyset as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,singleton(start as node) as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="diff_same" path="0" id="19">
      <find>S.0.1.1.0.0.0.1</find>
      <schemavariable name="%s">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="1">node</typevariable>
      <typevariable name="s">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="0" id="20">
      <find>S.0.1.1.0.0.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0" id="21">
      <find>S.0.1.1.0.0</find>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,emptyset as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var y as node) as int,$plus($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="0" id="22">
      <find>S.0.1.1.1.0.0.0.0.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0" id="23">
      <find>S.0.1.1.1.0.0.0.0</find>
      <schemavariable name="%a">$and($mem(\var b as node,singleton(start as node) as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0" id="24">
      <find>S.0.1.1.1.0.0.0</find>
      <schemavariable name="%b">$lte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var b as node) as int,$plus($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="0" id="25">
      <find>S.0.1.1.1.1.0.0.0.0.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0" id="26">
      <find>S.0.1.1.1.1.0.0.0.0</find>
      <schemavariable name="%a">$mem(\var b as node,$diff(singleton(start as node) as set(node),emptyset as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0" id="27">
      <find>S.0.1.1.1.1.0.0.0</find>
      <schemavariable name="%b">$lte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var a as node) as int,$load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var b as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="0" id="28">
      <find>S.0.1.1.1.1.1.0.0.0.0</find>
      <schemavariable name="%x">\var p as node</schemavariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0" id="29">
      <find>S.0.1.1.1.1.1.0.0.0</find>
      <schemavariable name="%a">$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0" id="30">
      <find>S.0.1.1.1.1.1.0.0</find>
      <schemavariable name="%b">$mem(\var q as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="31">
      <find>S.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">start as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="32">
      <find>S.0.0</find>
      <schemavariable name="%t">start as node</schemavariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="33">
      <find>S.0</find>
      <schemavariable name="%a">$and((\forall x as node;$impl($mem(\var x as node,singleton(start as node) as set(node)) as bool,$gte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;true as bool) as bool,$and((\forall a as node;(\forall b as node;true as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;true as bool) as bool) as bool,(\forall p as node;(\forall q as node;true as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="34">
      <find>S.0.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="0" id="35">
      <find>S.0.1.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="36">
      <find>S.0.1</find>
      <schemavariable name="%a">$and((\forall a as node;(\forall b as node;true as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;true as bool) as bool) as bool,(\forall p as node;(\forall q as node;true as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="0" id="37">
      <find>S.0.1.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;true as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="0" id="38">
      <find>S.0.1.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="39">
      <find>S.0.1</find>
      <schemavariable name="%a">$and((\forall a as node;(\forall b as node;true as bool) as bool) as bool,(\forall p as node;(\forall q as node;true as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="0" id="40">
      <find>S.0.1.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;true as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="0" id="41">
      <find>S.0.1.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="42">
      <find>S.0.1</find>
      <schemavariable name="%a">(\forall p as node;(\forall q as node;true as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="0" id="43">
      <find>S.0.1</find>
      <schemavariable name="%x">\var p as node</schemavariable>
      <schemavariable name="%b">(\forall q as node;true as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="0" id="44">
      <find>S.0.1</find>
      <schemavariable name="%x">\var q as node</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0" id="45">
      <find>S.0</find>
      <schemavariable name="%a">(\forall x as node;$impl($eq(\var x as node,start as node) as bool,$gte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0" id="46">
      <find>S.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$impl($eq(\var x as node,start as node) as bool,$gte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0" id="47">
      <find>S.0</find>
      <schemavariable name="%a">$eq(x as node,start as node) as bool</schemavariable>
      <schemavariable name="%b">$gte($load($store(distance as map(node,int),start as node,0 as int) as map(node,int),x as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0" id="48">
      <find>A.2</find>
      <schemavariable name="%u">start as node</schemavariable>
      <schemavariable name="%t">x as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store_same_assume" path="0" id="49">
      <find>S.0.0</find>
      <assume>A.2</assume>
      <schemavariable name="%d2">x as node</schemavariable>
      <schemavariable name="%v">0 as int</schemavariable>
      <schemavariable name="%d">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d">node</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="0" id="50">
      <find>S.0</find>
      <schemavariable name="%t">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0" id="51">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="52">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">nbors0 as set(node)</schemavariable>
      <schemavariable name="%a">[[16;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
      <property name="skolemName(nbors0 as set(node))">nbors01</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="53">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors0 := nbors01 as set(node) }([[17;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="54">
      <find>S.0.4</find>
      <schemavariable name="%t">nbors01 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="55">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">visited as set(node)</schemavariable>
      <schemavariable name="%a">[[17;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) || nbors0 := nbors01 as set(node) }</schemaupdate>
      <property name="skolemName(visited as set(node))">visited1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="56">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := visited1 as set(node) }([[18;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) || nbors0 := nbors01 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="57">
      <find>S.0.4</find>
      <schemavariable name="%t">visited1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) || nbors0 := nbors01 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="58">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[[18;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) }</schemaupdate>
      <property name="skolemName(distance as map(node,int))">distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="59">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := distance1 as map(node,int) }([[19;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="60">
      <find>S.0.4</find>
      <schemavariable name="%t">distance1 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="61">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[[19;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) }</schemaupdate>
      <property name="skolemName(d as int)">d1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="62">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d1 as int }([[20;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="63">
      <find>S.0.5</find>
      <schemavariable name="%t">d1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="64">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">nbors as set(node)</schemavariable>
      <schemavariable name="%a">[[20;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int }</schemaupdate>
      <property name="skolemName(nbors as set(node))">nbors1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="65">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := nbors1 as set(node) }([[21;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="66">
      <find>S.0.6</find>
      <schemavariable name="%t">nbors1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="67">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">n as node</schemavariable>
      <schemavariable name="%a">[[21;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) }</schemaupdate>
      <property name="skolemName(n as node)">n1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="68">
      <find>S.0</find>
      <schemavariable name="%t">{ n := n1 as node }([[22;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="69">
      <find>S.0.7</find>
      <schemavariable name="%t">n1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="70">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[[22;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node }</schemaupdate>
      <property name="skolemName(o as node)">o1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="71">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o1 as node }([[23;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="72">
      <find>S.0.8</find>
      <schemavariable name="%t">o1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="73">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">old_distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[[23;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node }</schemaupdate>
      <property name="skolemName(old_distance as map(node,int))">old_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="74">
      <find>S.0</find>
      <schemavariable name="%t">{ old_distance := old_distance1 as map(node,int) }([[24;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="75">
      <find>S.0.9</find>
      <schemavariable name="%t">old_distance1 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="76">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">old_dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[[24;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) }</schemaupdate>
      <property name="skolemName(old_dom_distance as set(node))">old_dom_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="77">
      <find>S.0</find>
      <schemavariable name="%t">{ old_dom_distance := old_dom_distance1 as set(node) }([[25;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="78">
      <find>S.0.10</find>
      <schemavariable name="%t">old_dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="79">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[[25;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) }</schemaupdate>
      <property name="skolemName(dom_distance as set(node))">dom_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="80">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := dom_distance1 as set(node) }([[26;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="81">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1" id="82">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[26;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(varAtPre as set(node),$complement(visited as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="83">
      <find>A.2</find>
      <schemavariable name="%t">$eq(varAtPre as set(node),$complement(visited as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1" id="84">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[27;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($subset(visited as set(node),dom_distance as set(node)) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="85">
      <find>A.3</find>
      <schemavariable name="%t">$and($subset(visited as set(node),dom_distance as set(node)) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="86">
      <find>A.3</find>
      <schemavariable name="%a">$subset(visited1 as set(node),dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance1 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited1 as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="87">
      <find>A.4</find>
      <schemavariable name="%a">$eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(start as node,dom_distance1 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited1 as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="88">
      <find>A.5</find>
      <schemavariable name="%a">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited1 as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="89">
      <find>A.6</find>
      <schemavariable name="%a">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited1 as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="90">
      <find>A.7</find>
      <schemavariable name="%a">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited1 as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="91">
      <find>A.8</find>
      <schemavariable name="%a">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="92">
      <find>A.9</find>
      <schemavariable name="%a">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1" id="93">
      <find>A.7.0.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1" id="94">
      <find>A.7.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1" id="95">
      <find>A.9.0.0.0.1</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1" id="96">
      <find>S.0</find>
      <schemavariable name="%k">58 as int</schemavariable>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[28;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">29 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0" id="97">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[29;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="98">
      <find>A.11</find>
      <schemavariable name="%t">$not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,0" id="99">
      <find>A.11.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%s">$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0" id="100">
      <find>A.11</find>
      <schemavariable name="%b">(\forall x as node;$not($mem(\var x as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0" id="101">
      <find>S.1</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x1</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0" id="102">
      <find>S.1</find>
      <schemavariable name="%b">$mem(x1 as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0" id="103">
      <find>A.11</find>
      <schemavariable name="%x">x1 as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0" id="104">
      <find>A.11</find>
      <schemavariable name="%a">$mem(x1 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(x1 as node,visited1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0" id="105">
      <find>A.12</find>
      <schemavariable name="%b">$mem(x1 as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0" id="106">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[30;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists n as node;$and($not($mem(\var n as node,visited as set(node)) as bool) as bool,$and($mem(\var n as node,dom_distance as set(node)) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte($load(distance as map(node,int),\var n as node) as int,$load(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,0" id="107">
      <find>S.0</find>
      <schemavariable name="%t">(\exists n as node;$and($not($mem(\var n as node,visited as set(node)) as bool) as bool,$and($mem(\var n as node,dom_distance as set(node)) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte($load(distance as map(node,int),\var n as node) as int,$load(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,0" id="108">
      <find>S.0.0.1.1.0.0</find>
      <schemavariable name="%x">\var m as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="1,0,0" id="109">
      <find>S.0</find>
      <schemavariable name="%inst">(\argmin n as node;$and($not($mem(\var n as node,visited1 as set(node)) as bool) as bool,$mem(\var n as node,dom_distance1 as set(node)) as bool) as bool;$load(distance1 as map(node,int),\var n as node) as int) as node</schemavariable>
      <schemavariable name="%x">\var n as node</schemavariable>
      <schemavariable name="%b">$and($not($mem(\var n as node,visited1 as set(node)) as bool) as bool,$and($mem(\var n as node,dom_distance1 as set(node)) as bool,(\forall m as node;$impl($and($mem(\var m as node,dom_distance1 as set(node)) as bool,$not($mem(\var m as node,visited1 as set(node)) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var n as node) as int,$load(distance1 as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="argmin_expand" path="1,0,0" id="110">
      <find>S.0.0.0.0</find>
      <schemavariable name="%x">\var n as node</schemavariable>
      <schemavariable name="%limit">\var limit as int</schemavariable>
      <schemavariable name="%e">$load(distance1 as map(node,int),\var n as node) as int</schemavariable>
      <schemavariable name="%b">$and($not($mem(\var n as node,visited1 as set(node)) as bool) as bool,$mem(\var n as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0,0" id="111">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0,1" id="112">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0,2" id="113">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1" id="114">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">n as node</schemavariable>
      <schemavariable name="%a">[[31;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
      <property name="skolemName(n as node)">n2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="115">
      <find>S.0</find>
      <schemavariable name="%t">{ n := n2 as node }([[32;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="116">
      <find>S.0.10</find>
      <schemavariable name="%t">n2 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1" id="117">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[32;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($not($mem(n as node,visited as set(node)) as bool) as bool,$and($mem(n as node,dom_distance as set(node)) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte($load(distance as map(node,int),n as node) as int,$load(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="118">
      <find>A.12</find>
      <schemavariable name="%t">$and($not($mem(n as node,visited as set(node)) as bool) as bool,$and($mem(n as node,dom_distance as set(node)) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte($load(distance as map(node,int),n as node) as int,$load(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1" id="119">
      <find>A.12</find>
      <schemavariable name="%a">$not($mem(n2 as node,visited1 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(n2 as node,dom_distance1 as set(node)) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool,$lte($load(distance1 as map(node,int),n2 as node) as int,$load(distance1 as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1" id="120">
      <find>A.12</find>
      <schemavariable name="%b">$mem(n2 as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1" id="121">
      <find>A.12</find>
      <schemavariable name="%a">$mem(n2 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool,$lte($load(distance1 as map(node,int),n2 as node) as int,$load(distance1 as map(node,int),\var m as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1" id="122">
      <find>A.13.0.0</find>
      <schemavariable name="%x">\var m as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1" id="123">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[33;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ visited := $union(visited as set(node),singleton(n as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="124">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := $union(visited as set(node),singleton(n as node) as set(node)) as set(node) }([[34;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="125">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(visited as set(node),singleton(n as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1" id="126">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[34;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,0" id="127">
      <find>S.0</find>
      <schemavariable name="%t">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0" id="128">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1" id="129">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[35;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="130">
      <find>A.14</find>
      <schemavariable name="%t">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="131">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[36;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ old_distance := distance as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="132">
      <find>S.0</find>
      <schemavariable name="%t">{ old_distance := distance as map(node,int) }([[37;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="133">
      <find>S.0.10</find>
      <schemavariable name="%t">distance as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="134">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[37;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ old_dom_distance := dom_distance as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="135">
      <find>S.0</find>
      <schemavariable name="%t">{ old_dom_distance := dom_distance as set(node) }([[38;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="136">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="137">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[38;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := (\set k as node;$and($mem(pair(n as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,visited as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="138">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors0 := (\set k as node;$and($mem(pair(n as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,visited as set(node)) as bool) as bool) as bool) as set(node) }([[39;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="139">
      <find>S.0.10</find>
      <schemavariable name="%t">(\set k as node;$and($mem(pair(n as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,visited as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="140">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[39;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors := nbors0 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="141">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := nbors0 as set(node) }([[40;Dij']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="142">
      <find>S.0.10</find>
      <schemavariable name="%t">nbors0 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="autot_loop_invariant_update" path="1,0,1,1" id="143">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%inv">$and($subset(nbors as set(node),nbors0 as set(node)) as bool,$and((\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool,$and($subset(old_dom_distance as set(node),dom_distance as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%var">nbors as set(node)</schemavariable>
      <schemavariable name="%a">[[40;Dij']](true as bool) as bool</schemavariable>
      <typevariable name="var">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,0" id="144">
      <find>S.0</find>
      <schemavariable name="%t">$and($subset(nbors as set(node),nbors0 as set(node)) as bool,$and((\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool,$and($subset(old_dom_distance as set(node),dom_distance as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,0,1,1,0" id="145">
      <find>S.0.1.0.0.1</find>
      <schemavariable name="%t">$load(distance1 as map(node,int),\var r as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_r" path="1,0,1,1,0" id="146">
      <find>S.0.1.0.0</find>
      <schemavariable name="%b">$mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="147">
      <find>S.0.0</find>
      <schemavariable name="%a">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="1">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="148">
      <find>S.0</find>
      <schemavariable name="%a">$and((\forall r as node;true as bool) as bool,$and($subset(dom_distance1 as set(node),dom_distance1 as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance1 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance1 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance1 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_remove" path="1,0,1,1,0" id="149">
      <find>S.0.0</find>
      <schemavariable name="%x">\var r as node</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="150">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset(dom_distance1 as set(node),dom_distance1 as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance1 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance1 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance1 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="151">
      <find>S.0.0</find>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <typevariable name="1">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="152">
      <find>S.0</find>
      <schemavariable name="%a">$and((\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance1 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance1 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance1 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,0" id="153">
      <find>S.0.1.1.1.1.0.0.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,0" id="154">
      <find>S.0.1.1.1.1.0.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,0" id="155">
      <find>S.0.1.1.1.1.1.0.0.0.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,0" id="156">
      <find>S.0.1.1.1.1.1.1.0.0.0.0.1</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0" id="157">
      <find>S.0</find>
      <schemavariable name="%a">(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance1 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance1 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,0" id="158">
      <find>S.0</find>
      <schemavariable name="%x">\var s as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance1 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var s as node)">s1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,0" id="159">
      <find>S.0</find>
      <schemavariable name="%a">$mem(s1 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance1 as map(node,int),s1 as node) as int,$load(distance1 as map(node,int),s1 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,0" id="160">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,1" id="161">
      <find>S.0</find>
      <schemavariable name="%a">$eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(start as node,dom_distance1 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,1,0" id="162">
      <find>S.0</find>
      <assume>A.4</assume>
      <schemavariable name="%b">$eq($load(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,1,1" id="163">
      <find>S.0</find>
      <schemavariable name="%a">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,1,1,0" id="164">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,1,1,1" id="165">
      <find>S.0</find>
      <schemavariable name="%a">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,1,1,1,0" id="166">
      <find>S.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte($load(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,1,1,1,1" id="167">
      <find>S.0</find>
      <schemavariable name="%a">(\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1,1,1,1,0" id="168">
      <find>S.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,1,1,1,1,0" id="169">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(y1 as node,dom_distance1 as set(node)) as bool,$not($eq(y1 as node,start as node) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),y1 as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,y1 as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1,1,1,1,0" id="170">
      <find>A.15</find>
      <schemavariable name="%a">$mem(y1 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(y1 as node,start as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,0,1,1,1,1,0" id="171">
      <find>A.16</find>
      <schemavariable name="%b">$eq(y1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,1,1,1,0" id="172">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,1,1,1,1,1" id="173">
      <find>S.0</find>
      <schemavariable name="%a">(\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1,1,1,1,1,0" id="174">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,1,1,1,1,1,0" id="175">
      <find>S.0</find>
      <schemavariable name="%a">$and($and($mem(b1 as node,dom_distance1 as set(node)) as bool,$not($mem(b1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,b1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance1 as map(node,int),b1 as node) as int,$plus($load(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,b1 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1,1,1,1,1,0" id="176">
      <find>A.15</find>
      <schemavariable name="%a">$and($mem(b1 as node,dom_distance1 as set(node)) as bool,$not($mem(b1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(n2 as node,b1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1,1,1,1,1,0" id="177">
      <find>A.15</find>
      <schemavariable name="%a">$mem(b1 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,0,1,1,1,1,1,0" id="178">
      <find>A.17</find>
      <schemavariable name="%b">$mem(b1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,1,1,1,1,0" id="179">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,1,1,1,1,1,1" id="180">
      <find>S.0</find>
      <schemavariable name="%a">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1,1,1,1,1,1,0" id="181">
      <find>S.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var a as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a1</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1,1,1,1,1,1,0" id="182">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a1 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),a1 as node) as int,$load(distance1 as map(node,int),\var b as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,1,1,1,1,1,1,0" id="183">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(a1 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(b2 as node,dom_distance1 as set(node)) as bool,$not($mem(b2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance1 as map(node,int),a1 as node) as int,$load(distance1 as map(node,int),b2 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1,1,1,1,1,1,0" id="184">
      <find>A.15</find>
      <schemavariable name="%a">$mem(a1 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(b2 as node,dom_distance1 as set(node)) as bool,$not($mem(b2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1,1,1,1,1,1,0" id="185">
      <find>A.16</find>
      <schemavariable name="%a">$mem(b2 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,0,1,1,1,1,1,1,0" id="186">
      <find>A.17</find>
      <schemavariable name="%b">$mem(b2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,0,1,1,1,1,1,1,0" id="187">
      <find>A.15</find>
      <assume>A.14</assume>
      <schemavariable name="%x">a1 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,1,1,1,1,1,0" id="188">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1,1,1,1,1,1,1" id="189">
      <find>S.0</find>
      <schemavariable name="%x">\var p as node</schemavariable>
      <schemavariable name="%b">(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var p as node)">p1</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1,1,1,1,1,1,1" id="190">
      <find>S.0</find>
      <schemavariable name="%x">\var q as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(p1 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(p1 as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var q as node)">q1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,1,1,1,1,1,1,1" id="191">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(p1 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(q1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(p1 as node,q1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(q1 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1,1,1,1,1,1,1" id="192">
      <find>A.15</find>
      <schemavariable name="%a">$mem(p1 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($not($mem(q1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool,$mem(pair(p1 as node,q1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1,1,1,1,1,1,1" id="193">
      <find>A.16</find>
      <schemavariable name="%a">$not($mem(q1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(p1 as node,q1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,0,1,1,1,1,1,1,1" id="194">
      <find>A.16</find>
      <schemavariable name="%b">$mem(q1 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,0,1,1,1,1,1,1,1" id="195">
      <find>A.15</find>
      <assume>A.14</assume>
      <schemavariable name="%x">p1 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,1,1,1,1,1,1" id="196">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="197">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[[53;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
      <property name="skolemName(distance as map(node,int))">distance2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="198">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := distance2 as map(node,int) }([[54;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="199">
      <find>S.0.10</find>
      <schemavariable name="%t">distance2 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="200">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[[54;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) }</schemaupdate>
      <property name="skolemName(d as int)">d2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="201">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d2 as int }([[55;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="202">
      <find>S.0.10</find>
      <schemavariable name="%t">d2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="203">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">nbors as set(node)</schemavariable>
      <schemavariable name="%a">[[55;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int }</schemaupdate>
      <property name="skolemName(nbors as set(node))">nbors2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="204">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := nbors2 as set(node) }([[56;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="205">
      <find>S.0.10</find>
      <schemavariable name="%t">nbors2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="206">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[[56;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) }</schemaupdate>
      <property name="skolemName(o as node)">o2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="207">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o2 as node }([[57;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="208">
      <find>S.0.10</find>
      <schemavariable name="%t">o2 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="209">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[[57;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node }</schemaupdate>
      <property name="skolemName(dom_distance as set(node))">dom_distance2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="210">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := dom_distance2 as set(node) }([[58;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="211">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1" id="212">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[58;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(varAtPre1 as set(node),nbors as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="213">
      <find>A.15</find>
      <schemavariable name="%t">$eq(varAtPre1 as set(node),nbors as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1" id="214">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[59;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($subset(nbors as set(node),nbors0 as set(node)) as bool,$and((\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool,$and($subset(old_dom_distance as set(node),dom_distance as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="215">
      <find>A.16</find>
      <schemavariable name="%t">$and($subset(nbors as set(node),nbors0 as set(node)) as bool,$and((\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool,$and($subset(old_dom_distance as set(node),dom_distance as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="216">
      <find>A.16</find>
      <schemavariable name="%a">$subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq($load(distance2 as map(node,int),\var r as node) as int,$load(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool,$and($subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance2 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance2 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="217">
      <find>A.17</find>
      <schemavariable name="%a">(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq($load(distance2 as map(node,int),\var r as node) as int,$load(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool,$and((\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance2 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance2 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="218">
      <find>A.18</find>
      <schemavariable name="%a">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance2 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool,$and($eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance2 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="219">
      <find>A.19</find>
      <schemavariable name="%a">(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance2 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool,$and($mem(start as node,dom_distance2 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="220">
      <find>A.20</find>
      <schemavariable name="%a">$eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(start as node,dom_distance2 as set(node)) as bool,$and((\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="221">
      <find>A.21</find>
      <schemavariable name="%a">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool,$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="222">
      <find>A.22</find>
      <schemavariable name="%a">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="223">
      <find>A.23</find>
      <schemavariable name="%a">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool,$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="224">
      <find>A.24</find>
      <schemavariable name="%a">(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool,(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="225">
      <find>A.25</find>
      <schemavariable name="%a">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,nbors2 as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1" id="226">
      <find>A.23.0.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1" id="227">
      <find>A.23.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1" id="228">
      <find>A.24.0.0.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">nbors2 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1" id="229">
      <find>A.25.0.0.0.1</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1" id="230">
      <find>A.11</find>
      <assume>A.18</assume>
      <schemavariable name="%x">x1 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1" id="231">
      <find>A.12</find>
      <assume>A.18</assume>
      <schemavariable name="%x">n2 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,0,1,1,1" id="232">
      <find>S.0</find>
      <schemavariable name="%k">75 as int</schemavariable>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[60;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">61 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0" id="233">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[61;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0" id="234">
      <find>A.29</find>
      <schemavariable name="%t">(\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,0,1,1,1,0" id="235">
      <find>A.29</find>
      <schemavariable name="%x">\var t as node</schemavariable>
      <schemavariable name="%b">$mem(\var t as node,nbors2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var t as node)">t</property>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0" id="236">
      <find>A.29</find>
      <assume>A.16</assume>
      <schemavariable name="%x">t as node</schemavariable>
      <schemavariable name="%t">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <schemavariable name="%s">nbors2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0" id="237">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[62;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists o as node;$mem(\var o as node,nbors as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,0" id="238">
      <find>S.0</find>
      <schemavariable name="%t">(\exists o as node;$mem(\var o as node,nbors as set(node)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,0" id="239">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1,0,1" id="240">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[[63;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
      <property name="skolemName(o as node)">o3</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="241">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o3 as node }([[64;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="242">
      <find>S.0.10</find>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1" id="243">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[64;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(o as node,nbors as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="244">
      <find>A.31</find>
      <schemavariable name="%t">$mem(o as node,nbors as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1" id="245">
      <find>A.31</find>
      <assume>A.16</assume>
      <schemavariable name="%x">o3 as node</schemavariable>
      <schemavariable name="%t">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <schemavariable name="%s">nbors2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1" id="246">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[65;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors := $diff(nbors as set(node),singleton(o as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="247">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := $diff(nbors as set(node),singleton(o as node) as set(node)) as set(node) }([[66;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="248">
      <find>S.0.10</find>
      <schemavariable name="%t">$diff(nbors as set(node),singleton(o as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1" id="249">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[66;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(n as node,o as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="250">
      <find>S.0</find>
      <schemavariable name="%t">$mem(pair(n as node,o as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,0" id="251">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1" id="252">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[67;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := $plus($load(distance as map(node,int),n as node) as int,weight(n as node,o as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1" id="253">
      <find>S.0</find>
      <schemavariable name="%t">{ d := $plus($load(distance as map(node,int),n as node) as int,weight(n as node,o as node) as int) as int }([[68;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1" id="254">
      <find>S.0.10</find>
      <schemavariable name="%t">$plus($load(distance as map(node,int),n as node) as int,weight(n as node,o as node) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,0,1,1,1,0,1,1" id="255">
      <find>S.0</find>
      <schemavariable name="%k">73 as int</schemavariable>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[68;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">69 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,1,0" id="256">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[69;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,$load(distance as map(node,int),o as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="257">
      <find>A.33</find>
      <schemavariable name="%t">$or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,$load(distance as map(node,int),o as node) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1,0" id="258">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[70;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := $union(dom_distance as set(node),singleton(o as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="259">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := $union(dom_distance as set(node),singleton(o as node) as set(node)) as set(node) }([[71;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="260">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(dom_distance as set(node),singleton(o as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1,0" id="261">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[71;Dij'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ distance := $store(distance as map(node,int),o as node,d as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="262">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := $store(distance as map(node,int),o as node,d as int) as map(node,int) }([[72;Dij'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="263">
      <find>S.0.10</find>
      <schemavariable name="%t">$store(distance as map(node,int),o as node,d as int) as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,0" id="264">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[72;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">74 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,0" id="265">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[74;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">40 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0" id="266">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[40;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(nbors as set(node),nbors0 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,0" id="267">
      <find>S.0</find>
      <schemavariable name="%t">$subset(nbors as set(node),nbors0 as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,1,0,0" id="268">
      <find>S.0</find>
      <assume>A.16</assume>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <schemavariable name="%c">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="c">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,0,0" id="269">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1" id="270">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[41;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,0" id="271">
      <find>S.0</find>
      <schemavariable name="%t">(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,0" id="272">
      <find>S.0</find>
      <schemavariable name="%x">\var r as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var r as node) as int,$load(distance1 as map(node,int),\var r as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var r as node)">r</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,0" id="273">
      <find>S.0</find>
      <schemavariable name="%a">$mem(r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$eq($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),r as node) as int,$load(distance1 as map(node,int),r as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,0" id="274">
      <find>A.34</find>
      <assume>A.14</assume>
      <schemavariable name="%x">r as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,0" id="275">
      <find>A.35</find>
      <assume>A.18</assume>
      <schemavariable name="%x">r as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,0" id="276">
      <find>S.0.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">r as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,0" id="277">
      <find>S.0.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">r as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,0" id="278">
      <find>S.0.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),r as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,r as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,0,0" id="279">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,0,1" id="280">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1" id="281">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[42;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,0" id="282">
      <find>S.0</find>
      <schemavariable name="%t">$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_of_union" path="1,0,1,1,1,0,1,1,0,1,1,0" id="283">
      <find>S.0</find>
      <assume>A.18</assume>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%c">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="1">node</typevariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="c">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,0,1,1,0" id="284">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1" id="285">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[43;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,0" id="286">
      <find>S.0</find>
      <schemavariable name="%t">(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,0" id="287">
      <find>S.0</find>
      <schemavariable name="%x">\var s as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var s as node)">s2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,1,1,0" id="288">
      <find>S.0</find>
      <schemavariable name="%a">$mem(s2 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$lte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),s2 as node) as int,$load(distance1 as map(node,int),s2 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,1,1,0" id="289">
      <find>A.34</find>
      <assume>A.18</assume>
      <schemavariable name="%x">s2 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,0" id="290">
      <find>S.0.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">s2 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,0" id="291">
      <find>S.0.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">s2 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,0" id="292">
      <find>S.0.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),s2 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,s2 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,0,0" id="293">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,0,1" id="294">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1" id="295">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[44;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq($load(distance as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,0" id="296">
      <find>S.0</find>
      <schemavariable name="%t">$eq($load(distance as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,0" id="297">
      <find>S.0.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">start as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,0" id="298">
      <find>S.0.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">start as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,0" id="299">
      <find>S.0.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),start as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,start as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,0,0" id="300">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,0,1,1,1,1,0,1" id="301">
      <find>S.0</find>
      <assume>A.20</assume>
      <schemavariable name="%b">$eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1" id="302">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[45;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(start as node,dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,0" id="303">
      <find>S.0</find>
      <schemavariable name="%t">$mem(start as node,dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,0" id="304">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1" id="305">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[46;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0" id="306">
      <find>S.0</find>
      <schemavariable name="%t">(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0" id="307">
      <find>S.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$gte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0" id="308">
      <find>S.0</find>
      <schemavariable name="%a">$mem(x2 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$gte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),x2 as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0" id="309">
      <find>S.0.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">x2 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0" id="310">
      <find>S.0.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">x2 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0" id="311">
      <find>S.0.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),x2 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,x2 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0" id="312">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1" id="313">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1" id="314">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[47;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0" id="315">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0" id="316">
      <find>S.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var y as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var y as node) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y5</property>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="cut_dragdrop" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0" id="317">
      <find>S.0.0.0</find>
      <schemavariable name="%a">y5 as node</schemavariable>
      <schemavariable name="%b">o3 as node</schemavariable>
      <typevariable name="a">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%b)">node</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="318">
      <find>S.0</find>
      <schemavariable name="%a">$mem(y5 as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),singleton(start as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),y5 as node) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var x as node) as int,weight(\var x as node,y5 as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="exists_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="319">
      <find>S.0</find>
      <schemavariable name="%inst">n2 as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),y5 as node) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var x as node) as int,weight(\var x as node,y5 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="320">
      <find>A.34</find>
      <schemavariable name="%u">o3 as node</schemavariable>
      <schemavariable name="%t">y5 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store_same_assume" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="321">
      <find>S.0.0.1.1.0</find>
      <assume>A.34</assume>
      <schemavariable name="%d2">y5 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%d">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d">node</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store_same_assume" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="322">
      <find>S.3.1.1.0</find>
      <assume>A.34</assume>
      <schemavariable name="%d2">y5 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%d">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d">node</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="323">
      <find>A.35</find>
      <schemavariable name="%x">y5 as node</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="324">
      <find>A.35</find>
      <schemavariable name="%a">$mem(y5 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(y5 as node,singleton(start as node) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="325">
      <find>A.36</find>
      <schemavariable name="%b">$mem(y5 as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="326">
      <find>S.4</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">y5 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0" id="327">
      <find>A.33</find>
      <schemavariable name="%a">$not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$load(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0" id="328">
      <find>A.33</find>
      <schemavariable name="%b">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0" id="329">
      <find>S.0.0.1.1.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">\var x as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0" id="330">
      <find>S.0.0.1.1.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">\var x as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0" id="331">
      <find>S.3</find>
      <schemavariable name="%a">$mem(n2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(pair(n2 as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),n2 as node) as int,weight(n2 as node,y5 as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0" id="332">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1" id="333">
      <find>S.3</find>
      <schemavariable name="%a">$mem(pair(n2 as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%b">$eq($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),n2 as node) as int,weight(n2 as node,y5 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0" id="334">
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1" id="335">
      <find>S.3.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">n2 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1" id="336">
      <find>S.3.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">n2 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1" id="337">
      <find>S.3.1.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,n2 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0" id="338">
      <find>A.35</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0" id="339">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1" id="340">
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1" id="341">
      <find>S.0.0.1.1.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">\var x as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1" id="342">
      <find>S.0.0.1.1.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">\var x as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1" id="343">
      <find>S.3</find>
      <schemavariable name="%a">$mem(n2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(pair(n2 as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),n2 as node) as int,weight(n2 as node,y5 as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0" id="344">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1" id="345">
      <find>S.3</find>
      <schemavariable name="%a">$mem(pair(n2 as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%b">$eq($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),n2 as node) as int,weight(n2 as node,y5 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0" id="346">
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1" id="347">
      <find>S.3.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">n2 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1" id="348">
      <find>S.3.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">n2 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1" id="349">
      <find>S.3.1.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,n2 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0" id="350">
      <find>A.36</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0" id="351">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1" id="352">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1" id="353">
      <find>S.0</find>
      <schemavariable name="%a">$mem(y5 as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),singleton(start as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),y5 as node) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var x as node) as int,weight(\var x as node,y5 as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1" id="354">
      <find>A.23</find>
      <schemavariable name="%inst">y5 as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1" id="355">
      <find>A.35</find>
      <schemavariable name="%a">$and($mem(y5 as node,dom_distance2 as set(node)) as bool,$not($eq(y5 as node,start as node) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),y5 as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y5 as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,0" id="356">
    </ruleApplication>
    <ruleApplication rule="map_load_store_other_reverse" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="357">
      <find>S.0.0.1.1.0</find>
      <assume>S.3</assume>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">y5 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="358">
      <find>A.34</find>
      <schemavariable name="%x">y5 as node</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="359">
      <find>A.34</find>
      <schemavariable name="%a">$mem(y5 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(y5 as node,singleton(start as node) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="360">
      <find>A.36</find>
      <schemavariable name="%b">$mem(y5 as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="361">
      <find>A.35</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),y5 as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y5 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x3</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="362">
      <find>A.35</find>
      <schemavariable name="%a">$mem(x3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(pair(x3 as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),y5 as node) as int,$plus($load(distance2 as map(node,int),x3 as node) as int,weight(x3 as node,y5 as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="363">
      <find>A.36</find>
      <schemavariable name="%a">$mem(pair(x3 as node,y5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%b">$eq($load(distance2 as map(node,int),y5 as node) as int,$plus($load(distance2 as map(node,int),x3 as node) as int,weight(x3 as node,y5 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="364">
      <find>A.37</find>
      <schemavariable name="%u">$plus($load(distance2 as map(node,int),x3 as node) as int,weight(x3 as node,y5 as node) as int) as int</schemavariable>
      <schemavariable name="%t">$load(distance2 as map(node,int),y5 as node) as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="365">
      <find>S.4</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">y5 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="366">
      <find>A.35</find>
      <assume>A.14</assume>
      <schemavariable name="%x">x3 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="367">
      <find>A.38</find>
      <assume>A.18</assume>
      <schemavariable name="%x">x3 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1" id="368">
      <find>A.33</find>
      <schemavariable name="%a">$not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$load(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0" id="369">
      <find>A.33</find>
      <schemavariable name="%b">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0" id="370">
      <find>S.0.0.1.1.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">\var x as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0" id="371">
      <find>S.0.0.1.1.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">\var x as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0" id="372">
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1" id="373">
      <find>S.0.0.1.1.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">\var x as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1" id="374">
      <find>S.0.0.1.1.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">\var x as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1" id="375">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1" id="376">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[48;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="377">
      <find>S.0</find>
      <schemavariable name="%t">(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="378">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(\var b as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var b as node) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b7</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="379">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(b7 as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as set(node)) as bool,$mem(pair(n2 as node,b7 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),b7 as node) as int,$plus($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),n2 as node) as int,weight(n2 as node,b7 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="380">
      <find>A.34</find>
      <schemavariable name="%a">$mem(b7 as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(n2 as node,b7 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="381">
      <find>A.34</find>
      <schemavariable name="%x">b7 as node</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="382">
      <find>A.34</find>
      <schemavariable name="%a">$mem(b7 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b7 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="383">
      <find>A.36</find>
      <schemavariable name="%b">$mem(b7 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="384">
      <find>S.3</find>
      <schemavariable name="%x">b7 as node</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="385">
      <find>S.3.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">b7 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="386">
      <find>S.0.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">b7 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="387">
      <find>S.0.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">b7 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0" id="388">
      <find>S.0.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),b7 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,b7 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0" id="389">
      <find>A.36</find>
      <schemavariable name="%u">b7 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0" id="390">
      <find>S.0.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">n2 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0" id="391">
      <find>S.0.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">n2 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0" id="392">
      <find>S.0.1.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,n2 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0" id="393">
      <find>A.37</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0" id="394">
      <find>S.3</find>
      <schemavariable name="%a">$mem(b7 as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(b7 as node,o3 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0" id="395">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1" id="396">
      <find>S.3</find>
      <schemavariable name="%b">$eq(b7 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1" id="397">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1" id="398">
      <find>S.3</find>
      <schemavariable name="%a">$mem(b7 as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(b7 as node,o3 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0" id="399">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1" id="400">
      <find>S.3</find>
      <schemavariable name="%b">$eq(b7 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1" id="401">
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1" id="402">
      <find>S.0.1.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">n2 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1" id="403">
      <find>S.0.1.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">n2 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1" id="404">
      <find>S.0.1.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,n2 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0" id="405">
      <find>A.36</find>
      <schemavariable name="%u">n2 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0" id="406">
      <find>S.3</find>
      <schemavariable name="%a">$mem(b7 as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(b7 as node,o3 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0" id="407">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1" id="408">
      <find>S.3</find>
      <schemavariable name="%b">$eq(b7 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1" id="409">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1" id="410">
      <find>S.3</find>
      <schemavariable name="%a">$mem(b7 as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(b7 as node,o3 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0" id="411">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1" id="412">
      <find>S.3</find>
      <schemavariable name="%b">$eq(b7 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1" id="413">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1" id="414">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[49;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="415">
      <find>S.0</find>
      <schemavariable name="%t">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="416">
      <find>S.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var a as node) as int,$load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var b as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a5</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="417">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a5 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),a5 as node) as int,$load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),\var b as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b8</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="418">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(a5 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(b8 as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),a5 as node) as int,$load($store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int),b8 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="419">
      <find>A.34</find>
      <schemavariable name="%a">$mem(a5 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(b8 as node,$diff($union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="420">
      <find>A.35</find>
      <schemavariable name="%x">b8 as node</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="421">
      <find>A.35</find>
      <schemavariable name="%a">$mem(b8 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b8 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="422">
      <find>A.36</find>
      <schemavariable name="%b">$mem(b8 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="423">
      <find>A.34</find>
      <assume>A.14</assume>
      <schemavariable name="%x">a5 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="424">
      <find>A.36</find>
      <assume>A.18</assume>
      <schemavariable name="%x">a5 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="425">
      <find>S.0.0</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">a5 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="426">
      <find>S.0.0.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">a5 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0" id="427">
      <find>S.0.0</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),a5 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,a5 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0" id="428">
      <find>A.38</find>
      <schemavariable name="%u">a5 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0" id="429">
      <find>S.0.1</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">b8 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0" id="430">
      <find>S.0.1.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">b8 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0" id="431">
      <find>S.0.1</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),b8 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,b8 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0" id="432">
      <find>A.39</find>
      <schemavariable name="%u">b8 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0" id="433">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1" id="434">
    </ruleApplication>
    <ruleApplication rule="map_load_store" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1" id="435">
      <find>S.0.1</find>
      <schemavariable name="%d1">o3 as node</schemavariable>
      <schemavariable name="%d2">b8 as node</schemavariable>
      <schemavariable name="%v">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="d1">node</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="d2">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1" id="436">
      <find>S.0.1.0</find>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">b8 as node</schemavariable>
      <typevariable name="b">node</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1" id="437">
      <find>S.0.1</find>
      <schemavariable name="%a">$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$load(distance2 as map(node,int),b8 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,b8 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0" id="438">
      <find>A.38</find>
      <schemavariable name="%u">b8 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0" id="439">
      <find>A.34</find>
      <schemavariable name="%x">a5 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0" id="440">
      <find>A.34</find>
      <schemavariable name="%a">$mem(a5 as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(a5 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0" id="441">
      <find>A.33</find>
      <schemavariable name="%a">$not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$load(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0" id="442">
      <find>A.33</find>
      <schemavariable name="%b">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0" id="443">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1" id="444">
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1" id="445">
      <find>A.34</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">a5 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1" id="446">
      <find>A.33</find>
      <schemavariable name="%a">$not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$load(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0" id="447">
      <find>A.33</find>
      <schemavariable name="%b">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0" id="448">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1" id="449">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1" id="450">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1" id="451">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[50;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="452">
      <find>S.0</find>
      <schemavariable name="%t">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="453">
      <find>S.0</find>
      <schemavariable name="%x">\var p as node</schemavariable>
      <schemavariable name="%b">(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var p as node)">p4</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="454">
      <find>S.0</find>
      <schemavariable name="%x">\var q as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(p4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(p4 as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var q as node)">q4</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="455">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(p4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(q4 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(p4 as node,q4 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(q4 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="456">
      <find>A.34</find>
      <schemavariable name="%a">$mem(p4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($not($mem(q4 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(p4 as node,q4 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="457">
      <find>A.35</find>
      <schemavariable name="%a">$not($mem(q4 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(p4 as node,q4 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="458">
      <find>A.35</find>
      <schemavariable name="%b">$mem(q4 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="459">
      <find>S.3</find>
      <schemavariable name="%x">q4 as node</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="460">
      <find>S.3.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">q4 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="461">
      <find>A.34</find>
      <assume>A.14</assume>
      <schemavariable name="%x">p4 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="462">
      <find>A.36</find>
      <assume>A.18</assume>
      <schemavariable name="%x">p4 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="463">
      <find>S.3</find>
      <schemavariable name="%a">$mem(q4 as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(q4 as node,o3 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0" id="464">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1" id="465">
      <find>S.3</find>
      <schemavariable name="%b">$eq(q4 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1" id="466">
      <find>A.38</find>
      <schemavariable name="%u">o3 as node</schemavariable>
      <schemavariable name="%t">q4 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1" id="467">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1" id="468">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[51;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$prec(nbors as set(node),varAtPre1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="469">
      <find>S.0</find>
      <schemavariable name="%t">$prec(nbors as set(node),varAtPre1 as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prec_set" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="470">
      <find>S.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">varAtPre1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="471">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">varAtPre1 as set(node)</schemavariable>
      <schemavariable name="%b">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="472">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="473">
      <find>S.0.0.1.0.1.0.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="474">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%s">varAtPre1 as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="475">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),varAtPre1 as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,varAtPre1 as set(node)) as bool,$not($and($mem(\var x as node,nbors2 as set(node)) as bool,$not($eq(\var x as node,o3 as node) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="476">
      <find>S.0</find>
      <schemavariable name="%a">$subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),varAtPre1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,varAtPre1 as set(node)) as bool,$not($and($mem(\var x as node,nbors2 as set(node)) as bool,$not($eq(\var x as node,o3 as node) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0" id="477">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1" id="478">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1" id="479">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[52;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1" id="480">
      <find>A.34</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := $store(distance2 as map(node,int),o3 as node,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1" id="481">
      <find>A.34</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,1,1" id="482">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[73;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,$load(distance as map(node,int),o as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1" id="483">
      <find>A.33</find>
      <schemavariable name="%t">$not($or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,$load(distance as map(node,int),o as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1" id="484">
      <find>A.33</find>
      <schemavariable name="%b">$or($not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool,$lt($plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$load(distance2 as map(node,int),o3 as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,1" id="485">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[74;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">40 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1" id="486">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[40;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(nbors as set(node),nbors0 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="487">
      <find>S.0</find>
      <schemavariable name="%t">$subset(nbors as set(node),nbors0 as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,1,1,0" id="488">
      <find>S.0</find>
      <assume>A.16</assume>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <schemavariable name="%c">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="c">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,0" id="489">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1" id="490">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[41;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,0" id="491">
      <find>S.0</find>
      <schemavariable name="%t">(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq($load(distance as map(node,int),\var r as node) as int,$load(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0" id="492">
      <find>S.0</find>
      <assume>A.17</assume>
      <schemavariable name="%b">(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq($load(distance2 as map(node,int),\var r as node) as int,$load(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1" id="493">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[42;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,0" id="494">
      <find>S.0</find>
      <schemavariable name="%t">$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,1,0" id="495">
      <find>S.0</find>
      <assume>A.18</assume>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1" id="496">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[43;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,0" id="497">
      <find>S.0</find>
      <schemavariable name="%t">(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte($load(distance as map(node,int),\var s as node) as int,$load(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,1,1,0" id="498">
      <find>S.0</find>
      <assume>A.19</assume>
      <schemavariable name="%b">(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte($load(distance2 as map(node,int),\var s as node) as int,$load(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1" id="499">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[44;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq($load(distance as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0" id="500">
      <find>S.0</find>
      <schemavariable name="%t">$eq($load(distance as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0" id="501">
      <find>S.0</find>
      <assume>A.20</assume>
      <schemavariable name="%b">$eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1" id="502">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[45;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(start as node,dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,0" id="503">
      <find>S.0</find>
      <schemavariable name="%t">$mem(start as node,dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,0" id="504">
      <find>S.0</find>
      <assume>A.21</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1" id="505">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[46;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="506">
      <find>S.0</find>
      <schemavariable name="%t">(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="507">
      <find>S.0</find>
      <assume>A.22</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1" id="508">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[47;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="509">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="510">
      <find>S.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y3</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="511">
      <find>S.0</find>
      <schemavariable name="%a">$mem(y3 as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),y3 as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y3 as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="512">
      <find>A.33</find>
      <schemavariable name="%x">y3 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="513">
      <find>A.33</find>
      <schemavariable name="%a">$mem(y3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(y3 as node,singleton(start as node) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="514">
      <find>A.34</find>
      <schemavariable name="%b">$mem(y3 as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="515">
      <find>S.4</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">y3 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="516">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1" id="517">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[48;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="518">
      <find>S.0</find>
      <schemavariable name="%t">(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="519">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b5</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="520">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(b5 as node,$diff(dom_distance2 as set(node),$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as set(node)) as bool,$mem(pair(n2 as node,b5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance2 as map(node,int),b5 as node) as int,$plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,b5 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="521">
      <find>A.33</find>
      <schemavariable name="%a">$mem(b5 as node,$diff(dom_distance2 as set(node),$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(n2 as node,b5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="522">
      <find>A.33</find>
      <schemavariable name="%x">b5 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="523">
      <find>A.33</find>
      <schemavariable name="%a">$mem(b5 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b5 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="524">
      <find>A.35</find>
      <schemavariable name="%b">$mem(b5 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="525">
      <find>S.4</find>
      <schemavariable name="%x">b5 as node</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="526">
      <find>S.4.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">b5 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="527">
      <find>S.4</find>
      <schemavariable name="%a">$mem(b5 as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(b5 as node,o3 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0" id="528">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1" id="529">
      <find>S.4</find>
      <schemavariable name="%b">$eq(b5 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1" id="530">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1" id="531">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[49;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="532">
      <find>S.0</find>
      <schemavariable name="%t">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="533">
      <find>S.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a4</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="534">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),a4 as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b6</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="535">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(a4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(b6 as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance2 as map(node,int),a4 as node) as int,$load(distance2 as map(node,int),b6 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="536">
      <find>A.33</find>
      <schemavariable name="%a">$mem(a4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(b6 as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="537">
      <find>A.34</find>
      <schemavariable name="%x">b6 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="538">
      <find>A.34</find>
      <schemavariable name="%a">$mem(b6 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b6 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="539">
      <find>A.35</find>
      <schemavariable name="%b">$mem(b6 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="540">
      <find>A.33</find>
      <assume>A.14</assume>
      <schemavariable name="%x">a4 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="541">
      <find>A.35</find>
      <assume>A.18</assume>
      <schemavariable name="%x">a4 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="542">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1" id="543">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[50;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="544">
      <find>S.0</find>
      <schemavariable name="%t">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$and($not($mem(\var q as node,nbors as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="545">
      <find>S.0</find>
      <schemavariable name="%x">\var p as node</schemavariable>
      <schemavariable name="%b">(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var p as node)">p3</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="546">
      <find>S.0</find>
      <schemavariable name="%x">\var q as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(p3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(\var q as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(p3 as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var q as node)">q3</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="547">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(p3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($not($mem(q3 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(p3 as node,q3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(q3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="548">
      <find>A.33</find>
      <schemavariable name="%a">$mem(p3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($not($mem(q3 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,$mem(pair(p3 as node,q3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="549">
      <find>A.34</find>
      <schemavariable name="%a">$not($mem(q3 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(p3 as node,q3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="550">
      <find>A.34</find>
      <schemavariable name="%b">$mem(q3 as node,$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="551">
      <find>S.4</find>
      <schemavariable name="%x">q3 as node</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="552">
      <find>S.4.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">q3 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="553">
      <find>A.33</find>
      <assume>A.14</assume>
      <schemavariable name="%x">p3 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="554">
      <find>A.35</find>
      <assume>A.18</assume>
      <schemavariable name="%x">p3 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="555">
      <find>S.4</find>
      <schemavariable name="%a">$mem(q3 as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(q3 as node,o3 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0" id="556">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="557">
      <find>S.4</find>
      <schemavariable name="%b">$eq(q3 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="558">
      <find>A.37</find>
      <schemavariable name="%u">o3 as node</schemavariable>
      <schemavariable name="%t">q3 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="559">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="560">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[51;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$prec(nbors as set(node),varAtPre1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="561">
      <find>S.0</find>
      <schemavariable name="%t">$prec(nbors as set(node),varAtPre1 as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prec_set" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="562">
      <find>S.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">varAtPre1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="563">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">varAtPre1 as set(node)</schemavariable>
      <schemavariable name="%b">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="564">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="565">
      <find>S.0.0.1.0.1.0.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="566">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%s">varAtPre1 as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="567">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),varAtPre1 as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,varAtPre1 as set(node)) as bool,$not($and($mem(\var x as node,nbors2 as set(node)) as bool,$not($eq(\var x as node,o3 as node) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="568">
      <find>S.0</find>
      <schemavariable name="%a">$subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),varAtPre1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,varAtPre1 as set(node)) as bool,$not($and($mem(\var x as node,nbors2 as set(node)) as bool,$not($eq(\var x as node,o3 as node) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0" id="569">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="570">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="571">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[52;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="572">
      <find>A.33</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus($load(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="573">
      <find>A.33</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,1" id="574">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[75;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not((\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1" id="575">
      <find>A.29</find>
      <schemavariable name="%t">$not((\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,1" id="576">
      <find>A.29</find>
      <schemavariable name="%b">(\exists t as node;$mem(\var t as node,nbors2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,1" id="577">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[76;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">6 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1" id="578">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[6;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="579">
      <find>S.0</find>
      <schemavariable name="%t">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,0" id="580">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1" id="581">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[7;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq($load(distance as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,0" id="582">
      <find>S.0</find>
      <schemavariable name="%t">$eq($load(distance as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,1,0" id="583">
      <find>S.0</find>
      <assume>A.20</assume>
      <schemavariable name="%b">$eq($load(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1" id="584">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[8;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(start as node,dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,0" id="585">
      <find>S.0</find>
      <schemavariable name="%t">$mem(start as node,dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,1,1,0" id="586">
      <find>S.0</find>
      <assume>A.21</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1" id="587">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[9;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,0" id="588">
      <find>S.0</find>
      <schemavariable name="%t">(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte($load(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,1,1,1,0" id="589">
      <find>S.0</find>
      <assume>A.22</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte($load(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1,1" id="590">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[10;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,0" id="591">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,visited as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,1,1,0" id="592">
      <find>S.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),\var y as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,1,1,1,1,1,0" id="593">
      <find>S.0</find>
      <schemavariable name="%a">$mem(y2 as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(pair(\var x as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance2 as map(node,int),y2 as node) as int,$plus($load(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,y2 as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,1,1,1,1,1,0" id="594">
      <find>A.29</find>
      <schemavariable name="%x">y2 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,1,1,1,1,0" id="595">
      <find>A.29</find>
      <schemavariable name="%a">$mem(y2 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(y2 as node,singleton(start as node) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,1,1,1,1,1,0" id="596">
      <find>A.30</find>
      <schemavariable name="%b">$mem(y2 as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,1,1,1,1,1,0" id="597">
      <find>S.4</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">y2 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,0" id="598">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1,1,1" id="599">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[11;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,1,0" id="600">
      <find>S.0</find>
      <schemavariable name="%t">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,1,1,1,0" id="601">
      <find>S.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a2</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,1,1,1,0" id="602">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$mem(pair(a2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance2 as map(node,int),\var b as node) as int,$plus($load(distance2 as map(node,int),a2 as node) as int,weight(a2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b3</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,1,1,1,1,1,1,0" id="603">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(a2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(b3 as node,dom_distance2 as set(node)) as bool,$mem(pair(a2 as node,b3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance2 as map(node,int),b3 as node) as int,$plus($load(distance2 as map(node,int),a2 as node) as int,weight(a2 as node,b3 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,1,1,1,1,1,0" id="604">
      <find>A.29</find>
      <schemavariable name="%a">$mem(a2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(b3 as node,dom_distance2 as set(node)) as bool,$mem(pair(a2 as node,b3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,1,1,1,1,1,0" id="605">
      <find>A.30</find>
      <schemavariable name="%a">$mem(b3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(a2 as node,b3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,1,1,1,1,1,1,0" id="606">
      <find>A.29</find>
      <assume>A.14</assume>
      <schemavariable name="%x">a2 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,1,1,1,1,1,1,0" id="607">
      <find>A.32</find>
      <assume>A.18</assume>
      <schemavariable name="%x">a2 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut" path="1,0,1,1,1,1,1,1,1,1,1,0" id="608">
      <schemavariable name="%inst">$eq(n2 as node,a2 as node) as bool</schemavariable>
      <property name="interact(%inst)">bool</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,0,0" id="609">
    </ruleApplication>
    <ruleApplication rule="cut" path="1,0,1,1,1,1,1,1,1,1,1,0,1" id="610">
      <schemavariable name="%inst">$eq($load(distance1 as map(node,int),a2 as node) as int,$load(distance2 as map(node,int),a2 as node) as int) as bool</schemavariable>
      <property name="interact(%inst)">bool</property>
    </ruleApplication>
    <ruleApplication rule="cut" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0" id="611">
      <schemavariable name="%inst">$lte($load(distance2 as map(node,int),b3 as node) as int,$load(distance1 as map(node,int),b3 as node) as int) as bool</schemavariable>
      <property name="interact(%inst)">bool</property>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0" id="612">
      <find>A.8</find>
      <schemavariable name="%inst">a2 as node</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0" id="613">
      <find>A.36</find>
      <schemavariable name="%inst">b3 as node</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a2 as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(a2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),a2 as node) as int,weight(a2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0" id="614">
      <find>A.37</find>
      <schemavariable name="%a">$and($mem(a2 as node,visited1 as set(node)) as bool,$and($mem(b3 as node,dom_distance1 as set(node)) as bool,$mem(pair(a2 as node,b3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance1 as map(node,int),b3 as node) as int,$plus($load(distance1 as map(node,int),a2 as node) as int,weight(a2 as node,b3 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0" id="615">
      <find>S.5</find>
      <schemavariable name="%a">$mem(a2 as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(b3 as node,dom_distance1 as set(node)) as bool,$mem(pair(a2 as node,b3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0" id="616">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1" id="617">
      <find>S.5</find>
      <schemavariable name="%a">$mem(b3 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(a2 as node,b3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0" id="618">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1" id="619">
      <find>S.5</find>
      <assume>A.31</assume>
      <schemavariable name="%b">$mem(pair(a2 as node,b3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1" id="620">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,0,1,0,1" id="621">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,0,1,1" id="622">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1,1,1,1" id="623">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[12;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="624">
      <find>S.0</find>
      <schemavariable name="%t">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte($load(distance as map(node,int),\var a as node) as int,$load(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="625">
      <find>S.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),\var a as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a3</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="626">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte($load(distance2 as map(node,int),a3 as node) as int,$load(distance2 as map(node,int),\var b as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b4</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="627">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(a3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(b4 as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance2 as map(node,int),a3 as node) as int,$load(distance2 as map(node,int),b4 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="628">
      <find>A.29</find>
      <schemavariable name="%a">$mem(a3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(b4 as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="629">
      <find>A.30</find>
      <schemavariable name="%x">b4 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="630">
      <find>A.30</find>
      <schemavariable name="%a">$mem(b4 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="631">
      <find>A.31</find>
      <schemavariable name="%b">$mem(b4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="632">
      <find>A.29</find>
      <assume>A.14</assume>
      <schemavariable name="%x">a3 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="633">
      <find>A.31</find>
      <assume>A.18</assume>
      <schemavariable name="%x">a3 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,1,0" id="634">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1,1,1,1,1" id="635">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[13;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="636">
      <find>S.0</find>
      <schemavariable name="%t">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,visited as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="637">
      <find>S.0</find>
      <schemavariable name="%x">\var p as node</schemavariable>
      <schemavariable name="%b">(\forall q as node;$impl($and($mem(\var p as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var p as node)">p2</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="638">
      <find>S.0</find>
      <schemavariable name="%x">\var q as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(p2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(p2 as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var q as node)">q2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="639">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(p2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(p2 as node,q2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(q2 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="640">
      <find>A.29</find>
      <schemavariable name="%a">$mem(p2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(p2 as node,q2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="641">
      <find>A.29</find>
      <assume>A.14</assume>
      <schemavariable name="%x">p2 as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="642">
      <find>A.31</find>
      <assume>A.18</assume>
      <schemavariable name="%x">p2 as node</schemavariable>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%s">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="643">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1" id="644">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[14;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$prec($complement(visited as set(node)) as set(node),varAtPre as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="645">
      <find>S.0</find>
      <schemavariable name="%t">$prec($complement(visited as set(node)) as set(node),varAtPre as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prec_set" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="646">
      <find>S.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">varAtPre as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="complement_disj" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="647">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">singleton(n2 as node) as set(node)</schemavariable>
      <schemavariable name="%s">visited1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="648">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">varAtPre as set(node)</schemavariable>
      <schemavariable name="%b">$complement($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="649">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%s">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="650">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%b">$mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="651">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%s">varAtPre as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="a">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="652">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset($intersect($complement(visited1 as set(node)) as set(node),$complement(singleton(n2 as node) as set(node)) as set(node)) as set(node),varAtPre as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,varAtPre as set(node)) as bool,$mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="653">
      <find>S.0</find>
      <schemavariable name="%a">$subset($intersect($complement(visited1 as set(node)) as set(node),$complement(singleton(n2 as node) as set(node)) as set(node)) as set(node),varAtPre as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,varAtPre as set(node)) as bool,$mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0" id="654">
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="655">
      <find>S.0.0.0.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">$complement(visited1 as set(node)) as set(node)</schemavariable>
      <schemavariable name="%t">varAtPre as set(node)</schemavariable>
      <typevariable name="u">set(node)</typevariable>
      <typevariable name="t">set(node)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="exists_right" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="656">
      <find>S.0</find>
      <schemavariable name="%inst">n2 as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%b">$and($mem(\var x as node,$complement(visited1 as set(node)) as set(node)) as bool,$mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="657">
      <find>S.4</find>
      <schemavariable name="%a">$mem(n2 as node,$complement(visited1 as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(n2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0" id="658">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1" id="659">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,1" id="660">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[15;Dij'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,1" id="661">
      <find>A.29</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,0,1,1,1,1,1,1,1,1,1,1,1,1,1" id="662">
      <find>A.29</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1" id="663">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[58;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="664">
      <find>A.11</find>
      <schemavariable name="%t">$not($not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1" id="665">
      <find>A.11</find>
      <schemavariable name="%b">$eq(emptyset as set(node),$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,1" id="666">
      <find>A.11</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%s">$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1" id="667">
      <find>A.11.0.0</find>
      <schemavariable name="%x">\var x as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1" id="668">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[59;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="669">
      <find>S.0</find>
      <schemavariable name="%t">$eq(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="1,1,0" id="670">
      <find>S.0</find>
      <schemavariable name="%e">\var e as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance1 as set(node)</schemavariable>
      <typevariable name="e">node</typevariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,1,0" id="671">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var e as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(\var e as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="eq_to_imp" path="1,1,0" id="672">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var e as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(\var e as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0" id="673">
      <find>S.0</find>
      <schemavariable name="%x">\var e as node</schemavariable>
      <schemavariable name="%b">$and($impl($mem(\var e as node,visited1 as set(node)) as bool,$mem(\var e as node,dom_distance1 as set(node)) as bool) as bool,$impl($mem(\var e as node,dom_distance1 as set(node)) as bool,$mem(\var e as node,visited1 as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var e as node)">e</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0" id="674">
      <find>S.0</find>
      <schemavariable name="%a">$impl($mem(e as node,visited1 as set(node)) as bool,$mem(e as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($mem(e as node,dom_distance1 as set(node)) as bool,$mem(e as node,visited1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,0" id="675">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(e as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,1,0,0" id="676">
      <find>A.12</find>
      <assume>A.3</assume>
      <schemavariable name="%x">e as node</schemavariable>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%s">visited1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,0" id="677">
      <find>S.0</find>
      <assume>A.13</assume>
      <schemavariable name="%b">$mem(e as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1" id="678">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(e as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1" id="679">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1" id="680">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[60;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,dom_distance as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0" id="681">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,dom_distance as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance as map(node,int),\var y as node) as int,$plus($load(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0" id="682">
      <find>S.0</find>
      <schemavariable name="%x">\var y as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($mem(\var x as node,dom_distance1 as set(node)) as bool,$and($mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),\var y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0" id="683">
      <find>S.0</find>
      <schemavariable name="%a">$mem(y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as node;$and($mem(\var x as node,dom_distance1 as set(node)) as bool,$and($mem(pair(\var x as node,y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$eq($load(distance1 as map(node,int),y as node) as int,$plus($load(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,1,0" id="684">
      <find>A.12</find>
      <schemavariable name="%x">y as node</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0" id="685">
      <find>A.12</find>
      <schemavariable name="%a">$mem(y as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(y as node,singleton(start as node) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0" id="686">
      <find>A.13</find>
      <schemavariable name="%b">$mem(y as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,1,0" id="687">
      <find>S.1</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">y as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0" id="688">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1,1" id="689">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[61;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as node;$impl($mem(\var a as node,dom_distance as set(node)) as bool,(\forall b as node;$impl($and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,0" id="690">
      <find>S.0</find>
      <schemavariable name="%t">(\forall a as node;$impl($mem(\var a as node,dom_distance as set(node)) as bool,(\forall b as node;$impl($and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance as map(node,int),\var b as node) as int,$plus($load(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,0" id="691">
      <find>S.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var a as node,dom_distance1 as set(node)) as bool,(\forall b as node;$impl($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,0" id="692">
      <find>S.0</find>
      <schemavariable name="%a">$mem(a as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),a as node) as int,weight(a as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,0" id="693">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte($load(distance1 as map(node,int),\var b as node) as int,$plus($load(distance1 as map(node,int),a as node) as int,weight(a as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,0" id="694">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(b as node,dom_distance1 as set(node)) as bool,$mem(pair(a as node,b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte($load(distance1 as map(node,int),b as node) as int,$plus($load(distance1 as map(node,int),a as node) as int,weight(a as node,b as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,0" id="695">
      <find>A.13</find>
      <schemavariable name="%a">$mem(b as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(a as node,b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,0" id="696">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1,1,1" id="697">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[62;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,dom_distance as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,0" id="698">
      <find>S.0</find>
      <schemavariable name="%t">(\forall p as node;(\forall q as node;$impl($and($mem(\var p as node,dom_distance as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,1,0" id="699">
      <find>S.0</find>
      <schemavariable name="%x">\var p as node</schemavariable>
      <schemavariable name="%b">(\forall q as node;$impl($and($mem(\var p as node,dom_distance1 as set(node)) as bool,$mem(pair(\var p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var p as node)">p</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,1,0" id="700">
      <find>S.0</find>
      <schemavariable name="%x">\var q as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(p as node,dom_distance1 as set(node)) as bool,$mem(pair(p as node,\var q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$mem(\var q as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var q as node)">q</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,1,0" id="701">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(p as node,dom_distance1 as set(node)) as bool,$mem(pair(p as node,q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(q as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,0" id="702">
      <find>A.12</find>
      <schemavariable name="%a">$mem(p as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(pair(p as node,q as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,0" id="703">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1,1,1" id="704">
      <find>S.0.0</find>
      <schemavariable name="%a">[[63;Dij']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1" id="705">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1" id="706">
      <find>S.0</find>
    </ruleApplication>
  </steps>
</proof>
; Spec# Program Verifier Version 0.80, Copyright (c) 2003-2006, Microsoft.
; Command Line Options: -nologo /prover:blank /print:boogie_tmp.@TIME@.bpl /proverLog:boogie_tmp.@TIME@.simplify /nologo Lock.bpl
; -------------------------------------------------------------------------
; Boogie universal background predicate
; Copyright (c) 2004-2005, Microsoft Corp.
(DEFPRED (<: t u))

(BG_PUSH (AND

  ; select/store axioms, 1 index argument

  (FORALL (A i v)
    (EQ (select1 (store1 A i v) i) v))

  (FORALL (A i j v)
    (IMPLIES (NEQ i j)
      (EQ
        (select1 (store1 A i v) j)
        (select1 A j))))

  ; select/store axioms, 2 index arguments

  (FORALL (A o f v)
    (EQ (select2 (store2 A o f v) o f) v))

  (FORALL (A o f p g v)
    (IMPLIES (NEQ o p)
      (EQ
        (select2 (store2 A o f v) p g)
        (select2 A p g))))

  (FORALL (A o f p g v)
    (IMPLIES (NEQ f g)
      (EQ
        (select2 (store2 A o f v) p g)
        (select2 A p g))))

  ; formula/term axioms

  (FORALL (x y)
    (IFF
      (EQ (boolIff x y) |@true|)
      (IFF (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x y)
    (IFF
      (EQ (boolImplies x y) |@true|)
      (IMPLIES (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x y)
    (IFF
      (EQ (boolAnd x y) |@true|)
      (AND (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x y)
    (IFF
      (EQ (boolOr x y) |@true|)
      (OR (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x)
    (PATS (boolNot x))
    (IFF
      (EQ (boolNot x) |@true|)
      (NEQ x |@true|)))

  (FORALL (x y)
    (IFF
      (EQ (anyEqual x y) |@true|)
      (EQ x y)))

  (FORALL (x y)
    (PATS (anyNeq x y))
    (IFF
      (EQ (anyNeq x y) |@true|)
      (NEQ x y)))

  (FORALL (x y)
    (IFF
      (EQ (intLess x y) |@true|)
      (< x y)))

  (FORALL (x y)
    (IFF
      (EQ (intAtMost x y) |@true|)
      (<= x y)))

  (FORALL (x y)
    (IFF
      (EQ (intAtLeast x y) |@true|)
      (>= x y)))

  (FORALL (x y)
    (IFF
      (EQ (intGreater x y) |@true|)
      (> x y)))

  ; false is not true

  (DISTINCT |@false| |@true|)

  ; <: is a partial order:  it is reflexive, transitive, and anti-symmetric

  (FORALL (t)
    (PATS (<: t t))
    (<: t t))

  (FORALL (t u v)
    (PATS (MPAT (<: t u) (<: u v)))
    (IMPLIES
      (AND (<: t u ) (<: u v))
      (<: t v)))

  (FORALL (t u)
    (PATS (MPAT (<: t u) (<: u t)))
    (IMPLIES
      (AND (<: t u) (<: u t))
      (EQ t u)))

  ;; The following axiom gives a way to typed produce verification conditions,
  ;; that is, verification conditions where the terms are typable.  To use these,
  ;; the VCExpressionGenerator.{CastTo,CastFrom} methods must be overridden.
  ;; Look for USE_SORTED_LOGIC in VCGeneration/VCExpr.ssc.
  ; (FORALL (val T U)
  ;   (PATS (TypeConvert (TypeConvert val T U) U T))
  ;   (EQ (TypeConvert (TypeConvert val T U) U T) val))

))  ;; AND, BG_PUSH
; End Boogie universal background predicate
; -------------------------------------------------------------------------

(BG_PUSH 
(AND TRUE TRUE)
)
; Initialized all axioms.
; LockingExample
(IMPLIES (IMPLIES (IMPLIES (LBLPOS |+35| TRUE) (IMPLIES TRUE (IMPLIES (AND (AND (<= 0 0) (<= 0 0)) (AND (<= 0 0) (<= 0 0))) (IMPLIES (AND (<= 0 0) (<= 0 0)) (AND (LBLNEG |@505| (EQ 0 0)) (IMPLIES (EQ 0 0) (IMPLIES (IMPLIES (IMPLIES (LBLPOS |+47| TRUE) (IMPLIES (AND (<= 0 |held@0|) (<= 0 |x@0|)) (IMPLIES (EQ |held@0| 0) (IMPLIES (AND (AND (AND (<= 1 1) (<= 1 1)) (<= 0 |x@0|)) (<= 0 |x@0|)) (IMPLIES (AND (AND (IMPLIES (IMPLIES (LBLPOS |+63| TRUE) (IMPLIES (AND (AND (AND (<= 0 |held@1|) (<= |held@1| 1)) (<= 0 |x@2|)) (<= 0 |x@0|)) (IMPLIES (AND (AND (AND (<= 0 |held@1|) (<= |held@1| 1)) (<= 0 |x@2|)) (<= 0 |x@0|)) (IMPLIES (AND (IMPLIES (IMPLIES (LBLPOS |+69| TRUE) (IMPLIES (AND (AND (AND (<= 0 |held@1|) (<= |held@1| 1)) (<= 0 |x@2|)) (<= 0 |x@0|)) (IMPLIES (NEQ |x@2| |x@0|) (IMPLIES (AND (AND (AND (<= 0 |held@1|) (<= |held@1| 1)) (<= 0 |x@2|)) (<= 0 |x@0|)) (IMPLIES (AND (<= 0 |held@1|) (<= 0 |x@2|)) (AND (LBLNEG |@889| (EQ |held@1| 0)) (IMPLIES (EQ |held@1| 0) (IMPLIES FALSE (IMPLIES TRUE TRUE))))))))) (EQ |ContinueIteration_correct| |@true|)) (IMPLIES (IMPLIES (LBLPOS |+75| TRUE) (IMPLIES (AND (AND (AND (<= 0 |held@1|) (<= |held@1| 1)) (<= 0 |x@2|)) (<= 0 |x@0|)) (IMPLIES (EQ |x@2| |x@0|) (IMPLIES (AND (AND (AND (<= 0 |held@1|) (<= |held@1| 1)) (<= 0 |x@2|)) (<= 0 |x@0|)) (IMPLIES (IMPLIES (IMPLIES (LBLPOS |+84| TRUE) (IMPLIES (AND (AND (AND (<= 0 |held@1|) (<= |held@1| 1)) (<= 0 |x@2|)) (<= 0 |x@0|)) (AND (LBLNEG |@787| (EQ |held@1| 1)) (IMPLIES (EQ |held@1| 1) (IMPLIES (AND (AND (AND (<= 0 0) (<= 0 0)) (<= 0 |x@2|)) (<= 0 |x@0|)) (IMPLIES (IMPLIES (IMPLIES (LBLPOS |+460| TRUE) (IMPLIES (EQ |held@2| 0) (IMPLIES (IMPLIES (IMPLIES (LBLPOS |+449| TRUE) (IMPLIES (IMPLIES (IMPLIES (LBLPOS |+453| TRUE) (IMPLIES TRUE TRUE)) (EQ |ReallyLastGeneratedExit_correct| |@true|)) (EQ |ReallyLastGeneratedExit_correct| |@true|))) (EQ |GeneratedUnifiedExit_correct| |@true|)) (EQ |GeneratedUnifiedExit_correct| |@true|)))) (EQ |AfterLoop-2-GeneratedUnifiedExit_correct| |@true|)) (EQ |AfterLoop-2-GeneratedUnifiedExit_correct| |@true|))))))) (EQ |AfterLoop_correct| |@true|)) (EQ |AfterLoop_correct| |@true|)))))) (EQ |EndIteration_correct| |@true|))) (AND (EQ |ContinueIteration_correct| |@true|) (EQ |EndIteration_correct| |@true|)))))) (EQ |LoopEnd_correct| |@true|)) (IMPLIES (IMPLIES (LBLPOS |+456| TRUE) (IMPLIES (EQ |x@2| |x@0|) (IMPLIES (EQ |held@1| 1) (IMPLIES TRUE (EQ |LoopEnd_correct| |@true|))))) (EQ |LoopHead-2-LoopEnd_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+61| TRUE) (IMPLIES (AND (AND (AND (<= 1 1) (<= 1 1)) (<= 0 |x@0|)) (<= 0 |x@0|)) (AND (LBLNEG |@591| (EQ 1 1)) (IMPLIES (EQ 1 1) (IMPLIES (EQ |x@1| (+ |x@0| 1)) (IMPLIES (AND (AND (AND (<= 0 0) (<= 0 0)) (<= 1 |x@1|)) (<= 0 |x@0|)) (IMPLIES (IMPLIES (IMPLIES (LBLPOS |+458| TRUE) (IMPLIES (EQ |x@2| |x@1|) (IMPLIES (EQ |held@1| 0) (IMPLIES TRUE (EQ |LoopEnd_correct| |@true|))))) (EQ |UnlockNow-2-LoopEnd_correct| |@true|)) (EQ |UnlockNow-2-LoopEnd_correct| |@true|)))))))) (EQ |UnlockNow_correct| |@true|))) (AND (EQ |UnlockNow_correct| |@true|) (EQ |LoopHead-2-LoopEnd_correct| |@true|))))))) (EQ |LoopHead_correct| |@true|)) (EQ |LoopHead_correct| |@true|)))))))) (EQ |start_correct| |@true|)) (EQ |start_correct| |@true|))
; Undetermined

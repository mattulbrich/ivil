
//
// This file contains partial parser defition for programs only
//


ASTStatementList StatementList():
{
	List<ASTStatement> list = new ArrayList<ASTStatement>();
	ASTStatement st;
}
{
	( st=LabeledStatement() { list.add(st); } )+
	{ return new ASTStatementList(list); }
}

ASTStatement LabeledStatement():
{
	Token label;
	ASTStatement st;
}
{
	LOOKAHEAD(2)
	  ( label = <IDENTIFIER> ":" st=Statement() 
	     { return new ASTLabeledStatement(label, st); }
	  )
	|
	  ( st=Statement() { return st; } )
}

ASTStatement Statement():
{
	ASTTerm term;
	Token kw, t;
	List<Token> targets = new LinkedList<Token>();
}
{
	  kw="assert" term=Term() { return new ASTAssertStatement(kw, term); }
	| kw="assume" term=Term() { return new ASTAssumeStatement(kw, term); }
	| kw="end" term=Term() { return new ASTEndStatement(kw, term); }
	// TODO variant can be specified also
	| kw="skip_loopinv" term=Term() { return new ASTSkipStatement(kw, term); }
	| kw="skip" { return new ASTSkipStatement(kw); }
	| t=<IDENTIFIER> ":=" term=Term() { return new ASTAssignmentStatement(t, term); }
	| kw="goto" targets=Goto_Targets()
	     { return new ASTGotoStatement(kw, targets); }
	     
	| kw="source" t=<STRING> { return new ASTSourceStatement(kw, t); }
}

// TODO limit number of goals to 2? would not really matter ... 
// (even for switches ... cascade them)
List<Token> Goto_Targets():
{
    List<Token> targets = new LinkedList<Token>();
    Token t;
}
{
    (t=<IDENTIFIER>|t=<NATURAL>)
    { targets.add(t); }
    
    ( "," 
      (t=<IDENTIFIER>|t=<NATURAL>)
        { targets.add(t); }
    )?
    { return targets; }
}
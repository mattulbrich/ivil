<?xml version="1.0"?>
<proof format="1"><info>
    <date>Wed Mar 09 19:50:16 CET 2011</date>
    <version>0.0</version>
    <problem>|- [0;Dij]</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="auto_assume" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;(\forall y as node;$gte(weight(\var x as node,\var y as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[0;Dij] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="1">
      <find>S.0</find>
      <schemavariable name="%a">[1;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="2">
      <find>S.0.0</find>
      <schemavariable name="%a">[2;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="3">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) }([3;Dij] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="4">
      <find>S.0.2</find>
      <schemavariable name="%t">write(distance as map(node,int),start as node,0 as int) as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="5">
      <find>S.0.0</find>
      <schemavariable name="%a">[3;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="6">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := singleton(start as node) as set(node) }([4;Dij] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) || distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="7">
      <find>S.0.2</find>
      <schemavariable name="%t">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := emptyset as set(node) || distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="8">
      <find>S.0.0</find>
      <schemavariable name="%a">[4;Dij] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="9">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := emptyset as set(node) }([5;Dij] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="10">
      <find>S.0.3</find>
      <schemavariable name="%t">emptyset as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_loop_invariant_update" path="" id="11">
      <find>S.0</find>
      <schemavariable name="%inv">$and($and($and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,dom_distance as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[5;Dij] as bool</schemavariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0" id="12">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,dom_distance as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_in_anyset" path="0" id="13">
      <find>S.0.0.0.0.0.0.0</find>
      <schemavariable name="%s">singleton(start as node) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="2">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="14">
      <find>S.0.0.0.0.0.0</find>
      <schemavariable name="%a">$eq(read(write(distance as map(node,int),start as node,0 as int) as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="15">
      <find>S.0.0.0.0.0.0.0</find>
      <schemavariable name="%a2">start as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="16">
      <find>S.0.0.0.0.0.0.0.0</find>
      <schemavariable name="%t">start as node</schemavariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cond_true" path="0" id="17">
      <find>S.0.0.0.0.0.0.0</find>
      <schemavariable name="%b">read(distance as map(node,int),start as node) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="18">
      <find>S.0.0.0.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="19">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%a">$mem(start as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="20">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">start as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0" id="21">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%t">start as node</schemavariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="22">
      <find>S.0.0.0.0</find>
      <schemavariable name="%a">(\forall x as node;$impl($mem(\var x as node,singleton(start as node) as set(node)) as bool,$gte(read(write(distance as map(node,int),start as node,0 as int) as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="23">
      <find>S.0.0.0.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="24">
      <find>S.0.0.0.0.0.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="0" id="25">
      <find>S.0.0.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="26">
      <find>S.0.0.0.1.0.0.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="27">
      <find>S.0.0.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="28">
      <find>S.0.0.0.1.0.1.0.1.0</find>
      <schemavariable name="%a2">\var y as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="29">
      <find>S.0.0.0.1.0.1.0.1.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="30">
      <find>S.0.0.1.0.0.0.0.1</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="31">
      <find>S.0.0.1.0.0.1.0</find>
      <schemavariable name="%a2">\var b as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="32">
      <find>S.0.0.1.0.0.1.1.0</find>
      <schemavariable name="%a2">\var a as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="0" id="33">
      <find>S.0.1.0.0.0.1</find>
      <schemavariable name="%b">emptyset as set(node)</schemavariable>
      <schemavariable name="%a">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="34">
      <find>S.0.1.0.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="35">
      <find>S.0.1.0.0.1.0</find>
      <schemavariable name="%a2">\var a as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="0" id="36">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a2">\var b as node</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%a1">start as node</schemavariable>
      <schemavariable name="%m">distance as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0" id="37">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,emptyset as set(node)) as bool,$and($eq(\var b as node,start as node) as bool,$not($mem(\var b as node,emptyset as set(node)) as bool) as bool) as bool) as bool,$lte(cond($eq(start as node,\var a as node) as bool,0 as int,read(distance as map(node,int),\var a as node) as int) as int,cond($eq(start as node,\var b as node) as bool,0 as int,read(distance as map(node,int),\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and((\forall x as node;$impl($eq(\var x as node,start as node) as bool,$gte(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool,(\forall y as node;$impl($and($eq(\var y as node,start as node) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,emptyset as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,\var y as node) as bool,0 as int,read(distance as map(node,int),\var y as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,emptyset as set(node)) as bool,$eq(\var b as node,start as node) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(cond($eq(start as node,\var b as node) as bool,0 as int,read(distance as map(node,int),\var b as node) as int) as int,$plus(cond($eq(start as node,\var a as node) as bool,0 as int,read(distance as map(node,int),\var a as node) as int) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0" id="38">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,emptyset as set(node)) as bool,$eq(\var b as node,start as node) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(cond($eq(start as node,\var b as node) as bool,0 as int,read(distance as map(node,int),\var b as node) as int) as int,$plus(cond($eq(start as node,\var a as node) as bool,0 as int,read(distance as map(node,int),\var a as node) as int) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and((\forall x as node;$impl($eq(\var x as node,start as node) as bool,$gte(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool,(\forall y as node;$impl($and($eq(\var y as node,start as node) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,emptyset as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,\var y as node) as bool,0 as int,read(distance as map(node,int),\var y as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,0" id="39">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($eq(\var y as node,start as node) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,emptyset as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,\var y as node) as bool,0 as int,read(distance as map(node,int),\var y as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">(\forall x as node;$impl($eq(\var x as node,start as node) as bool,$gte(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,0,0" id="40">
      <find>S.0</find>
      <schemavariable name="%b">$impl($eq(\var x as node,start as node) as bool,$gte(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var x as node)">x</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,0,0" id="41">
      <find>S.0</find>
      <schemavariable name="%b">$gte(cond($eq(start as node,x as node) as bool,0 as int,read(distance as map(node,int),x as node) as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(x as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,0,0" id="42">
      <find>A.1</find>
      <schemavariable name="%u">start as node</schemavariable>
      <schemavariable name="%t">x as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,0,0" id="43">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,0,1" id="44">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($eq(\var y as node,start as node) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,emptyset as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,\var y as node) as bool,0 as int,read(distance as map(node,int),\var y as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,0,1" id="45">
      <find>S.0</find>
      <schemavariable name="%b">(\exists x as node;$and($and($mem(\var x as node,emptyset as set(node)) as bool,$mem(pair(\var x as node,y1 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(start as node,y1 as node) as bool,0 as int,read(distance as map(node,int),y1 as node) as int) as int,$plus(cond($eq(start as node,\var x as node) as bool,0 as int,read(distance as map(node,int),\var x as node) as int) as int,weight(\var x as node,y1 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(y1 as node,start as node) as bool,$not($eq(y1 as node,start as node) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,0,1" id="46">
      <find>A.1</find>
      <schemavariable name="%b">$not($eq(y1 as node,start as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$eq(y1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,0,0,1" id="47">
      <find>A.2</find>
      <schemavariable name="%b">$eq(y1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,0,1" id="48">
      <find>S.1</find>
      <assume>A.1</assume>
      <schemavariable name="%b">$eq(y1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1" id="49">
      <find>S.0</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($and($mem(\var a as node,emptyset as set(node)) as bool,$eq(\var b as node,start as node) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(cond($eq(start as node,\var b as node) as bool,0 as int,read(distance as map(node,int),\var b as node) as int) as int,$plus(cond($eq(start as node,\var a as node) as bool,0 as int,read(distance as map(node,int),\var a as node) as int) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a2</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1" id="50">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($and($mem(a2 as node,emptyset as set(node)) as bool,$eq(\var b as node,start as node) as bool) as bool,$mem(pair(a2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(cond($eq(start as node,\var b as node) as bool,0 as int,read(distance as map(node,int),\var b as node) as int) as int,$plus(cond($eq(start as node,a2 as node) as bool,0 as int,read(distance as map(node,int),a2 as node) as int) as int,weight(a2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1" id="51">
      <find>S.0</find>
      <schemavariable name="%b">$lte(cond($eq(start as node,b2 as node) as bool,0 as int,read(distance as map(node,int),b2 as node) as int) as int,$plus(cond($eq(start as node,a2 as node) as bool,0 as int,read(distance as map(node,int),a2 as node) as int) as int,weight(a2 as node,b2 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($mem(a2 as node,emptyset as set(node)) as bool,$eq(b2 as node,start as node) as bool) as bool,$mem(pair(a2 as node,b2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1" id="52">
      <find>A.1</find>
      <schemavariable name="%b">$mem(pair(a2 as node,b2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(a2 as node,emptyset as set(node)) as bool,$eq(b2 as node,start as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1" id="53">
      <find>A.1</find>
      <schemavariable name="%b">$eq(b2 as node,start as node) as bool</schemavariable>
      <schemavariable name="%a">$mem(a2 as node,emptyset as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1" id="54">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,1" id="55">
      <find>S.0</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,emptyset as set(node)) as bool,$and($eq(\var b as node,start as node) as bool,$not($mem(\var b as node,emptyset as set(node)) as bool) as bool) as bool) as bool,$lte(cond($eq(start as node,\var a as node) as bool,0 as int,read(distance as map(node,int),\var a as node) as int) as int,cond($eq(start as node,\var b as node) as bool,0 as int,read(distance as map(node,int),\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a1</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,1" id="56">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($mem(a1 as node,emptyset as set(node)) as bool,$and($eq(\var b as node,start as node) as bool,$not($mem(\var b as node,emptyset as set(node)) as bool) as bool) as bool) as bool,$lte(cond($eq(start as node,a1 as node) as bool,0 as int,read(distance as map(node,int),a1 as node) as int) as int,cond($eq(start as node,\var b as node) as bool,0 as int,read(distance as map(node,int),\var b as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1" id="57">
      <find>S.0</find>
      <schemavariable name="%b">$lte(cond($eq(start as node,a1 as node) as bool,0 as int,read(distance as map(node,int),a1 as node) as int) as int,cond($eq(start as node,b1 as node) as bool,0 as int,read(distance as map(node,int),b1 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(a1 as node,emptyset as set(node)) as bool,$and($eq(b1 as node,start as node) as bool,$not($mem(b1 as node,emptyset as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="58">
      <find>A.1</find>
      <schemavariable name="%b">$and($eq(b1 as node,start as node) as bool,$not($mem(b1 as node,emptyset as set(node)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(a1 as node,emptyset as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="59">
      <find>A.2</find>
      <schemavariable name="%b">$not($mem(b1 as node,emptyset as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$eq(b1 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,1" id="60">
      <find>A.3</find>
      <schemavariable name="%b">$mem(b1 as node,emptyset as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1" id="61">
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="62">
      <find>S.0</find>
      <schemavariable name="%v">nbors0 as set(node)</schemavariable>
      <schemavariable name="%a">[7;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
      <property name="skolemName(nbors0 as set(node))">nbors01</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="63">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors0 := nbors01 as set(node) }([8;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="64">
      <find>S.0.4</find>
      <schemavariable name="%t">nbors01 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="65">
      <find>S.0</find>
      <schemavariable name="%v">visited as set(node)</schemavariable>
      <schemavariable name="%a">[8;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) || nbors0 := nbors01 as set(node) }</schemaupdate>
      <property name="skolemName(visited as set(node))">visited1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="66">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := visited1 as set(node) }([9;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) || nbors0 := nbors01 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="67">
      <find>S.0.4</find>
      <schemavariable name="%t">visited1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || visited := emptyset as set(node) || nbors0 := nbors01 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="68">
      <find>S.0</find>
      <schemavariable name="%v">distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[9;Dij'] as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) }</schemaupdate>
      <property name="skolemName(distance as map(node,int))">distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="69">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := distance1 as map(node,int) }([10;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="70">
      <find>S.0.4</find>
      <schemavariable name="%t">distance1 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),start as node,0 as int) as map(node,int) || dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="71">
      <find>S.0</find>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[10;Dij'] as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) }</schemaupdate>
      <property name="skolemName(d as int)">d1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="72">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d1 as int }([11;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="73">
      <find>S.0.5</find>
      <schemavariable name="%t">d1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="74">
      <find>S.0</find>
      <schemavariable name="%v">nbors as set(node)</schemavariable>
      <schemavariable name="%a">[11;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int }</schemaupdate>
      <property name="skolemName(nbors as set(node))">nbors1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="75">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := nbors1 as set(node) }([12;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="76">
      <find>S.0.6</find>
      <schemavariable name="%t">nbors1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="77">
      <find>S.0</find>
      <schemavariable name="%v">n as node</schemavariable>
      <schemavariable name="%a">[12;Dij'] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) }</schemaupdate>
      <property name="skolemName(n as node)">n1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="78">
      <find>S.0</find>
      <schemavariable name="%t">{ n := n1 as node }([13;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="79">
      <find>S.0.7</find>
      <schemavariable name="%t">n1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="80">
      <find>S.0</find>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[13;Dij'] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node }</schemaupdate>
      <property name="skolemName(o as node)">o1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="81">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o1 as node }([14;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="82">
      <find>S.0.8</find>
      <schemavariable name="%t">o1 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="83">
      <find>S.0</find>
      <schemavariable name="%v">old_distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[14;Dij'] as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node }</schemaupdate>
      <property name="skolemName(old_distance as map(node,int))">old_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="84">
      <find>S.0</find>
      <schemavariable name="%t">{ old_distance := old_distance1 as map(node,int) }([15;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="85">
      <find>S.0.9</find>
      <schemavariable name="%t">old_distance1 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="86">
      <find>S.0</find>
      <schemavariable name="%v">old_dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[15;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) }</schemaupdate>
      <property name="skolemName(old_dom_distance as set(node))">old_dom_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="87">
      <find>S.0</find>
      <schemavariable name="%t">{ old_dom_distance := old_dom_distance1 as set(node) }([16;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="88">
      <find>S.0.10</find>
      <schemavariable name="%t">old_dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1" id="89">
      <find>S.0</find>
      <schemavariable name="%v">dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[16;Dij'] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) }</schemaupdate>
      <property name="skolemName(dom_distance as set(node))">dom_distance1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="90">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := dom_distance1 as set(node) }([17;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="91">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance1 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := singleton(start as node) as set(node) || nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1" id="92">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,dom_distance as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="93">
      <find>A.1</find>
      <schemavariable name="%t">$and($and($and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,dom_distance as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="94">
      <find>A.1</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool,$lte(read(distance1 as map(node,int),\var a as node) as int,read(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited1 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,dom_distance1 as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="95">
      <find>A.1</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited1 as set(node)) as bool,$mem(\var b as node,dom_distance1 as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited1 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="96">
      <find>A.1</find>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited1 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="97">
      <find>A.1</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="98">
      <find>A.1</find>
      <schemavariable name="%b">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset(visited1 as set(node),dom_distance1 as set(node)) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="99">
      <find>A.1</find>
      <schemavariable name="%b">$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$subset(visited1 as set(node),dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1" id="100">
      <find>A.2.0.0.0.1</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1" id="101">
      <find>A.4.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1" id="102">
      <find>A.4.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1" id="103">
      <find>S.0</find>
      <schemavariable name="%k">48 as int</schemavariable>
      <schemavariable name="%n">19 as int</schemavariable>
      <schemavariable name="%a">[18;Dij'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0" id="104">
      <find>S.0</find>
      <schemavariable name="%b">$not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[19;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="105">
      <find>A.8</find>
      <schemavariable name="%t">$not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,0" id="106">
      <find>A.8.0</find>
      <schemavariable name="%s">$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0" id="107">
      <find>A.8</find>
      <schemavariable name="%b">(\forall xx as node;$not($mem(\var xx as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0" id="108">
      <find>S.1</find>
      <schemavariable name="%b">$not($mem(\var xx as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var xx as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var xx as node)">xx</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0" id="109">
      <find>S.1</find>
      <schemavariable name="%b">$mem(xx as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0" id="110">
      <find>A.8</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">xx as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0" id="111">
      <find>A.8</find>
      <schemavariable name="%b">$not($mem(xx as node,visited1 as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(xx as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0" id="112">
      <find>A.9</find>
      <schemavariable name="%b">$mem(xx as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0" id="113">
      <find>S.0</find>
      <schemavariable name="%b">(\exists n as node;$and($and($not($mem(\var n as node,visited as set(node)) as bool) as bool,$mem(\var n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),\var n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[20;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,0" id="114">
      <find>S.0</find>
      <schemavariable name="%t">(\exists n as node;$and($and($not($mem(\var n as node,visited as set(node)) as bool) as bool,$mem(\var n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),\var n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,0" id="115">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var m as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="OOPS" path="1,0,0" id="116">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1" id="117">
      <find>S.0</find>
      <schemavariable name="%v">n as node</schemavariable>
      <schemavariable name="%a">[21;Dij'] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
      <property name="skolemName(n as node)">n2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="118">
      <find>S.0</find>
      <schemavariable name="%t">{ n := n2 as node }([22;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="119">
      <find>S.0.10</find>
      <schemavariable name="%t">n2 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1" id="120">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($not($mem(n as node,visited as set(node)) as bool) as bool,$mem(n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[22;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="121">
      <find>A.9</find>
      <schemavariable name="%t">$and($and($not($mem(n as node,visited as set(node)) as bool) as bool,$mem(n as node,dom_distance as set(node)) as bool) as bool,(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool,$lte(read(distance as map(node,int),n as node) as int,read(distance as map(node,int),\var m as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1" id="122">
      <find>A.9</find>
      <schemavariable name="%b">(\forall m as node;$impl($mem(\var m as node,$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool,$lte(read(distance1 as map(node,int),n2 as node) as int,read(distance1 as map(node,int),\var m as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($not($mem(n2 as node,visited1 as set(node)) as bool) as bool,$mem(n2 as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1" id="123">
      <find>A.9</find>
      <schemavariable name="%b">$mem(n2 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$not($mem(n2 as node,visited1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1" id="124">
      <find>A.9</find>
      <schemavariable name="%b">$mem(n2 as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1" id="125">
      <find>A.9.0.0</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var m as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1" id="126">
      <find>S.0.0</find>
      <schemavariable name="%a">[23;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ visited := $union(visited as set(node),singleton(n as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="127">
      <find>S.0</find>
      <schemavariable name="%t">{ visited := $union(visited as set(node),singleton(n as node) as set(node)) as set(node) }([24;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="128">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(visited as set(node),singleton(n as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1" id="129">
      <find>S.0</find>
      <schemavariable name="%b">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <schemavariable name="%a">[24;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,0" id="130">
      <find>S.0</find>
      <schemavariable name="%t">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="OOPS" path="1,0,1,0" id="131">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1" id="132">
      <find>S.0</find>
      <schemavariable name="%b">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <schemavariable name="%a">[25;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="133">
      <find>A.11</find>
      <schemavariable name="%t">$subset(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="134">
      <find>S.0.0</find>
      <schemavariable name="%a">[26;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ old_distance := distance as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="135">
      <find>S.0</find>
      <schemavariable name="%t">{ old_distance := distance as map(node,int) }([27;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="136">
      <find>S.0.10</find>
      <schemavariable name="%t">distance as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="137">
      <find>S.0.0</find>
      <schemavariable name="%a">[27;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ old_dom_distance := dom_distance as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="138">
      <find>S.0</find>
      <schemavariable name="%t">{ old_dom_distance := dom_distance as set(node) }([28;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="139">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="140">
      <find>S.0.0</find>
      <schemavariable name="%a">[28;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := (\set k as node;$and($mem(pair(n as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,visited as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="141">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors0 := (\set k as node;$and($mem(pair(n as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,visited as set(node)) as bool) as bool) as bool) as set(node) }([29;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="142">
      <find>S.0.10</find>
      <schemavariable name="%t">(\set k as node;$and($mem(pair(n as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,visited as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="143">
      <find>S.0.0</find>
      <schemavariable name="%a">[29;Dij'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors := nbors0 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="144">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := nbors0 as set(node) }([30;Dij'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="145">
      <find>S.0.10</find>
      <schemavariable name="%t">nbors0 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_loop_invariant_update" path="1,0,1,1" id="146">
      <find>S.0</find>
      <schemavariable name="%inv">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[30;Dij'] as bool</schemavariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,0" id="147">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,0,1,1,0" id="148">
      <find>S.0.0.0.0.0.0.0.0.0.1.0.1</find>
      <schemavariable name="%t">read(distance1 as map(node,int),\var r as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_r" path="1,0,1,1,0" id="149">
      <find>S.0.0.0.0.0.0.0.0.0.1.0</find>
      <schemavariable name="%b">$mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="150">
      <find>S.0.0.0.0.0.0.0.0.0.0</find>
      <schemavariable name="%a">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="151">
      <find>S.0.0.0.0.0.0.0.0.0</find>
      <schemavariable name="%a">(\forall r as node;true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="152">
      <find>S.0.0.0.0.0.0.0.0.1</find>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="1">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,0,1,1,0" id="153">
      <find>S.0.0.0.0.0.0.0.0</find>
      <schemavariable name="%a">(\forall r as node;true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,0" id="154">
      <find>S.0.0.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,0" id="155">
      <find>S.0.0.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,0" id="156">
      <find>S.0.0.1.0.0.0</find>
      <schemavariable name="%b">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,0" id="157">
      <find>S.0.1.0.0.0.1</find>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0" id="158">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance1 as map(node,int),\var a as node) as int,read(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($and((\forall r as node;true as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0" id="159">
      <find>S.0</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and((\forall r as node;true as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0,0" id="160">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and((\forall r as node;true as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0,0,0" id="161">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and((\forall r as node;true as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance1 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0,0,0,0" id="162">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($and((\forall r as node;true as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0,0,0,0,0" id="163">
      <find>S.0</find>
      <schemavariable name="%b">$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$and((\forall r as node;true as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0,0,0,0,0,0,0" id="164">
      <find>S.0</find>
      <schemavariable name="%b">(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">(\forall r as node;true as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,0,0,0,0,0,0,0" id="165">
      <find>S.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%x">\var r as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var r as node)">r</property>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,0,0,0,0,0,0,0,0" id="166">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,0,0,0,0,0,0,1" id="167">
      <find>S.0</find>
      <schemavariable name="%b">$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance1 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var s as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var s as node)">s1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,0,0,0,0,0,0,1" id="168">
      <find>S.0</find>
      <schemavariable name="%b">$lte(read(distance1 as map(node,int),s1 as node) as int,read(distance1 as map(node,int),s1 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(s1 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,0,0,0,0,0,0,1" id="169">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0,0,0,0,0,1" id="170">
      <find>S.0</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$eq(read(distance1 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0,0,0,0,1" id="171">
      <find>S.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0,0,0,1" id="172">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance1 as set(node)) as bool,$gte(read(distance1 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,0,0,1" id="173">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($mem(\var y as node,dom_distance1 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,0,0,1" id="174">
      <find>S.0</find>
      <schemavariable name="%b">(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,y2 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),y2 as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,y2 as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(y2 as node,dom_distance1 as set(node)) as bool,$not($eq(y2 as node,start as node) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,0,0,1" id="175">
      <find>A.12</find>
      <schemavariable name="%b">$not($eq(y2 as node,start as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(y2 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,0,0,0,1" id="176">
      <find>A.13</find>
      <schemavariable name="%b">$eq(y2 as node,start as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,0,0,1" id="177">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,0,1" id="178">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b4</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,0,1" id="179">
      <find>S.0</find>
      <schemavariable name="%b">$lte(read(distance1 as map(node,int),b4 as node) as int,$plus(read(distance1 as map(node,int),n2 as node) as int,weight(n2 as node,b4 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($mem(b4 as node,dom_distance1 as set(node)) as bool,$not($mem(b4 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool,$mem(pair(n2 as node,b4 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,0,1" id="180">
      <find>A.12</find>
      <schemavariable name="%b">$mem(pair(n2 as node,b4 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(b4 as node,dom_distance1 as set(node)) as bool,$not($mem(b4 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,0,1" id="181">
      <find>A.12</find>
      <schemavariable name="%b">$not($mem(b4 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(b4 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,0,0,1" id="182">
      <find>A.14</find>
      <schemavariable name="%b">$mem(b4 as node,(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_setext" path="1,0,1,1,0,0,1" id="183">
      <find>S.3</find>
      <schemavariable name="%x">\var k as node</schemavariable>
      <schemavariable name="%a">b4 as node</schemavariable>
      <schemavariable name="%b">$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,0,1,1,0,0,1" id="184">
      <find>S.3.0</find>
      <assume>A.13</assume>
      <schemavariable name="%b">$mem(pair(n2 as node,b4 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0,0,1" id="185">
      <find>S.3</find>
      <schemavariable name="%a">$not($mem(b4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,0,0,1" id="186">
      <find>S.3</find>
      <schemavariable name="%b">$mem(b4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,0,0,1" id="187">
      <find>A.14</find>
      <schemavariable name="%x">b4 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,0,0,1" id="188">
      <find>A.14.1</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">b4 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,0,1" id="189">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1" id="190">
      <find>S.0</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance1 as map(node,int),\var a as node) as int,read(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a3</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0,1" id="191">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($mem(a3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance1 as map(node,int),a3 as node) as int,read(distance1 as map(node,int),\var b as node) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b3</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,0,1" id="192">
      <find>S.0</find>
      <schemavariable name="%b">$lte(read(distance1 as map(node,int),a3 as node) as int,read(distance1 as map(node,int),b3 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(a3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(b3 as node,dom_distance1 as set(node)) as bool,$not($mem(b3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1" id="193">
      <find>A.12</find>
      <schemavariable name="%b">$and($mem(b3 as node,dom_distance1 as set(node)) as bool,$not($mem(b3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(a3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,0,1" id="194">
      <find>A.13</find>
      <schemavariable name="%b">$not($mem(b3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(b3 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,0,1" id="195">
      <find>A.14</find>
      <schemavariable name="%b">$mem(b3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,0,1" id="196">
      <find>S.3</find>
      <schemavariable name="%x">b3 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_right" path="1,0,1,1,0,1" id="197">
      <find>S.3</find>
      <schemavariable name="%a">$mem(b3 as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(b3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,0,1" id="198">
      <find>A.2</find>
      <schemavariable name="%inst">a3 as node</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,visited1 as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance1 as map(node,int),\var a as node) as int,read(distance1 as map(node,int),\var b as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,0,1" id="199">
      <find>A.14</find>
      <schemavariable name="%inst">b3 as node</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a3 as node,visited1 as set(node)) as bool,$and($mem(\var b as node,dom_distance1 as set(node)) as bool,$not($mem(\var b as node,visited1 as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance1 as map(node,int),a3 as node) as int,read(distance1 as map(node,int),\var b as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="replace_known_right" path="1,0,1,1,0,1" id="200">
      <find>A.15.1</find>
      <assume>S.0</assume>
      <schemavariable name="%b">$lte(read(distance1 as map(node,int),a3 as node) as int,read(distance1 as map(node,int),b3 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_right" path="1,0,1,1,0,1" id="201">
      <find>A.15.0.1.1.0</find>
      <assume>S.3</assume>
      <schemavariable name="%b">$mem(b3 as node,visited1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,0,1,1,0,1" id="202">
      <find>A.15.0.1.0</find>
      <assume>A.13</assume>
      <schemavariable name="%b">$mem(b3 as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,0,1" id="203">
      <find>A.12</find>
      <schemavariable name="%x">a3 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,0,1" id="204">
      <find>A.12</find>
      <schemavariable name="%a">$mem(a3 as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(a3 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,0" id="205">
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,0,1,1" id="206">
      <find>A.12</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">a3 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,1" id="207">
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="208">
      <find>S.0</find>
      <schemavariable name="%v">distance as map(node,int)</schemavariable>
      <schemavariable name="%a">[32;Dij''] as bool</schemavariable>
      <typevariable name="v">map(node,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
      <property name="skolemName(distance as map(node,int))">distance2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="209">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := distance2 as map(node,int) }([33;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="210">
      <find>S.0.10</find>
      <schemavariable name="%t">distance2 as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ distance := distance1 as map(node,int) || d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="211">
      <find>S.0</find>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[33;Dij''] as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) }</schemaupdate>
      <property name="skolemName(d as int)">d2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="212">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d2 as int }([34;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="213">
      <find>S.0.10</find>
      <schemavariable name="%t">d2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ d := d1 as int || o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="214">
      <find>S.0</find>
      <schemavariable name="%v">nbors as set(node)</schemavariable>
      <schemavariable name="%a">[34;Dij''] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int }</schemaupdate>
      <property name="skolemName(nbors as set(node))">nbors2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="215">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := nbors2 as set(node) }([35;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="216">
      <find>S.0.10</find>
      <schemavariable name="%t">nbors2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || nbors := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="217">
      <find>S.0</find>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[35;Dij''] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) }</schemaupdate>
      <property name="skolemName(o as node)">o2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="218">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o2 as node }([36;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="219">
      <find>S.0.10</find>
      <schemavariable name="%t">o2 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ o := o1 as node || dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1" id="220">
      <find>S.0</find>
      <schemavariable name="%v">dom_distance as set(node)</schemavariable>
      <schemavariable name="%a">[36;Dij''] as bool</schemavariable>
      <typevariable name="v">set(node)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node }</schemaupdate>
      <property name="skolemName(dom_distance as set(node))">dom_distance2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="221">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := dom_distance2 as set(node) }([37;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="222">
      <find>S.0.10</find>
      <schemavariable name="%t">dom_distance2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ dom_distance := dom_distance1 as set(node) || n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1" id="223">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[37;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="224">
      <find>A.12</find>
      <schemavariable name="%t">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="225">
      <find>A.12</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,$diff(dom_distance2 as set(node),$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as set(node)) as bool) as bool,$lte(read(distance2 as map(node,int),\var a as node) as int,read(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($and($and($and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="226">
      <find>A.12</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance2 as set(node),nbors2 as set(node)) as set(node)) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($and($and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="227">
      <find>A.12</find>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance2 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="228">
      <find>A.12</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="229">
      <find>A.12</find>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="230">
      <find>A.12</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="231">
      <find>A.12</find>
      <schemavariable name="%b">(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="232">
      <find>A.12</find>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="233">
      <find>A.12</find>
      <schemavariable name="%b">(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$subset(nbors2 as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1" id="234">
      <find>A.13.0.0.0.1</find>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1" id="235">
      <find>A.14.0.0.0</find>
      <schemavariable name="%b">nbors2 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1" id="236">
      <find>A.15.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1" id="237">
      <find>A.15.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,0,1,1,1" id="238">
      <find>S.0</find>
      <schemavariable name="%k">53 as int</schemavariable>
      <schemavariable name="%n">39 as int</schemavariable>
      <schemavariable name="%a">[38;Dij''] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0" id="239">
      <find>S.0</find>
      <schemavariable name="%b">(\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[39;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0" id="240">
      <find>A.22</find>
      <schemavariable name="%t">(\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,0,1,1,1,0" id="241">
      <find>A.22</find>
      <schemavariable name="%b">$mem(\var t as node,nbors2 as set(node)) as bool</schemavariable>
      <schemavariable name="%x">\var t as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var t as node)">t</property>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0" id="242">
      <find>S.0</find>
      <schemavariable name="%b">(\exists o as node;$mem(\var o as node,nbors as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[40;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,0" id="243">
      <find>S.0</find>
      <schemavariable name="%t">(\exists o as node;$mem(\var o as node,nbors as set(node)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,0" id="244">
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,0,1,1,1,0,1" id="245">
      <find>S.0</find>
      <schemavariable name="%v">o as node</schemavariable>
      <schemavariable name="%a">[41;Dij''] as bool</schemavariable>
      <typevariable name="v">node</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
      <property name="skolemName(o as node)">o3</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="246">
      <find>S.0</find>
      <schemavariable name="%t">{ o := o3 as node }([42;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="247">
      <find>S.0.10</find>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0,1" id="248">
      <find>S.0</find>
      <schemavariable name="%b">$mem(o as node,nbors as set(node)) as bool</schemavariable>
      <schemavariable name="%a">[42;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="249">
      <find>A.23</find>
      <schemavariable name="%t">$mem(o as node,nbors as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1" id="250">
      <find>S.0.0</find>
      <schemavariable name="%a">[43;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors := $diff(nbors as set(node),singleton(o as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="251">
      <find>S.0</find>
      <schemavariable name="%t">{ nbors := $diff(nbors as set(node),singleton(o as node) as set(node)) as set(node) }([44;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="252">
      <find>S.0.10</find>
      <schemavariable name="%t">$diff(nbors as set(node),singleton(o as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || dom_distance := dom_distance2 as set(node) || o := o3 as node }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0,1" id="253">
      <find>S.0</find>
      <schemavariable name="%b">$mem(pair(n as node,o as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">[44;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="254">
      <find>S.0</find>
      <schemavariable name="%t">$mem(pair(n as node,o as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,0" id="255">
      <find>A.23</find>
      <assume>A.12</assume>
      <schemavariable name="%x">o3 as node</schemavariable>
      <schemavariable name="%t">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <schemavariable name="%s">nbors2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_setext" path="1,0,1,1,1,0,1,0" id="256">
      <find>A.24</find>
      <schemavariable name="%x">\var k as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,0" id="257">
      <find>A.24</find>
      <schemavariable name="%b">$not($mem(o3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(pair(n2 as node,o3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,0" id="258">
      <find>S.0</find>
      <assume>A.24</assume>
      <schemavariable name="%b">$mem(pair(n2 as node,o3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1" id="259">
      <find>S.0.0</find>
      <schemavariable name="%a">[45;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ d := $plus(read(distance as map(node,int),n as node) as int,weight(n as node,o as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1" id="260">
      <find>S.0</find>
      <schemavariable name="%t">{ d := $plus(read(distance as map(node,int),n as node) as int,weight(n as node,o as node) as int) as int }([46;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1" id="261">
      <find>S.0.10</find>
      <schemavariable name="%t">$plus(read(distance as map(node,int),n as node) as int,weight(n as node,o as node) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,0,1,1,1,0,1,1" id="262">
      <find>S.0</find>
      <schemavariable name="%k">51 as int</schemavariable>
      <schemavariable name="%n">47 as int</schemavariable>
      <schemavariable name="%a">[46;Dij''] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0,1,1,0" id="263">
      <find>S.0</find>
      <schemavariable name="%b">$or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),o as node) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[47;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="264">
      <find>A.24</find>
      <schemavariable name="%t">$or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),o as node) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1,0" id="265">
      <find>S.0.0</find>
      <schemavariable name="%a">[48;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ dom_distance := $union(dom_distance as set(node),singleton(o as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="266">
      <find>S.0</find>
      <schemavariable name="%t">{ dom_distance := $union(dom_distance as set(node),singleton(o as node) as set(node)) as set(node) }([49;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="267">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(dom_distance as set(node),singleton(o as node) as set(node)) as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,1,0" id="268">
      <find>S.0.0</find>
      <schemavariable name="%a">[49;Dij''] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ distance := write(distance as map(node,int),o as node,d as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="269">
      <find>S.0</find>
      <schemavariable name="%t">{ distance := write(distance as map(node,int),o as node,d as int) as map(node,int) }([50;Dij''] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="270">
      <find>S.0.10</find>
      <schemavariable name="%t">write(distance as map(node,int),o as node,d as int) as map(node,int)</schemavariable>
      <typevariable name="t">map(node,int)</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,0" id="271">
      <find>S.0.0</find>
      <schemavariable name="%n">52 as int</schemavariable>
      <schemavariable name="%a">[50;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,0" id="272">
      <find>S.0.0</find>
      <schemavariable name="%n">30 as int</schemavariable>
      <schemavariable name="%a">[52;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0,1,1,0" id="273">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[30;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := write(distance2 as map(node,int),o3 as node,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,0" id="274">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := write(distance2 as map(node,int),o3 as node,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="275">
      <find>S.0.0.0.0.0.0.0.0.0.1.0.1.0</find>
      <schemavariable name="%a2">\var r as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="276">
      <find>S.0.0.0.0.0.0.0.1.0.1.0</find>
      <schemavariable name="%a2">\var s as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="277">
      <find>S.0.0.0.0.0.0.1.0</find>
      <schemavariable name="%a2">start as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="278">
      <find>S.0.0.0.0.1.0.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,0" id="279">
      <find>S.0.0.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0" id="280">
      <find>S.0.0.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="281">
      <find>S.0.0.0.1.0.1.0.1.0</find>
      <schemavariable name="%a2">\var y as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="282">
      <find>S.0.0.0.1.0.1.0.1.1.0</find>
      <schemavariable name="%a2">\var x as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,0" id="283">
      <find>S.0.0.1.0.0.0</find>
      <schemavariable name="%b">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,0" id="284">
      <find>S.0.0.1.0.0.0.1.0</find>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0" id="285">
      <find>S.0.0.1.0.0.0.1.0.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="286">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%a2">\var b as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="287">
      <find>S.0.0.1.0.1.1.0</find>
      <schemavariable name="%a2">n2 as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,0,0" id="288">
      <find>S.0.1.0.0.0.1</find>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="289">
      <find>S.0.1.0.0.1.0</find>
      <schemavariable name="%a2">\var a as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,0,1,1,1,0,1,1,0,0" id="290">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a2">\var b as node</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%a1">o3 as node</schemavariable>
      <schemavariable name="%m">distance2 as map(node,int)</schemavariable>
      <typevariable name="a1">node</typevariable>
      <typevariable name="m">map(node,int)</typevariable>
      <typevariable name="a2">node</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,0" id="291">
      <find>S.0</find>
      <schemavariable name="%a">$and($and($and($and($and($and($and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(cond($eq(o3 as node,\var r as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var r as node) as int) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(cond($eq(o3 as node,\var s as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var s as node) as int) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(cond($eq(o3 as node,start as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),start as node) as int) as int,0 as int) as bool) as bool,$mem(start as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$gte(cond($eq(o3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($and($mem(\var y as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(cond($eq(o3 as node,\var y as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var y as node) as int) as int,$plus(cond($eq(o3 as node,\var x as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var x as node) as int) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($and($mem(\var b as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$not($and($mem(\var b as node,nbors2 as set(node)) as bool,$not($eq(\var b as node,o3 as node) as bool) as bool) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(cond($eq(o3 as node,\var b as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var b as node) as int) as int,$plus(cond($eq(o3 as node,n2 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),n2 as node) as int) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(cond($eq(o3 as node,\var a as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var a as node) as int) as int,cond($eq(o3 as node,\var b as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="OOPS" path="1,0,1,1,1,0,1,1,0,0,0" id="292">
      <find>A.24.0.0</find>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,0,1" id="293">
      <find>S.0</find>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(cond($eq(o3 as node,\var a as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var a as node) as int) as int,cond($eq(o3 as node,\var b as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a7</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,0,0,1" id="294">
      <find>S.0</find>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and($mem(a7 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(cond($eq(o3 as node,a7 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),a7 as node) as int) as int,cond($eq(o3 as node,\var b as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),\var b as node) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b11</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,0,0,1" id="295">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(a7 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(b11 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$lte(cond($eq(o3 as node,a7 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),a7 as node) as int) as int,cond($eq(o3 as node,b11 as node) as bool,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),b11 as node) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,0,1" id="296">
      <find>A.25</find>
      <schemavariable name="%a">$mem(a7 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(b11 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool,$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,0,1" id="297">
      <find>A.26</find>
      <schemavariable name="%a">$mem(b11 as node,$union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,0,1" id="298">
      <find>A.27</find>
      <schemavariable name="%b">$mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1" id="299">
      <find>S.3</find>
      <schemavariable name="%x">b11 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_right" path="1,0,1,1,1,0,1,1,0,0,1" id="300">
      <find>S.3</find>
      <schemavariable name="%a">$mem(b11 as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(b11 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1" id="301">
      <find>S.4</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">b11 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,0,1" id="302">
      <find>S.0.0</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">read(distance2 as map(node,int),a7 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,a7 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,0" id="303">
      <find>A.27</find>
      <schemavariable name="%u">a7 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,0" id="304">
      <find>A.25</find>
      <schemavariable name="%x">a7 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,0" id="305">
      <find>A.25.1</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">a7 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,0,1,0" id="306">
      <find>S.0.1</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">read(distance2 as map(node,int),b11 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,b11 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="lte_to_lt" path="1,0,1,1,1,0,1,1,0,0,1,0,0" id="307">
      <find>S.0</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,0,1,1,1,0,1,1,0,0,1,0,0" id="308">
      <find>S.0.1</find>
      <schemavariable name="%t">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_true_r" path="1,0,1,1,1,0,1,1,0,0,1,0,0" id="309">
      <find>S.0</find>
      <schemavariable name="%a">$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,0,0,1,0,0" id="310">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,0,1" id="311">
      <find>A.26</find>
      <schemavariable name="%x">b11 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,0,1" id="312">
      <find>A.26.1</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">b11 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_comm" path="1,0,1,1,1,0,1,1,0,0,1,0,1" id="313">
      <find>A.26.1</find>
      <schemavariable name="%u">o3 as node</schemavariable>
      <schemavariable name="%t">b11 as node</schemavariable>
      <typevariable name="u">node</typevariable>
      <typevariable name="t">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_right" path="1,0,1,1,1,0,1,1,0,0,1,0,1" id="314">
      <find>A.26.1</find>
      <assume>S.5</assume>
      <schemavariable name="%b">$eq(o3 as node,b11 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_false_r" path="1,0,1,1,1,0,1,1,0,0,1,0,1" id="315">
      <find>A.26</find>
      <schemavariable name="%a">$mem(b11 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cutOnThat" path="1,0,1,1,1,0,1,1,0,0,1,0,1" id="316">
      <find>A.24.0.0</find>
      <schemavariable name="%c">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="c">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0" id="317">
      <find>A.24</find>
      <schemavariable name="%a">$not(true as bool) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,0" id="318">
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,1" id="319">
      <find>A.23</find>
      <assume>A.12</assume>
      <schemavariable name="%x">o3 as node</schemavariable>
      <schemavariable name="%t">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <schemavariable name="%s">nbors2 as set(node)</schemavariable>
      <typevariable name="t">set(node)</typevariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_setext" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,1" id="320">
      <find>A.29</find>
      <schemavariable name="%x">\var k as node</schemavariable>
      <schemavariable name="%a">o3 as node</schemavariable>
      <schemavariable name="%b">$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,1" id="321">
      <find>A.29</find>
      <schemavariable name="%a">$mem(pair(n2 as node,o3 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(o3 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,1" id="322">
      <find>A.30.0</find>
      <schemavariable name="%x">o3 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,1" id="323">
      <find>A.30.0.1</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">o3 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,1" id="324">
      <find>A.30</find>
      <schemavariable name="%b">$or($mem(o3 as node,visited1 as set(node)) as bool,$eq(o3 as node,n2 as node) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,0,1,0,1" id="325">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,0,1,1" id="326">
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,0,1,1,0,0,1,1" id="327">
      <find>A.13</find>
      <schemavariable name="%inst">a7 as node</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance2 as map(node,int),\var a as node) as int,read(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,0,1,1,1,0,1,1,0,0,1,1" id="328">
      <find>A.27.0.0.0</find>
      <assume>A.25</assume>
      <schemavariable name="%b">$mem(a7 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,1,0,0,1,1" id="329">
      <find>S.0.1</find>
      <schemavariable name="%a">$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int</schemavariable>
      <schemavariable name="%b">read(distance2 as map(node,int),b11 as node) as int</schemavariable>
      <schemavariable name="%c">$eq(o3 as node,b11 as node) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,1,0,1,1,0,0,1,1,0" id="330">
      <find>A.27.0.0</find>
      <schemavariable name="%a">$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,1,0" id="331">
      <find>A.25</find>
      <schemavariable name="%x">a7 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0" id="332">
      <find>A.25</find>
      <schemavariable name="%a">$mem(a7 as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(a7 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0" id="333">
      <find>A.21</find>
      <schemavariable name="%inst">a7 as node</schemavariable>
      <schemavariable name="%x">\var r as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0" id="334">
      <find>A.21</find>
      <schemavariable name="%inst">n2 as node</schemavariable>
      <schemavariable name="%x">\var r as node</schemavariable>
      <schemavariable name="%b">$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0" id="335">
      <find>A.28</find>
      <schemavariable name="%u">b11 as node</schemavariable>
      <schemavariable name="%t">o3 as node</schemavariable>
      <typevariable name="t">node</typevariable>
      <typevariable name="u">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0" id="336">
      <find>A.24</find>
      <schemavariable name="%b">$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0" id="337">
      <find>A.24</find>
      <schemavariable name="%b">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0" id="338">
      <find>A.28</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),a7 as node) as int,read(distance1 as map(node,int),a7 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(a7 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0" id="339">
      <find>A.28</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),n2 as node) as int,read(distance1 as map(node,int),n2 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(n2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0" id="340">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1" id="341">
      <find>A.28</find>
      <schemavariable name="%u">read(distance1 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1" id="342">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1" id="343">
      <find>A.28</find>
      <schemavariable name="%u">read(distance1 as map(node,int),a7 as node) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),a7 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1" id="344">
      <find>A.29</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),n2 as node) as int,read(distance1 as map(node,int),n2 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(n2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0" id="345">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1" id="346">
      <find>A.29</find>
      <schemavariable name="%u">read(distance1 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1" id="347">
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1" id="348">
      <find>A.29</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),a7 as node) as int,read(distance1 as map(node,int),a7 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(a7 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0" id="349">
      <find>A.29</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),n2 as node) as int,read(distance1 as map(node,int),n2 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(n2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0" id="350">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1" id="351">
      <find>A.29</find>
      <schemavariable name="%u">read(distance1 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1" id="352">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1" id="353">
      <find>A.29</find>
      <schemavariable name="%u">read(distance1 as map(node,int),a7 as node) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),a7 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1" id="354">
      <find>A.30</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),n2 as node) as int,read(distance1 as map(node,int),n2 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$mem(n2 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0" id="355">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1" id="356">
      <find>A.30</find>
      <schemavariable name="%u">read(distance1 as map(node,int),n2 as node) as int</schemavariable>
      <schemavariable name="%t">read(distance2 as map(node,int),n2 as node) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1" id="357">
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,1,0,1" id="358">
      <find>A.25</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">a7 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,0,1" id="359">
    </ruleApplication>
    <ruleApplication rule="forall_left" path="1,0,1,1,1,0,1,1,0,0,1,1,1" id="360">
      <find>A.27</find>
      <schemavariable name="%inst">b11 as node</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <schemavariable name="%b">$impl($and(true as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance2 as map(node,int),a7 as node) as int,read(distance2 as map(node,int),\var b as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">node</typevariable>
      <property name="interact(%inst)">node</property>
    </ruleApplication>
    <ruleApplication rule="replace_known_right" path="1,0,1,1,1,0,1,1,0,0,1,1,1" id="361">
      <find>A.28.1</find>
      <assume>S.0</assume>
      <schemavariable name="%b">$lte(read(distance2 as map(node,int),a7 as node) as int,read(distance2 as map(node,int),b11 as node) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,1,0,1,1,0,0,1,1,1" id="362">
      <find>A.27.0.0</find>
      <schemavariable name="%a">$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_r" path="1,0,1,1,1,0,1,1,0,0,1,1,1" id="363">
      <find>A.28</find>
      <schemavariable name="%b">$and(true as bool,$and($mem(b11 as node,dom_distance2 as set(node)) as bool,$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,1,0,1,1,0,0,1,1,1" id="364">
      <find>A.28.0</find>
      <schemavariable name="%a">$and($mem(b11 as node,dom_distance2 as set(node)) as bool,$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,0,1,1,1" id="365">
      <find>A.28</find>
      <schemavariable name="%b">$and($mem(b11 as node,dom_distance2 as set(node)) as bool,$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,1,0,0,1,1,1" id="366">
      <find>A.24</find>
      <schemavariable name="%b">$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0" id="367">
      <find>A.24</find>
      <schemavariable name="%b">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0" id="368">
      <find>S.7</find>
      <schemavariable name="%b">$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(b11 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0,0" id="369">
      <find>A.25</find>
      <schemavariable name="%x">b11 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0,0" id="370">
      <find>A.25.1</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">b11 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0,0" id="371">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0,1" id="372">
      <find>S.7</find>
      <schemavariable name="%b">$mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0,1" id="373">
      <find>A.27</find>
      <schemavariable name="%x">b11 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0,1" id="374">
      <find>A.27.1</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">b11 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,1,0,1" id="375">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1" id="376">
      <find>S.7</find>
      <schemavariable name="%b">$not($mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(b11 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1,0" id="377">
      <find>A.26</find>
      <schemavariable name="%x">b11 as node</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1,0" id="378">
      <find>A.26.1</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">b11 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1,0" id="379">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1,1" id="380">
      <find>S.7</find>
      <schemavariable name="%b">$mem(b11 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1,1" id="381">
      <find>A.28</find>
      <schemavariable name="%x">b11 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1,1" id="382">
      <find>A.28.1</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">b11 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,0,0,1,1,1,1,1" id="383">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,0,1,1,1,0,1,1,0,1" id="384">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[31;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0,1" id="385">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int || dom_distance := $union(dom_distance2 as set(node),singleton(o3 as node) as set(node)) as set(node) || distance := write(distance2 as map(node,int),o3 as node,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int) as map(node,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,0,1" id="386">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,0,1,1,1" id="387">
      <find>S.0</find>
      <schemavariable name="%b">$not($or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),o as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[51;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1" id="388">
      <find>A.24</find>
      <schemavariable name="%t">$not($or($not($mem(o as node,dom_distance as set(node)) as bool) as bool,$lt(d as int,read(distance as map(node,int),o as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1" id="389">
      <find>A.24</find>
      <schemavariable name="%b">$or($not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool,$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),o3 as node) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_right" path="1,0,1,1,1,0,1,1,1" id="390">
      <find>S.3</find>
      <schemavariable name="%b">$lt($plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int,read(distance2 as map(node,int),o3 as node) as int) as bool</schemavariable>
      <schemavariable name="%a">$not($mem(o3 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,1" id="391">
      <find>S.3</find>
      <schemavariable name="%b">$mem(o3 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1,1" id="392">
      <find>S.0.0</find>
      <schemavariable name="%n">30 as int</schemavariable>
      <schemavariable name="%a">[52;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,0,1,1,1" id="393">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[30;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="394">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($and($and($and($subset(nbors as set(node),nbors0 as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,visited as set(node)) as bool,$eq(read(distance as map(node,int),\var r as node) as int,read(old_distance as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(old_dom_distance as set(node),dom_distance as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,old_dom_distance as set(node)) as bool,$lte(read(distance as map(node,int),\var s as node) as int,read(old_distance as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($mem(\var b as node,$diff(dom_distance as set(node),nbors as set(node)) as set(node)) as bool,$mem(pair(n as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),n as node) as int,weight(n as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,0" id="395">
      <find>S.0.0.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0" id="396">
      <find>S.0.0.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,0" id="397">
      <find>S.0.0.1.0.0.0</find>
      <schemavariable name="%b">$diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,0" id="398">
      <find>S.0.0.1.0.0.0.1.0</find>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,1,1,0" id="399">
      <find>S.0.0.1.0.0.0.1.0.1.0</find>
      <schemavariable name="%y">o3 as node</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,0,1,1,1,0" id="400">
      <find>S.0.1.0.0.0.1</find>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0" id="401">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance2 as map(node,int),\var a as node) as int,read(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($and($and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall b as node;$impl($and($and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($and($mem(\var b as node,nbors2 as set(node)) as bool,$not($eq(\var b as node,o3 as node) as bool) as bool) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0" id="402">
      <find>S.0</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($and($mem(\var b as node,nbors2 as set(node)) as bool,$not($eq(\var b as node,o3 as node) as bool) as bool) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0" id="403">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0" id="404">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0" id="405">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0" id="406">
      <find>S.0</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool,(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0" id="407">
      <find>S.0</find>
      <schemavariable name="%b">(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool,$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0" id="408">
      <find>S.0</find>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool,(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0" id="409">
      <find>S.0</find>
      <schemavariable name="%b">(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$subset($diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node),(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0" id="410">
      <find>S.0</find>
      <assume>A.12</assume>
      <schemavariable name="%a">nbors2 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(o3 as node) as set(node)</schemavariable>
      <schemavariable name="%c">(\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node)</schemavariable>
      <typevariable name="2">node</typevariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="c">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0" id="411">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1" id="412">
      <find>S.0</find>
      <assume>A.21</assume>
      <schemavariable name="%b">(\forall r as node;$impl($mem(\var r as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$eq(read(distance2 as map(node,int),\var r as node) as int,read(distance1 as map(node,int),\var r as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1" id="413">
      <find>S.0</find>
      <assume>A.20</assume>
      <schemavariable name="%b">$subset(dom_distance1 as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1" id="414">
      <find>S.0</find>
      <assume>A.19</assume>
      <schemavariable name="%b">(\forall s as node;$impl($mem(\var s as node,dom_distance1 as set(node)) as bool,$lte(read(distance2 as map(node,int),\var s as node) as int,read(distance1 as map(node,int),\var s as node) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,1" id="415">
      <find>S.0</find>
      <assume>A.18</assume>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,0,0,1" id="416">
      <find>S.0</find>
      <assume>A.17</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,0,1" id="417">
      <find>S.0</find>
      <assume>A.16</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,0,0,1" id="418">
      <find>S.0</find>
      <assume>A.15</assume>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,1,1,0,0,1" id="419">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($and($mem(\var b as node,nbors2 as set(node)) as bool,$not($eq(\var b as node,o3 as node) as bool) as bool) as bool) as bool) as bool,$mem(pair(n2 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b6</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,1,1,0,0,1" id="420">
      <find>S.0</find>
      <schemavariable name="%b">$lte(read(distance2 as map(node,int),b6 as node) as int,$plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,b6 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($mem(b6 as node,dom_distance2 as set(node)) as bool,$not($and($mem(b6 as node,nbors2 as set(node)) as bool,$not($eq(b6 as node,o3 as node) as bool) as bool) as bool) as bool) as bool,$mem(pair(n2 as node,b6 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1" id="421">
      <find>A.25</find>
      <schemavariable name="%b">$mem(pair(n2 as node,b6 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(b6 as node,dom_distance2 as set(node)) as bool,$not($and($mem(b6 as node,nbors2 as set(node)) as bool,$not($eq(b6 as node,o3 as node) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,0,1,1,1,0,0,1" id="422">
      <find>A.25</find>
      <schemavariable name="%b">$not($and($mem(b6 as node,nbors2 as set(node)) as bool,$not($eq(b6 as node,o3 as node) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(b6 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,1,1,0,0,1" id="423">
      <find>A.27</find>
      <schemavariable name="%b">$and($mem(b6 as node,nbors2 as set(node)) as bool,$not($eq(b6 as node,o3 as node) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,0,0,1" id="424">
      <find>S.4</find>
      <schemavariable name="%b">$not($eq(b6 as node,o3 as node) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(b6 as node,nbors2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,0" id="425">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="426">
      <find>S.4</find>
      <schemavariable name="%b">$eq(b6 as node,o3 as node) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,0,0,1,1" id="427">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0,1" id="428">
      <find>S.0</find>
      <assume>A.13</assume>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance2 as map(node,int),\var a as node) as int,read(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,0,1,1,1,0,1,1,1,1" id="429">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[31;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1" id="430">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || dom_distance := dom_distance2 as set(node) || o := o3 as node || nbors := $diff(nbors2 as set(node),singleton(o3 as node) as set(node)) as set(node) || d := $plus(read(distance2 as map(node,int),n2 as node) as int,weight(n2 as node,o3 as node) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,1" id="431">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,0,1,1,1,1" id="432">
      <find>S.0</find>
      <schemavariable name="%b">$not((\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[53;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1" id="433">
      <find>A.22</find>
      <schemavariable name="%t">$not((\exists t as node;$mem(\var t as node,nbors as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,1" id="434">
      <find>A.22</find>
      <schemavariable name="%b">(\exists t as node;$mem(\var t as node,nbors2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,1" id="435">
      <find>S.0.0</find>
      <schemavariable name="%n">5 as int</schemavariable>
      <schemavariable name="%a">[54;Dij''] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,0,1,1,1,1" id="436">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,dom_distance as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[5;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="437">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($and($and($subset(visited as set(node),dom_distance as set(node)) as bool,$eq(read(distance as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance as set(node)) as bool,$gte(read(distance as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,visited as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,dom_distance as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,visited as set(node)) as bool,$mem(\var b as node,$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool,$lte(read(distance as map(node,int),\var a as node) as int,read(distance as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,1,0" id="438">
      <find>S.0.0.0.1.0.0</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,1,0" id="439">
      <find>S.0.0.0.1.0.0.1.0</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,1,0" id="440">
      <find>S.0.1.0.0.0.1</find>
      <schemavariable name="%b">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance2 as set(node)</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0" id="441">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance2 as map(node,int),\var a as node) as int,read(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool,(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,dom_distance2 as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0" id="442">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,dom_distance2 as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool,(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0,0" id="443">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool,(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0,0,0" id="444">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool,$mem(start as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0,0,0,0" id="445">
      <find>S.0</find>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$and($subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool,$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,0,0,0,0,0" id="446">
      <find>S.0</find>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$subset($union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node),dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,1,0,0,0,0,0,0,0" id="447">
      <find>S.0</find>
      <schemavariable name="%a">$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance2 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,1,0,0,0,0,0,0,0" id="448">
      <find>A.1</find>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">dom_distance1 as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
      <typevariable name="a">set(node)</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,1,0,0,0,0,0,0,0" id="449">
      <find>S.0.0.0</find>
      <schemavariable name="%x">\var yy as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,1,0,0,0,0,0,0,0" id="450">
      <find>S.0.0.0.1</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">\var yy as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,0,0,0,0,0,0,0" id="451">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,0,0,0,0,1" id="452">
      <find>S.0</find>
      <assume>A.18</assume>
      <schemavariable name="%b">$eq(read(distance2 as map(node,int),start as node) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,0,0,0,1" id="453">
      <find>S.0</find>
      <assume>A.17</assume>
      <schemavariable name="%b">$mem(start as node,dom_distance2 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,0,0,1" id="454">
      <find>S.0</find>
      <assume>A.16</assume>
      <schemavariable name="%b">(\forall x as node;$impl($mem(\var x as node,dom_distance2 as set(node)) as bool,$gte(read(distance2 as map(node,int),\var x as node) as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,0,0,1" id="455">
      <find>S.0</find>
      <assume>A.15</assume>
      <schemavariable name="%b">(\forall y as node;$impl($and($mem(\var y as node,dom_distance2 as set(node)) as bool,$not($eq(\var y as node,start as node) as bool) as bool) as bool,(\exists x as node;$and($and($mem(\var x as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance2 as map(node,int),\var y as node) as int,$plus(read(distance2 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,0,0,1" id="456">
      <find>S.0</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,dom_distance2 as set(node)) as bool) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a4</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,0,0,1" id="457">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($and($mem(a4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(\var b as node,dom_distance2 as set(node)) as bool) as bool,$mem(pair(a4 as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance2 as map(node,int),\var b as node) as int,$plus(read(distance2 as map(node,int),a4 as node) as int,weight(a4 as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b5</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,1,0,0,1" id="458">
      <find>S.0</find>
      <schemavariable name="%b">$lte(read(distance2 as map(node,int),b5 as node) as int,$plus(read(distance2 as map(node,int),a4 as node) as int,weight(a4 as node,b5 as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($and($mem(a4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(b5 as node,dom_distance2 as set(node)) as bool) as bool,$mem(pair(a4 as node,b5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,0,0,1" id="459">
      <find>A.22</find>
      <schemavariable name="%b">$mem(pair(a4 as node,b5 as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(a4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$mem(b5 as node,dom_distance2 as set(node)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,0,0,1" id="460">
      <find>A.22</find>
      <schemavariable name="%b">$mem(b5 as node,dom_distance2 as set(node)) as bool</schemavariable>
      <schemavariable name="%a">$mem(a4 as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,1,0,0,1" id="461">
      <find>A.22</find>
      <schemavariable name="%x">a4 as node</schemavariable>
      <schemavariable name="%a">visited1 as set(node)</schemavariable>
      <schemavariable name="%b">singleton(n2 as node) as set(node)</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,1,0,0,1" id="462">
      <find>A.22</find>
      <schemavariable name="%a">$mem(a4 as node,visited1 as set(node)) as bool</schemavariable>
      <schemavariable name="%b">$mem(a4 as node,singleton(n2 as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <skip></skip>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,1,0,0,1,1" id="463">
      <find>A.22</find>
      <schemavariable name="%y">n2 as node</schemavariable>
      <schemavariable name="%x">a4 as node</schemavariable>
      <typevariable name="y">node</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,0,0,1,1" id="464">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,0,1" id="465">
      <find>S.0</find>
      <assume>A.13</assume>
      <schemavariable name="%b">(\forall a as node;(\forall b as node;$impl($and($mem(\var a as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool,$and($mem(\var b as node,dom_distance2 as set(node)) as bool,$not($mem(\var b as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as bool,$lte(read(distance2 as map(node,int),\var a as node) as int,read(distance2 as map(node,int),\var b as node) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,0,1,1,1,1,1" id="466">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[6;Dij''] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1" id="467">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ n := n2 as node || visited := $union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node) || old_distance := distance1 as map(node,int) || old_dom_distance := dom_distance1 as set(node) || nbors0 := (\set k as node;$and($mem(pair(n2 as node,\var k as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool,$not($mem(\var k as node,$union(visited1 as set(node),singleton(n2 as node) as set(node)) as set(node)) as bool) as bool) as bool) as set(node) || distance := distance2 as map(node,int) || d := d2 as int || nbors := nbors2 as set(node) || o := o2 as node || dom_distance := dom_distance2 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,1,1" id="468">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1" id="469">
      <find>S.0</find>
      <schemavariable name="%b">$not($not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[48;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="470">
      <find>A.8</find>
      <schemavariable name="%t">$not($not($eq(emptyset as set(node),$diff(dom_distance as set(node),visited as set(node)) as set(node)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1" id="471">
      <find>A.8</find>
      <schemavariable name="%b">$eq(emptyset as set(node),$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,1" id="472">
      <find>A.8</find>
      <schemavariable name="%s">$diff(dom_distance1 as set(node),visited1 as set(node)) as set(node)</schemavariable>
      <typevariable name="s">set(node)</typevariable>
      <typevariable name="5">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1" id="473">
      <find>A.8.0.0</find>
      <schemavariable name="%b">visited1 as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">\var xx as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1" id="474">
      <find>S.0</find>
      <schemavariable name="%b">$eq(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <schemavariable name="%a">[49;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="475">
      <find>S.0</find>
      <schemavariable name="%t">$eq(visited as set(node),dom_distance as set(node)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0" id="476">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1" id="477">
      <find>S.0</find>
      <schemavariable name="%b">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[50;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0" id="478">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as node;$impl($mem(\var y as node,$diff(dom_distance as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance as map(node,int),\var y as node) as int,$plus(read(distance as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0" id="479">
      <find>S.0</find>
      <schemavariable name="%b">$impl($mem(\var y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool,(\exists x as node;$and($and($mem(\var x as node,dom_distance1 as set(node)) as bool,$mem(pair(\var x as node,\var y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),\var y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,\var y as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var y as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var y as node)">y</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0" id="480">
      <find>S.0</find>
      <schemavariable name="%b">(\exists x as node;$and($and($mem(\var x as node,dom_distance1 as set(node)) as bool,$mem(pair(\var x as node,y as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$eq(read(distance1 as map(node,int),y as node) as int,$plus(read(distance1 as map(node,int),\var x as node) as int,weight(\var x as node,y as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(y as node,$diff(dom_distance1 as set(node),singleton(start as node) as set(node)) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,1,0" id="481">
      <find>A.9</find>
      <schemavariable name="%b">singleton(start as node) as set(node)</schemavariable>
      <schemavariable name="%a">dom_distance1 as set(node)</schemavariable>
      <schemavariable name="%x">y as node</schemavariable>
      <typevariable name="b">set(node)</typevariable>
      <typevariable name="a">set(node)</typevariable>
      <typevariable name="x">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0" id="482">
      <find>A.9</find>
      <schemavariable name="%b">$not($mem(y as node,singleton(start as node) as set(node)) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(y as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0" id="483">
      <find>A.10</find>
      <schemavariable name="%b">$mem(y as node,singleton(start as node) as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,1,0" id="484">
      <find>S.1</find>
      <schemavariable name="%y">start as node</schemavariable>
      <schemavariable name="%x">y as node</schemavariable>
      <typevariable name="x">node</typevariable>
      <typevariable name="y">node</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0" id="485">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,1" id="486">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as node;$impl($mem(\var a as node,dom_distance as set(node)) as bool,(\forall b as node;$impl($and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[51;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,0" id="487">
      <find>S.0</find>
      <schemavariable name="%t">(\forall a as node;$impl($mem(\var a as node,dom_distance as set(node)) as bool,(\forall b as node;$impl($and($mem(\var b as node,dom_distance as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance as map(node,int),\var b as node) as int,$plus(read(distance as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,0" id="488">
      <find>S.0</find>
      <schemavariable name="%b">$impl($mem(\var a as node,dom_distance1 as set(node)) as bool,(\forall b as node;$impl($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(\var a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),\var a as node) as int,weight(\var a as node,\var b as node) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var a as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var a as node)">a</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,0" id="489">
      <find>S.0</find>
      <schemavariable name="%b">(\forall b as node;$impl($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),a as node) as int,weight(a as node,\var b as node) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$mem(a as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,0" id="490">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($mem(\var b as node,dom_distance1 as set(node)) as bool,$mem(pair(a as node,\var b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool,$lte(read(distance1 as map(node,int),\var b as node) as int,$plus(read(distance1 as map(node,int),a as node) as int,weight(a as node,\var b as node) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var b as node</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">node</typevariable>
      <property name="skolemName(\var b as node)">b</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,0" id="491">
      <find>S.0</find>
      <schemavariable name="%b">$lte(read(distance1 as map(node,int),b as node) as int,$plus(read(distance1 as map(node,int),a as node) as int,weight(a as node,b as node) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($mem(b as node,dom_distance1 as set(node)) as bool,$mem(pair(a as node,b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,0" id="492">
      <find>A.10</find>
      <schemavariable name="%b">$mem(pair(a as node,b as node) as prod(node,node),dom_weight as set(prod(node,node))) as bool</schemavariable>
      <schemavariable name="%a">$mem(b as node,dom_distance1 as set(node)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,0" id="493">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1,1" id="494">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[52;Dij'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1" id="495">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ nbors0 := nbors01 as set(node) || visited := visited1 as set(node) || distance := distance1 as map(node,int) || d := d1 as int || nbors := nbors1 as set(node) || n := n1 as node || o := o1 as node || old_distance := old_distance1 as map(node,int) || old_dom_distance := old_dom_distance1 as set(node) || dom_distance := dom_distance1 as set(node) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1" id="496">
      <find>S.0</find>
    </ruleApplication>
  </steps>
</proof>
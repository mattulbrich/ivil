uses "bfs.algo.p"

algo bfs
input
   src, dest : vertex
output
   d : int
var
   size : int
   V, C, N : set(vertex)
   Vo, Co, No : set(vertex)
   tovisit : set(vertex)
   v,w : vertex
   done,done0 : set(vertex)
   
requires 
   finite(fullset as set(vertex))

ensures
   d >= -1
   
ensures
   d < 0 -> (\forall m; m >= 0 -> not connect(src,dest,m))
   
ensures
   d >= 0 -> connect(src, dest, d) 

ensures
   d >= 0 -> (\forall m; 0 <= m & m < d -> not connect(src,dest,m))

do
   size := card(fullset as set(vertex));
   
   V := {src};
   C := {src};
   N := {};
   d := 0;
   done := {};
   while !(C = {})
     inv 
       d >= 0 &
       (\forall x; x in C -> connect(src, x, d)) &
       (\forall y; y in N -> connect(src, y, d+1)) &
       (\forall z; z in V \ N <->
           (\exists n; 0 <= n <= d & connect(src, z, n))) &
       N <: V &
       done /\ C = emptyset
     var ^done
   do
     choose v such that v in C;
     C := C \ {v};
     done := done \/ {v};
     if v = dest 
     then 
       return
     end;
     
     Vo := V;
     No := N;
     iterate succ(v) with w as tovisit
       inv tovisit <: succ(v) &
           Vo <: V &
           No <: N &
           N <: V &
           (\forall y; y::N -> connect(src, y, d+1))
     do 
       if not w in V
       then
         V := V \/ {w};
         N := N \/ {w}
       end
     end;
     
     if C = {}
     then
       C := N;
       N := {};
       d := d+1
     end
   end;
   
   d := -1
end

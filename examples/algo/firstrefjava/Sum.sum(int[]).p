(* created : Wed Aug 22 18:14:19 CEST 2012 - Alpha-3 *)
#
# This file was generated by PSEUDO
# which is copyright (C) 2009 Universitaet Karlsruhe, Germany
#    written by Mattias Ulbrich
#

include "$bytecode.p"

include "declarations.p"

(* program variables *)
function
   ref _array assignable (* local variable '1' *)
   ref pre_array assignable (* method parameter, prestate *)
   bool st_0_bool assignable (* stack variable *)
   int st_0_int assignable (* stack variable *)
   int _result assignable (* local variable '2' *)
   int _i assignable (* local variable '3' *)
   ref st_1_ref assignable (* stack variable *)
   int st_1_int assignable (* stack variable *)
   bool branchCond assignable (* branching condition *)
   int st_2_int assignable (* stack variable *)

(* the translated Java program *)
program Java source "./Sum.jspec"
   sourceline 4
    assume !_array = null ; "Assume precondition"
    assume wellformed(h) ; "assumption guaranteed by Java"
    assume !_this = null ; "assumption guaranteed by Java"
    assume h[_this, created] ; "assumption guaranteed by Java"
    pre_h := h || pre_array := _array ; "Recording the prestate"
  Label1:
   sourceline 8
    (* ICONST_0 *)
    st_0_bool := false
    st_0_int := 0
    (* ISTORE *)
    _result := st_0_int
  Label2:
   sourceline 9
    (* ICONST_0 *)
    st_0_bool := false
    st_0_int := 0
    (* ISTORE *)
    _i := st_0_int
  Label3:
   sourceline 10
    (* ILOAD *)
    st_0_int := _i
    (* ALOAD *)
    st_1_ref := _array
    (* ARRAYLENGTH *)
    assert !st_1_ref = null ; "non-null array reference"
    st_1_int := arrlen(st_1_ref)
    (* IF_ICMPGE *)
    branchCond := st_0_int >= st_1_int
    goto Label4, Label5
  Label4:
    assume branchCond
    goto Label6
  Label5:
    assume !branchCond
  Label7:
   sourceline 11
    (* LDC + INVOKESTATIC - Specification injection *)
    skip MARK, 1
  Label8:
   sourceline 12
    (* ILOAD *)
    st_0_int := _result
    (* ALOAD *)
    st_1_ref := _array
    (* ILOAD *)
    st_2_int := _i
    (* IALOAD *)
    assert !st_1_ref = null ; "non-null array access"
    assert st_2_int >= 0 & st_2_int < arrlen(st_1_ref) ; "array index in bounds"
    st_1_int := h[st_1_ref, idxInt(st_2_int)] ; "read value from array"
    (* IADD *)
    st_0_int := st_0_int + st_1_int
    (* ISTORE *)
    _result := st_0_int
  Label9:
   sourceline 13
    (* IINC *)
    _i := _i + 1
  Label10:
   sourceline 14
    (* LDC + INVOKESTATIC - Specification injection *)
    skip MARK, 2
    (* GOTO *)
    goto Label3
  Label6:
   sourceline 16
    (* ILOAD *)
    st_0_int := _result
    (* IRETURN *)
    exc := null
    resInt := st_0_int
    goto LabelEnd
  Label11:
  LabelEnd:
    assert exc = null ; "No exception has been thrown"
   sourceline 5
    assert true ; "Assert postcondition"
    skip ; "No frame specfied"
(* end of program *)


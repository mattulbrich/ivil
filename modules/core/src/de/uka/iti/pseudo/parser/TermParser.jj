
//
// This file contains partial parser definition for terms only
//

// a greedy term ... read the whole stream
// needed for parsing terms
ASTTerm TermEOF():
{ 
  ASTTerm term;
}
{
        { token_source.SwitchTo(PROTECTED); }
	term=Term() <EOF>
	{ return term; }
}

ASTTerm Term():
{ 
  ASTTerm term;
  List<ASTTerm> list = new ArrayList<ASTTerm>();
  int depth = 0; 
}
{
        ( term=OpIdentifier() { list.add(term); } )*
        term=UpdateTerm() { list.add(term); }
        (
          ( term=OpIdentifier() { list.add(term); } )+
          term=UpdateTerm() { list.add(term); }
        )*
   { 
     if(list.size() > 1)
        return new ASTListTerm(list);
     else
        return list.get(0);
   }
}

ASTTerm UpdateTerm():
{
  ASTTerm term;
  Token id;
  List<ASTAssignment> assignments;
}
{      LOOKAHEAD(3)
         "{" id=<IDENTIFIER> "}" term=UpdateTerm()
            { return new ASTSchemaUpdateTerm(id, term); }
       | "{" assignments=ParallelAssignment() "}" term=UpdateTerm() 
            { return new ASTUpdateTerm(assignments, term); }
       | term=AsTerm()
            { return term; }
}

ASTAssignment Assignment():
{
        ASTTerm target;
        ASTTerm term;
        Token t;
}
{
        ( target=SchemaVariable()
        | ( t=<IDENTIFIER> | t=<INTERNAL_IDENTIFIER> )
                { target = new ASTIdentifierTerm(t); }
        )
        ":=" term=Term()
        { return new ASTAssignment(target, term); }
}

List<ASTAssignment> ParallelAssignment():	 
{
  Token t;
  ASTTerm term;
  ASTAssignment assignment;
  List<ASTAssignment> assignments = new ArrayList<ASTAssignment>();
}
{
          assignment=Assignment() 
          	{ assignments.add(assignment); }
          ( "||"  assignment=Assignment() 
                { assignments.add(assignment); } )*
          	
          { return assignments; }
}         

ASTTerm AsTerm():
{ 
  ASTTerm term;
  ASTType type; 
}
{
        term=BaseTerm()
        (
          "as"
          type=TypeRef()
            { term = new ASTAsType(term, type); }
        )?  
         { return term; }
}

ASTTerm BaseTerm():
{ 
  ASTTerm term;
}
{
        ( LOOKAHEAD(2) "(" term=BinderTerm() ")"
        | LOOKAHEAD(2) "(" term=TypevarBinderTerm() ")"
        | "(" term=Term() ")"
        | term=ExplicitVariableTerm()
        | term=ApplicationTerm()
        | term=SchemaVariable()
        | term=NumberLiteral()
        | term=ProgramTerm()
        )
        { return term; }
}

ASTTerm ExplicitVariableTerm():
{
  Token firstToken, varToken;
}
{
    firstToken="\\var" varToken=<IDENTIFIER>
      { return new ASTExplicitVariableTerm(firstToken, varToken); }
}

ASTTerm ProgramTerm():
{
  ASTProgramTerm pt;
}
{
    (  "[" pt=ProgramTerm_Content(false) "]" 
    |  "[[" pt=ProgramTerm_Content(true) "]]"
    )
    { return pt; }
}

ASTProgramTerm ProgramTerm_Content(boolean termination):
{
  Token t, label, progref;
  ASTStatement matchStatement = null, st;
}
{
       ( label=<SCHEMA_IDENTIFIER> 
         (  ":" 
           ( LOOKAHEAD(2)
             matchStatement=Statement() 
           | matchStatement=SchematicAssignmentStatement()
           ) 
         )?
           { return new ASTProgramTerm(label, termination, matchStatement); }
            
       | 
         label=<NATURAL> ";" (progref=<PROGRAM_IDENTIFIER>|progref=<IDENTIFIER>)
         { return new ASTProgramTerm(label, termination, progref); }
       )
}

ASTBinderTerm BinderTerm():
{
  Token binderToken;
  Token varToken;
  ASTType type = null; 
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>(); 
}
{
        binderToken = <BINDER_IDENTIFIER>
        
        ( varToken=<IDENTIFIER> | varToken=<SCHEMA_IDENTIFIER> )
        ( "as" type = TypeRef() )?
        ( ";" t=Term() { subterms.add(t); } )+
   { return new ASTBinderTerm(binderToken, type, varToken, subterms); }
}

ASTTypevarBinderTerm TypevarBinderTerm():
{
  Token binderToken;
  ASTType type;
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>(); 
}
{
        // this might be generalised later ... if ever needed ?!
        ( binderToken = <ALL_TY> | binderToken = <EX_TY> )
        
        // in top level terms
        ( type=BindableTypeRef() )

        ";" t=Term()
        
   { return new ASTTypevarBinderTerm(binderToken, type, t); }
}


ASTType TypeRef():
{
  Token token;
  List<ASTType> args = new ArrayList<ASTType>();
  ASTType ty;
}
{
		token = <IDENTIFIER>
		( LOOKAHEAD(2) // a binder declaration may follow, but has a binder-identifier next
		  "(" ty=TypeRef() { args.add(ty); }
		  		( "," ty=TypeRef() { args.add(ty); } )*
		  ")"
		)?
		{ return new ASTTypeApplication(token, args); }
	|
		ty=BindableTypeRef() { return ty; }
    |
        ty=MapTypeRef() { return ty; }
}

/* type references that can be used for type binders.
 * TypeApplications are not allowed */
ASTType BindableTypeRef():
{
  Token token;
}
{
                ( token = <TYVAR_IDENTIFIER> )
                { return new ASTTypeVar(token); }
        |
                ( token = <SCHEMA_TYPE_IDENTIFIER> )
                { return new ASTSchemaType(token); }
}

/*
 may types look a lot like boogie maps, but the polymorphic bound use {} instead of < > to avoid the collision with the set of operators.
 This works, because {} is used in updates(term) and parallel assignments(statement) and thus can not
 be confused with types. [] is used by modal operators(term) and therefor can also not be confused with types.
 Also does the addition of this rule not create any new warnings.
*/
ASTType MapTypeRef():
{
  Token location;
  List<ASTType> boundvars = new ArrayList<ASTType>();
  List<ASTType> domain = new ArrayList<ASTType>();
  ASTType range, tmp;
}
{
  (
    "{" tmp=BindableTypeRef() { boundvars.add(tmp); }
    (
      "," tmp=BindableTypeRef() { boundvars.add(tmp); }
    )*
    "}"
  )?
  location="["
  (
     tmp=TypeRef() { domain.add(tmp); }
    (
      "," tmp=TypeRef() { domain.add(tmp); }
    )*
  )?
  "]"
  range=TypeRef()
  
  {
    return new ASTMapType(location, boundvars, domain, range);
  }
}

        
ASTTerm ApplicationTerm():
{
  Token symbol;
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>();
}
{
        (symbol=<IDENTIFIER> | symbol=<META_IDENTIFIER> | symbol=<INTERNAL_IDENTIFIER>)
        
        ( /* parentheses are not empty, constants dont have them */ 
          "("
          t=Term() { subterms.add(t); }
          ( "," t=Term() { subterms.add(t); } )*
          ")"
        )?
        
    { if(subterms.size() > 0) 
        return new ASTApplicationTerm(symbol, subterms); 
      else
        return new ASTIdentifierTerm(symbol);
    }
}

ASTTerm OpIdentifier():
{ 
  Token t;
}
{
        t=<OP_IDENTIFIER> 
  { return new ASTOperatorIdentifierTerm(t); }
}

ASTTerm Identifier():
{
  Token t;
}
{
        t=<IDENTIFIER>
  { return new ASTIdentifierTerm(t); }
}

ASTNumberLiteralTerm NumberLiteral():
{
  Token t;
}
{
        t=<NATURAL>
  { return new ASTNumberLiteralTerm(t); }
}

ASTSchemaVariableTerm SchemaVariable():
{
	Token t;
}
{
        t=<SCHEMA_IDENTIFIER>
  { return new ASTSchemaVariableTerm(t); }
}
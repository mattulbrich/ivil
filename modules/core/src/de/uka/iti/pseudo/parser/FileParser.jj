

//
// This file contains the grammar for files with sorts/functions/rules/program and problem definitions
// structural elements that have nothing to do with Terms
//


ASTFile File():
{
  ASTDeclarationBlock block;
  List<ASTDeclarationBlock> blocks = new ArrayList<ASTDeclarationBlock>();
  ASTProblemSequent problem = null;
}
{
       (
        ( block=IncludeDeclarationBlock()
        | block=PluginsBlock()
        | block=PropertiesBlock()
        | block=SortDeclarationBlock()
        | block=FunctionDeclarationBlock()
        | block=BinderDeclarationBlock()
        | block=RuleDeclaration()
        | block=AxiomDeclaration()
        | block=ProgramDeclaration()
        )   { blocks.add(block); }
       )*
       
       ( problem=Problem() )?
       
       <EOF>
       
   { return new ASTFile(blocks, problem); }
}

ASTProblemSequent Problem():
{
  List<ASTTerm> antecedent = new ArrayList<ASTTerm>();
  List<ASTTerm> succedent = new ArrayList<ASTTerm>();
  boolean hasSeqSep = false;
  ASTTerm t;
}
{
        "problem"
        
        ( t=Term() {antecedent.add(t);}
          ( "," t=Term() {antecedent.add(t);} )*
        )?
        
        ( "|-" {hasSeqSep=true;}
          ( t=Term() {succedent.add(t);}
            ( "," t=Term() {succedent.add(t);} )*
          )?
        )?
        
   {  if(antecedent.size() + succedent.size() == 0) {
         throw new ParseException();
      }
      if(!hasSeqSep && antecedent.size() > 1) {
         throw new ParseException();
      }
      if(!hasSeqSep) {
         // if only a single term, take that as *suc*cendent.
         return new ASTProblemSequent(Collections.<ASTTerm>emptyList(), antecedent);
      } else {
         return new ASTProblemSequent(antecedent, succedent);
      }
   }
}
        

ASTPlugins PluginsBlock():
{
  Token first, service, implementation;
  List<ASTPluginDeclaration> pairs = new ArrayList<ASTPluginDeclaration>();
}
{
        first="plugin"
        ( service=<IDENTIFIER> ":" implementation=<STRING>
             { pairs.add(new ASTPluginDeclaration(service, implementation)); }
        )+
    { return new ASTPlugins(first, pairs); }
}

ASTProperties PropertiesBlock():
{
  Token first, t, value, separator=null;
  StringBuilder name = new StringBuilder();
  List<ASTPropertiesDeclaration> pairs = new ArrayList<ASTPropertiesDeclaration>();
}
{
        first="properties"
        ( t=<IDENTIFIER> { name.append(t.image); } 
             ( "." t=<IDENTIFIER> 
                {   
                    name.append(".").append(t.image);
                }
             )* 
                value=<STRING>
             {       
                pairs.add(new ASTPropertiesDeclaration(name.toString(),value));
                name.setLength(0);
             }
        )+
    { return new ASTProperties(first, pairs); }
}


ASTIncludeDeclarationBlock IncludeDeclarationBlock():
{
  Token first;
  Token string;
  List<Token> list = new ArrayList<Token>();
}
{
        first="include" ( string=<STRING> { list.add(string); } )+
          { return new ASTIncludeDeclarationBlock(first, list); }
}

ASTSortDeclarationBlock SortDeclarationBlock():
{
  Token first;
  ASTSortDeclaration sd;
  List<ASTSortDeclaration> list = new ArrayList<ASTSortDeclaration>();
}
{
        first="sort" ( sd=SortDeclaration() { list.add(sd); } )+
          {return new ASTSortDeclarationBlock(first, list); }
}

ASTSortDeclaration SortDeclaration():
{
  Token name,  ty;
  List<Token> tyvars = new ArrayList<Token>();
  ASTMapType alias = null; 
}
{
  name=<IDENTIFIER>
  
  (
    "(" ty=<TYVAR_IDENTIFIER> { tyvars.add(ty); }
       ( "," ty=<TYVAR_IDENTIFIER> { tyvars.add(ty); } )*
    ")"
  )?
  
  (    "as" alias=MapTypeRef()
  )?

    { return new ASTSortDeclaration(name, tyvars, alias); }
}

/**
 * @note: map type ref can only occur in sort declarations
 *
 * may types look a lot like boogie maps, but the polymorphic bound use
 * {} instead of < > to avoid the collision with the set of operators.
 * This works, because {} is used in updates(term) and parallel assignments(statement) and thus can not
 * be confused with types. [] is used by modal operators(term) and therefore can also not be confused with types.
 * Also does the addition of this rule not create any new warnings.
 */
ASTMapType MapTypeRef():
{
  Token location;
  List<ASTTypeVar> boundvars = new ArrayList<ASTTypeVar>();
  List<ASTType> domain = new ArrayList<ASTType>();
  ASTType range, tmp;
  ASTTypeVar schema;
}
{
  (
    "{" schema=TypeVariable() { boundvars.add(schema); }
    (
      "," schema=TypeVariable() { boundvars.add(schema); }
    )*
    "}"
  )?
  location="["
  (
    (
      tmp=TypeRef() { domain.add(tmp); }
 /* | tmp=MapTypeRef() { domain.add(tmp); } */
    )
    (
      ","
      (
        tmp=TypeRef() { domain.add(tmp); }
   /* | tmp=MapTypeRef() { domain.add(tmp); } */
      )
    )*
  )?
  "]"
  (
    range=TypeRef()
  | range=MapTypeRef()
  )
  
  {
    return new ASTMapType(location, boundvars, domain, range);
  }
}

ASTTypeVar TypeVariable():
{
  Token token;
}
{
    token = <TYVAR_IDENTIFIER>
      { return new ASTTypeVar(token); }
}
  

ASTFunctionDeclarationBlock FunctionDeclarationBlock():
{
  Token first;
  ASTFunctionDeclaration fd;
  List<ASTFunctionDeclaration> list = new ArrayList<ASTFunctionDeclaration>();
}
{
        first = "function" ( fd=FunctionDeclaration() { list.add(fd); } )+
           { return new ASTFunctionDeclarationBlock(first, list); }
}

ASTFunctionDeclaration FunctionDeclaration():
{
  Token name, as = null, precedence = null;
  int modifier = 0;
  ASTType range, ty;
  List<ASTType> tyrefs = new ArrayList<ASTType>();
}
{
        range=TypeRef()
        
        ( name=<IDENTIFIER> | name=<INTERNAL_IDENTIFIER> )
        
        (
          "(" ty=TypeRef() { tyrefs.add(ty); }
             ( "," ty=TypeRef() { tyrefs.add(ty); } )*
          ")"
        )?
        
        (
          "assignable" { modifier |= ASTFunctionDeclaration.MODIFIER_ASSIGNABLE; }
        |
          "unique"     { modifier |= ASTFunctionDeclaration.MODIFIER_UNIQUE; }
        )?
        
        (
          "infix" as=<OP_IDENTIFIER>  precedence=<NATURAL>
             { modifier |= ASTFunctionDeclaration.MODIFIER_INFIX; }
        |
          "prefix" as=<OP_IDENTIFIER>  precedence=<NATURAL>
             { modifier |= ASTFunctionDeclaration.MODIFIER_PREFIX; }
        )?
        
    { 
      return new ASTFunctionDeclaration(range, name, tyrefs, modifier, as, precedence);
    }
}

ASTBinderDeclarationBlock BinderDeclarationBlock():
{
  Token first;
  ASTBinderDeclaration bd;
  List<ASTBinderDeclaration> list = new ArrayList<ASTBinderDeclaration>();
}
{
	first="binder" ( bd=BinderDeclaration() { list.add(bd); } )+
	   { return new ASTBinderDeclarationBlock(first, list); }
}

ASTBinderDeclaration BinderDeclaration():
{
  ASTType range, varty, ty;
  Token name;
  List<ASTType> tyrefs = new ArrayList<ASTType>();
}
{
	range=TypeRef() "("
        
    name=<BINDER_IDENTIFIER>
    
    varty=TypeRef()
     
    ( ";" ty=TypeRef() { tyrefs.add(ty); } )+

    ")"

    { return new ASTBinderDeclaration(name, range, varty, tyrefs); }
}

ASTProgramDeclaration ProgramDeclaration():
{
  List<ASTStatement> statements;
  Token first, name, source=null;
}
{
   first="program" (name=<PROGRAM_IDENTIFIER> | name=<IDENTIFIER>) 
   ( "source" source=<STRING> )?
   statements=StatementList()
     { return new ASTProgramDeclaration(first, name, source, statements); } 
}

ASTAxiomDeclaration AxiomDeclaration():
{
  Token name, first, t, v=null;
  ASTTerm term;
  List<Pair<Token, Token>> properties = new ArrayList<Pair<Token, Token>>();
}
{
  first="axiom"   name=<IDENTIFIER>  term = Term()
    
  ( "tags" 
    ( 
      t=<IDENTIFIER> ( v=<STRING> )?
        { properties.add(new Pair<Token, Token>(t, v));
          v = null; } 
    )+
  )?
  
  { return new ASTAxiomDeclaration(first, name, term, properties); }
}

ASTRule RuleDeclaration():
{
  List<ASTRuleElement> list = new ArrayList<ASTRuleElement>();
  List<ASTGoalAction> actions = new ArrayList<ASTGoalAction>();
  List<ASTRuleElement> aclist;
  List<Pair<Token, Token>> properties = new ArrayList<Pair<Token, Token>>();
  ASTRuleElement elem;
  ASTLocatedTerm lt;
  Token t, v = null, first, name, descr = null, target = null;
}
{
  first="rule" name=<IDENTIFIER>
  
  (
    t="find" lt=LocatedTerm(true) { list.add(new ASTRuleFind(t, lt)); }
  | t="assume" lt=LocatedTerm(false) { list.add(new ASTRuleAssume(t, lt)); }
  | t="where" elem=WhereClause(t) { list.add(elem); }
  )*
  
  (
    (
      t="closegoal" { actions.add(new ASTGoalAction(t)); }
    | (target="samegoal" | target="newgoal") ( v=<STRING> )? aclist=AddReplaces() 
           { actions.add(new ASTGoalAction(target, v, aclist)); }
    )+
  | 
    aclist = AddReplaces()  // implicit samegoal
      { actions.add(new ASTGoalAction(null, null, aclist)); }
  )
  
  (
    "description" descr=<STRING>
  )?
  
  (
    "tags" 
    ( 
      t=<IDENTIFIER> ( v=<STRING> )?
        { properties.add(new Pair<Token, Token>(t, v));
          v = null; } 
    )+
  )?
  
  { return new ASTRule(first, name, list, actions, descr, properties); }
}

ASTLocatedTerm LocatedTerm(boolean bothAllowed):
{
	ASTTerm rt;
}
{
      "|-" rt=Term()
        { return new ASTLocatedTerm(rt, MatchingLocation.SUCCEDENT); }
    |
      rt=Term() 
        ( "|-" 
           { return new ASTLocatedTerm(rt, MatchingLocation.ANTECEDENT); } )?
      { if(!bothAllowed) {
          generateParserException(new int[] { SEP });
        }
        return new ASTLocatedTerm(rt, MatchingLocation.BOTH); }
}

List<ASTRuleElement> AddReplaces():
{
	Token t;
	ASTTerm term;
	ASTLocatedTerm lt;
	List<ASTRuleElement> list = new ArrayList<ASTRuleElement>();
}
{
  ( 
    t="add" lt=LocatedTerm(false) { list.add(new ASTRuleAdd(t, lt)); }
  | t="replace" term=Term() { list.add(new ASTRuleReplace(t, term)); }
  | t="remove" { list.add(new ASTRuleRemove(t)); }
  )+
  { return list; }
}

ASTWhereClause WhereClause(Token headToken):
{
	Token t;
	ASTTerm term;
	boolean inverted = false;
	List<ASTTerm> args = new ArrayList<ASTTerm>();
}
{
       ( "not" { inverted = true; } )?

       t=<IDENTIFIER>
       (  
             term=Term() { args.add(term); } 
             ( "," term=Term() { args.add(term); } )*
       )?
       { return new ASTWhereClause(headToken, inverted, t, args); }
    /* perhaps: Implement "Let-expressions" in a future release.
    |
       term=<SCHEMA_IDENTIFIER> { args.add(term); }
       t = "="
       term=Term() { args.add(term); }
       { return new ASTWhereClause(headToken, false, t, args); }
    */
       
}

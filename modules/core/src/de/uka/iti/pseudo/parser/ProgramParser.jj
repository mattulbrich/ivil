
//
// This file contains partial parser definition for programs only
//


List<ASTStatement> StatementList():
{
	List<ASTStatement> list = new ArrayList<ASTStatement>();
	ASTStatement st;
}
{
	( LOOKAHEAD(2)
	  st=Statement() { list.add(st); }
	| st=SourceLineStatement() { list.add(st); } 
	| st=LabelStatement() { list.add(st); } 
	)+
	{ return list; }
}

ASTSourceLineStatement SourceLineStatement():
{
	Token kw, argument;
}
{
	kw="sourceline" argument=<NATURAL>
	{ return new ASTSourceLineStatement(kw,argument); }
}

ASTLabelStatement LabelStatement():
{
	Token label;
}
{         ( label = <IDENTIFIER> ":" 
	     { return new ASTLabelStatement(label); }
	  )
}

ASTStatement Statement():
{
	ASTTerm term;
	Token kw;
	ASTStatement result;
	List<ASTTerm> termList;
	List<ASTAssignment> asList;
	Token textAnnotation = null;
}
{
	( kw="assert" term=Term() { result = new ASTAssertStatement(kw, term); }
	| kw="assume" term=Term() { result = new ASTAssumeStatement(kw, term); }
	| kw="end" { result = new ASTEndStatement(kw); }
	| kw=<SKIP_ANNOTATED> termList=Statement_TermList()
	            { result = new ASTSkipStatement(kw, termList); }
	| kw="skip" { result = new ASTSkipStatement(kw); }
	| kw="havoc" (term=Identifier() | term=InternalIdentifier() | term=SchemaVariable()) 
	            { result = new ASTHavocStatement(kw, term); }
	          
	| asList=ParallelAssignment() /* --> TermParser.jj */
	     { result = new ASTAssignmentStatement(asList); }
	| kw="goto" termList=Statement_TermList()
	     { result = new ASTGotoStatement(kw, termList); }
	)     
	
	( ";" textAnnotation=<STRING> 
	   { result.setTextAnnotation(textAnnotation);}
	)?
	
	{ return result; }
	
}

/*
// In case we want to distinguish between goto labels and identifiers use this
// with goto statements and lables
List<ASTTerm> GotoTargetList():
{
    List<ASTTerm> targets = new LinkedList<ASTTerm>();
    ASTTerm target;
    Token t;
}
{
    ( target = SchemaVariable()
    | target = NumberLiteral()
    | t=<LABEL_IDENTIFIER> 
        { target=new ASTIdentifierTerm(t); }
    )
    { targets.add(target); }
    
    ( "," 
        ( target = SchemaVariable()
        | target = NumberLiteral()
        | t=<LABEL_IDENTIFIER> 
            { target=new ASTIdentifierTerm(t); }
        )
        { targets.add(target); }
    )?
    { return targets; }
}
*/
	
List<ASTTerm> Statement_TermList():
{
    List<ASTTerm> terms = new LinkedList<ASTTerm>();
    ASTTerm t;
}
{
    (t=Term())
    { terms.add(t); }
    
    ( "," 
      (t=Term())
        { terms.add(t); }
    )*
    { return terms; }
}

// Only used where matching contexts are allowed.
ASTSchematicAssignmentStatement SchematicAssignmentStatement():
{
  Token t;
}
{
  t = <IDENTIFIER>
  { return new ASTSchematicAssignmentStatement(t); }
}
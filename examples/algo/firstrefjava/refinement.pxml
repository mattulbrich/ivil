<?xml version="1.0"?>
<proof format="1"><info>
    <date>Wed Jul 04 18:18:11 CEST 2012</date>
    <version>0.0</version>
    <problem>$and($eq(setA,seqAsSet(arrayAsIntSeq($heap,array))),$and($not($eq(array,$null)),(\forall a;$impl($and($lte(0,\var a),$lt(\var a,$load_heap($heap,array,$array_length))),(\forall b;$impl($and($lte(0,\var b),$lt(\var b,$load_heap($heap,array,$array_length))),$impl($eq($load_heap($heap,array,$array_index(\var a)),$load_heap($heap,array,$array_index(\var b))),$eq(\var a,\var b)))))))) |- [0;Java][&lt;0;Sum&gt;]$eq(sumA,$result)</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="refinement" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%phi">$eq(sumA as int,$result as int) as bool</schemavariable>
      <schemavariable name="%C">[0;Java]([&lt;0;Sum&gt;]($eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%A">[&lt;0;Sum&gt;]($eq(sumA as int,$result as int) as bool) as bool</schemavariable>
      <typevariable name="A">bool</typevariable>
      <typevariable name="C">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="1">
      <find>S.0.0.1</find>
      <schemavariable name="%t">{ $markA := 0 as int || $markC := 0 as int }({ var := 42 as int }($impl($and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool,[23;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool) as bool))</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="2">
      <find>S.0.0.1.1.12</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="3">
      <find>S.0.0.1.1.13</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="4">
      <find>S.0.0.1.1.14</find>
      <schemavariable name="%t">42 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := { sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }(0 as int) || $markC := { sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }(0 as int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="5">
      <find>S.0.1</find>
      <schemavariable name="%t">{ $markA := 0 as int || $markC := 0 as int }({ var := 42 as int }($impl($and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool,[34;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool) as bool))</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="6">
      <find>S.0.1.1.12</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="7">
      <find>S.0.1.1.13</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="8">
      <find>S.0.1.1.14</find>
      <schemavariable name="%t">42 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := { sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }(0 as int) || $markC := { sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int }(0 as int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="9">
      <find>A.0</find>
      <schemavariable name="%a">$eq(setA as set(int),seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($not($eq(array as ref,$null as ref) as bool) as bool,(\forall a as int;$impl($and($lte(0 as int,\var a as int) as bool,$lt(\var a as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,(\forall b as int;$impl($and($lte(0 as int,\var b as int) as bool,$lt(\var b as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$impl($eq($load_heap($heap as heap,array as ref,$array_index(\var a as int) as field) as int,$load_heap($heap as heap,array as ref,$array_index(\var b as int) as field) as int) as bool,$eq(\var a as int,\var b as int) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="10">
      <find>A.1</find>
      <schemavariable name="%a">$not($eq(array as ref,$null as ref) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as int;$impl($and($lte(0 as int,\var a as int) as bool,$lt(\var a as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,(\forall b as int;$impl($and($lte(0 as int,\var b as int) as bool,$lt(\var b as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$impl($eq($load_heap($heap as heap,array as ref,$array_index(\var a as int) as field) as int,$load_heap($heap as heap,array as ref,$array_index(\var b as int) as field) as int) as bool,$eq(\var a as int,\var b as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="" id="11">
      <find>A.1</find>
      <schemavariable name="%b">$eq(array as ref,$null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="" id="12">
      <find>A.0</find>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="13">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;0;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sumA := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="14">
      <find>S.0.0.0.0.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;1;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="15">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%t">{ sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sumA := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="16">
      <find>S.0.0.0.0.0.2</find>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="t">set(int)</typevariable>
      <schemaupdate name="U">{ sumA := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="17">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[23;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := result as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="18">
      <find>S.0.0.1.1</find>
      <schemavariable name="%t">{ $stack_1_int := result as int }([24;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="19">
      <find>S.0.0.1.1.14</find>
      <schemavariable name="%t">result as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="20">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[24;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="21">
      <find>S.0.0.1.1</find>
      <schemavariable name="%t">{ $stack_2_ref := array as ref }([25;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="22">
      <find>S.0.0.1.1.14</find>
      <schemavariable name="%t">array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="23">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[25;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_3_int := i as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="24">
      <find>S.0.0.1.1</find>
      <schemavariable name="%t">{ $stack_3_int := i as int }([26;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="25">
      <find>S.0.0.1.1.14</find>
      <schemavariable name="%t">i as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="" id="26">
      <find>S.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[34;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">11 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="" id="27">
      <find>S.0.1.1.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">2 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="" id="28">
      <find>S.0</find>
      <schemavariable name="%a">$and({ $markA := 0 as int || $markC := 0 as int }([0;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool),$impl($and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool,{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }([26;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool,{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }([11;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0" id="29">
      <find>S.0</find>
      <schemavariable name="%a">{ $markA := 0 as int || $markC := 0 as int }([0;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <schemavariable name="%b">$impl($and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool,{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }([26;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="30">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[0;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="31">
      <find>A.2</find>
      <schemavariable name="%t">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="32">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[1;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $exception := $null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="33">
      <find>S.0</find>
      <schemavariable name="%t">{ $exception := $null as ref }([2;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="34">
      <find>S.0.3</find>
      <schemavariable name="%t">$null as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="35">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[2;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="36">
      <find>S.0</find>
      <schemavariable name="%t">{ $old_heap := $heap as heap }([3;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="37">
      <find>S.0.4</find>
      <schemavariable name="%t">$heap as heap</schemavariable>
      <typevariable name="t">heap</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="38">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[3;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$and($not($eq(this as ref,$null as ref) as bool) as bool,$load_heap($heap as heap,this as ref,$created as field) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="39">
      <find>A.3</find>
      <schemavariable name="%t">$and($not($eq(this as ref,$null as ref) as bool) as bool,$load_heap($heap as heap,this as ref,$created as field) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0" id="40">
      <find>A.3</find>
      <schemavariable name="%a">$not($eq(this as ref,$null as ref) as bool) as bool</schemavariable>
      <schemavariable name="%b">$load_heap($heap as heap,this as ref,$created as field) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,0" id="41">
      <find>A.3</find>
      <schemavariable name="%b">$eq(this as ref,$null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="42">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[4;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">instanceof(this as ref,T_Sum as type) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="43">
      <find>A.4</find>
      <schemavariable name="%t">instanceof(this as ref,T_Sum as type) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="44">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[5;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$load_heap($heap as heap,array as ref,$created as field) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="45">
      <find>A.5</find>
      <schemavariable name="%t">$load_heap($heap as heap,array as ref,$created as field) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="46">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[6;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">instanceof(array as ref,TF_INT_ARRAY as type) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="47">
      <find>A.6</find>
      <schemavariable name="%t">instanceof(array as ref,TF_INT_ARRAY as type) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="48">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[7;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="49">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_1_int := 0 as int }([8;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="50">
      <find>S.0.5</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="51">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[8;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ result := $stack_1_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="52">
      <find>S.0</find>
      <schemavariable name="%t">{ result := $stack_1_int as int }([9;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="53">
      <find>S.0.6</find>
      <schemavariable name="%t">$stack_1_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="54">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[9;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="55">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_1_int := 0 as int }([10;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || $stack_1_int := 0 as int || result := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="56">
      <find>S.0.6</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || $stack_1_int := 0 as int || result := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="57">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[10;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ i := $stack_1_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="58">
      <find>S.0</find>
      <schemavariable name="%t">{ i := $stack_1_int as int }([11;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="59">
      <find>S.0.7</find>
      <schemavariable name="%t">$stack_1_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="60">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[11;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || $stack_1_int := 0 as int || i := 0 as int }</schemaupdate>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="61">
      <find>A.7</find>
      <schemavariable name="%t">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || $stack_1_int := 0 as int || i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="62">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[12;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := i as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="63">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_1_int := i as int }([13;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || $stack_1_int := 0 as int || i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="64">
      <find>S.0.7</find>
      <schemavariable name="%t">i as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || $stack_1_int := 0 as int || i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="65">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[13;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="66">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_2_ref := array as ref }([14;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="67">
      <find>S.0.8</find>
      <schemavariable name="%t">array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,0" id="68">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[14;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq($null as ref,$stack_2_ref as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,0" id="69">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq($null as ref,$stack_2_ref as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,0" id="70">
      <find>S.0</find>
      <schemavariable name="%b">$eq($null as ref,array as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,0" id="71">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,0" id="72">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,0,0" id="73">
      <find>S.0.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">array as ref</schemavariable>
      <schemavariable name="%t">$null as ref</schemavariable>
      <typevariable name="u">ref</typevariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,0" id="74">
      <find>S.0</find>
      <schemavariable name="%t">array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0,0,0" id="75">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1" id="76">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[15;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_2_int := $load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1" id="77">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_2_int := $load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int }([16;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1" id="78">
      <find>S.0.9</find>
      <schemavariable name="%t">$load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_goto2" path="0,0,1" id="79">
      <find>S.0</find>
      <schemavariable name="%k">19 as int</schemavariable>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[16;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%n">17 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0,1,0" id="80">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[17;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$gte($stack_1_int as int,$stack_2_int as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="81">
      <find>A.8</find>
      <schemavariable name="%t">$gte($stack_1_int as int,$stack_2_int as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="0,0,1,0" id="82">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[18;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%n">35 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,0" id="83">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[35;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := result as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="84">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_1_int := result as int }([36;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="85">
      <find>S.0.9</find>
      <schemavariable name="%t">result as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0,1,0" id="86">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[36;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$eq($result as int,$stack_1_int as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="87">
      <find>A.9</find>
      <schemavariable name="%t">$eq($result as int,$stack_1_int as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0" id="88">
      <find>S.0.0</find>
      <schemavariable name="%a">[37;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="89">
      <find>S.0</find>
      <schemavariable name="%t">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="90">
      <find>S.0.10</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="91">
      <find>S.0.11</find>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="t">set(int)</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="0,0,1,0" id="92">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,0" id="93">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,0" id="94">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,0,0" id="95">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,0,0" id="96">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,0,0" id="97">
      <find>S.2</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,0,0" id="98">
      <find>S.2</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,0,0,0" id="99">
      <find>S.2</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,0,0,0" id="100">
      <find>S.2</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,0,0,0" id="101">
      <find>S.2</find>
      <assume>A.10</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0,0,1" id="102">
      <find>S.2.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,0,1" id="103">
      <find>S.2</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,0,1" id="104">
      <find>S.2.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,0,1" id="105">
      <find>S.2.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,0,1" id="106">
      <find>S.2.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,0,1" id="107">
      <find>S.2.0.0.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,0,1" id="108">
      <find>S.2.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,0,1" id="109">
      <find>S.2.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,0,1" id="110">
      <find>S.2.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,0,0,1" id="111">
      <find>S.2.1</find>
      <schemavariable name="%b">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,0,1" id="112">
      <find>S.2.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,0,0,1" id="113">
      <find>S.2.0.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,0,1" id="114">
      <find>S.2.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,0,1" id="115">
      <find>S.2.0.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,0,0,1" id="116">
      <find>S.2.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,0,1" id="117">
      <find>S.2</find>
      <schemavariable name="%a">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,0,0,1" id="118">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,0,0,1" id="119">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,0,1,0,0,1" id="120">
      <find>S.2.1</find>
      <assume>A.8</assume>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">$result as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,0,1" id="121">
      <find>S.2</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0,0,1,0,0,1" id="122">
      <find>S.2</find>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,0,1" id="123">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1" id="124">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1" id="125">
      <find>S.0.11</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0,1" id="126">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1" id="127">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1" id="128">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,0,1" id="129">
      <find>S.0.0.0.1</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1" id="130">
      <find>S.0.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1" id="131">
      <find>S.0.0.0.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1" id="132">
      <find>S.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1" id="133">
      <find>S.0.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1" id="134">
      <find>S.0.0.0.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,0,1" id="135">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,0,1" id="136">
      <find>S.0.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,0,1" id="137">
      <find>S.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,0 as int) as bool,$eq(0 as int,$result as int) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="0,0,1,0,1" id="138">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,0,1" id="139">
      <find>S.2</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,0" id="140">
      <find>S.2</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,0,1,0" id="141">
      <find>S.2</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,0,1,0" id="142">
      <find>S.2</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,0,1,0" id="143">
      <find>S.2</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,setA as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x4</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,0,1,0" id="144">
      <find>S.2</find>
      <schemavariable name="%b">$mem(x4 as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,0,1,0" id="145">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,0,1,0" id="146">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,0,1,0" id="147">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0,1,1" id="148">
      <find>S.2.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1" id="149">
      <find>S.2</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1" id="150">
      <find>S.2.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,1,1" id="151">
      <find>S.2.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1" id="152">
      <find>S.2.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1" id="153">
      <find>S.2.0.0.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1" id="154">
      <find>S.2.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1" id="155">
      <find>S.2.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1" id="156">
      <find>S.2.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,0,1,1" id="157">
      <find>S.2.1</find>
      <schemavariable name="%b">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1,1" id="158">
      <find>S.2.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,0,1,1" id="159">
      <find>S.2.0.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,1,1" id="160">
      <find>S.2.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1,1" id="161">
      <find>S.2.0.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,0,1,1" id="162">
      <find>S.2.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,1,1" id="163">
      <find>S.2</find>
      <schemavariable name="%a">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,0,1,1" id="164">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,0,1,1" id="165">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,0,1,0,1,1" id="166">
      <find>S.2.1</find>
      <assume>A.8</assume>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">$result as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1" id="167">
      <find>S.2</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0,0,1,0,1,1" id="168">
      <find>S.2</find>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0,1,1" id="169">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[19;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$not($gte($stack_1_int as int,$stack_2_int as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="170">
      <find>A.8</find>
      <schemavariable name="%t">$not($gte($stack_1_int as int,$stack_2_int as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,0,1,1" id="171">
      <find>A.8</find>
      <schemavariable name="%b">$gte(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="0,0,1,1" id="172">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[20;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%n">21 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,1" id="173">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[21;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="174">
      <find>S.0</find>
      <schemavariable name="%t">{ $markC := 1 as int }([22;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="175">
      <find>S.0.9</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1" id="176">
      <find>S.0.0</find>
      <schemavariable name="%a">[22;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="177">
      <find>S.0</find>
      <schemavariable name="%t">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="178">
      <find>S.0.10</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="179">
      <find>S.0.11</find>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="t">set(int)</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="0,0,1,1" id="180">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,1" id="181">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,0" id="182">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,1,0" id="183">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,1,0" id="184">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,1,0" id="185">
      <find>S.3</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,0,0" id="186">
      <find>S.3</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,1,0,0" id="187">
      <find>S.3</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,1,0,0" id="188">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,0,0" id="189">
      <find>S.3</find>
      <assume>A.8</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1,0,1" id="190">
      <find>S.3.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,0,1" id="191">
      <find>S.3</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,0,1" id="192">
      <find>S.3.0.0.1.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,0,1" id="193">
      <find>S.3.0.0.1.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,0,1" id="194">
      <find>S.3.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,0,1" id="195">
      <find>S.3.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,0,1" id="196">
      <find>S.3.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,1,0,1" id="197">
      <find>S.3.1</find>
      <schemavariable name="%b">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,0,1" id="198">
      <find>S.3.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,0,1" id="199">
      <find>S.3.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,0,1" id="200">
      <find>S.3.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,0,1" id="201">
      <find>S.3</find>
      <schemavariable name="%a">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="0,0,1,1,0,1" id="202">
      <find>S.3</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,0,1" id="203">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,0,1" id="204">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="equality_comm" path="0,0,1,1,0,1" id="205">
      <find>A.0</find>
      <schemavariable name="%u">setA as set(int)</schemavariable>
      <schemavariable name="%t">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,0,1,1,0,1" id="206">
      <find>A.7.0.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="forall_left_hide" path="0,0,1,1,0,1" id="207">
      <find>A.7</find>
      <schemavariable name="%inst">$load_heap($heap as heap,array as ref,$array_index(0 as int) as field) as int</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,0,1,1,0,1" id="208">
      <find>A.7</find>
      <schemavariable name="%b">$mem($load_heap($heap as heap,array as ref,$array_index(0 as int) as field) as int,seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,0,1" id="209">
      <find>A.0</find>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,0,1" id="210">
      <find>S.3</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">$load_heap($heap as heap,array as ref,$array_index(0 as int) as field) as int</schemavariable>
      <schemavariable name="%s">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="lenOfInArrayAsIntSeq" path="0,0,1,1,0,1" id="211">
      <find>S.3.0.0.1.1</find>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%a">array as ref</schemavariable>
      <typevariable name="a">ref</typevariable>
      <typevariable name="h">heap</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,0,1" id="212">
      <find>S.3.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,0,1,1,0,1" id="213">
      <find>S.3</find>
      <schemavariable name="%inst">0 as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,$load_heap($heap as heap,array as ref,$array_index(0 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,0,1" id="214">
      <find>S.3</find>
      <schemavariable name="%a">$and($lte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(0 as int) as field) as int,seqError as int) as int,$load_heap($heap as heap,array as ref,$array_index(0 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,0,1,0" id="215">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,0,1,1" id="216">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,1,1" id="217">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1" id="218">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1" id="219">
      <find>S.0.11</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1,1" id="220">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1" id="221">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="222">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,1,1" id="223">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="224">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,1,1" id="225">
      <find>S.0.0.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="226">
      <find>S.0.0.0.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="227">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="228">
      <find>S.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="229">
      <find>S.0.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="0,0,1,1,1" id="230">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%t">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,1,1" id="231">
      <find>S.0.0.0.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,1" id="232">
      <find>S.0.0.1.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,1,1" id="233">
      <find>S.0.0.1</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="234">
      <find>S.0.0</find>
      <schemavariable name="%a">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,1" id="235">
      <find>S.0.1.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,1,1" id="236">
      <find>S.0.1</find>
      <schemavariable name="%b">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="237">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1" id="238">
      <find>S.0</find>
      <schemavariable name="%a">$eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,1,1,0" id="239">
      <find>S.4</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1,0,0" id="240">
      <find>S.4</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,1,1,0,0" id="241">
      <find>S.4</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,1,1,0,0" id="242">
      <find>S.4</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,1,1,0,0" id="243">
      <find>S.4</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,setA as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x3</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,1,1,0,0" id="244">
      <find>S.4</find>
      <schemavariable name="%b">$mem(x3 as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0" id="245">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,0" id="246">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="equality_comm" path="0,0,1,1,1,0,0" id="247">
      <find>A.0</find>
      <schemavariable name="%u">setA as set(int)</schemavariable>
      <schemavariable name="%t">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,0,1,1,1,0,0" id="248">
      <find>S.0.0</find>
      <assume>A.0</assume>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="0,0,1,1,1,0,0" id="249">
      <find>S.0</find>
      <schemavariable name="%e">\var e as int</schemavariable>
      <schemavariable name="%a">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%b">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="0,0,1,1,1,0,0" id="250">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var e as int,seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,0" id="251">
      <find>A.0</find>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,1,1,0,0" id="252">
      <find>S.0</find>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%b">$eq($mem(\var e as int,seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)) as bool,$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var e as int)">e1</property>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,0,0" id="253">
      <find>S.0.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e1 as int</schemavariable>
      <schemavariable name="%s">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="lenOfInArrayAsIntSeq" path="0,0,1,1,1,0,0" id="254">
      <find>S.0.0.0.0.1.1</find>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%a">array as ref</schemavariable>
      <typevariable name="a">ref</typevariable>
      <typevariable name="h">heap</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,0,0" id="255">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,0,0" id="256">
      <find>S.0.1</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e1 as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,0,1,1,1,0,0" id="257">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,0,1,1,1,0,0" id="258">
      <find>S.0.1.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,0,0" id="259">
      <find>S.0.1.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,0 as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,0" id="260">
      <find>S.0.1.0.1.0.1.0.0.1</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,0" id="261">
      <find>S.0.1.0.1.0.1.0.1.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,0" id="262">
      <find>S.0.1.0.1.0.1.1.2.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,0" id="263">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="eq_to_imp" path="0,0,1,1,1,0,0,0" id="264">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,0,0" id="265">
      <find>S.0</find>
      <schemavariable name="%a">$impl((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,1,1,0,0,0,0" id="266">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,0,1,1,1,0,0,0,0" id="267">
      <find>A.9</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,e1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i7</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,0" id="268">
      <find>A.9</find>
      <schemavariable name="%a">$and($lte(0 as int,i7 as int) as bool,$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i7 as int) as bool,$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(i7 as int) as field) as int,seqError as int) as int,e1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,0" id="269">
      <find>A.9</find>
      <schemavariable name="%a">$lte(0 as int,i7 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,0,0,0" id="270">
      <find>A.10.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index(i7 as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i7 as int) as bool,$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0,0,0,0" id="271">
      <find>A.12.0</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i7 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,1,1,0,0,0,0,0" id="272">
      <find>A.12</find>
      <schemavariable name="%a">$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0,0,0,0" id="273">
      <find>A.11</find>
      <assume>A.12</assume>
      <schemavariable name="%b">$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,0,0,0,0" id="274">
      <find>A.11</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,0,0,0" id="275">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,0,0,0,1" id="276">
      <find>A.10</find>
      <schemavariable name="%u">e1 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,0,0,0,1" id="277">
      <find>S.4</find>
      <schemavariable name="%a">$lte(0 as int,i7 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,0,1,0" id="278">
      <find>S.4</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i7 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,0,1,1" id="279">
      <find>S.4</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lt(i7 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,1,1,0,0,0,1" id="280">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,0,1,1,1,0,0,0,1" id="281">
      <find>A.9</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i8</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1" id="282">
      <find>A.9</find>
      <schemavariable name="%a">$and($lte(0 as int,i8 as int) as bool,$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i8 as int) as bool,$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,i8 as int) as bool,$lt(i8 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(i8 as int) as field) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1" id="283">
      <find>A.9</find>
      <schemavariable name="%a">$lte(0 as int,i8 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,0,0,1" id="284">
      <find>A.10.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,i8 as int) as bool,$lt(i8 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(i8 as int) as field) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i8 as int) as bool,$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1,0" id="285">
      <find>A.12</find>
      <schemavariable name="%a">$lte(0 as int,i8 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,0,0,1,0" id="286">
      <find>A.10.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index(i8 as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i8 as int) as bool,$lt(i8 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1,0,0" id="287">
      <find>A.14</find>
      <schemavariable name="%a">$lte(0 as int,i8 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i8 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0,0,1,0,0" id="288">
      <find>A.9</find>
      <assume>A.14</assume>
      <schemavariable name="%b">$lte(0 as int,i8 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,0,0,1,0,0" id="289">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0,0,1,0,0" id="290">
      <find>A.10</find>
      <assume>A.12</assume>
      <schemavariable name="%b">$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,0,0,1,0,0" id="291">
      <find>A.10</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0,0,1,0,0" id="292">
      <find>A.10</find>
      <assume>A.12</assume>
      <schemavariable name="%b">$lte(0 as int,i8 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,0,0,1,0,0" id="293">
      <find>A.10</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,0,1,0,0" id="294">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,0,0,1,0,1" id="295">
      <find>A.10</find>
      <schemavariable name="%u">e1 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,0,0,1,0,1" id="296">
      <find>S.4</find>
      <schemavariable name="%a">$lte(0 as int,i8 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i8 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,1,0,1,0" id="297">
      <find>S.4</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i8 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0,0,1,0,1,1" id="298">
      <find>A.9</find>
      <assume>A.12</assume>
      <schemavariable name="%b">$lte(0 as int,i8 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,0,0,1,0,1,1" id="299">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,0,0,1,0,1,1" id="300">
      <find>A.10</find>
      <assume>A.12</assume>
      <schemavariable name="%b">$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,0,0,1,0,1,1" id="301">
      <find>A.10</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,0,1,1,1,0,0,0,1,0,1,1" id="302">
      <find>S.0.0.1.1</find>
      <assume>A.9</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,0,1,0,1,1" id="303">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,0,0,1,1" id="304">
      <find>A.10</find>
      <schemavariable name="%u">e1 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,0,0,1,1" id="305">
      <find>S.4</find>
      <schemavariable name="%a">$lte(0 as int,i8 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,1,1,0" id="306">
      <find>S.4</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i8 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,1,1,1" id="307">
      <find>S.4</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lt(i8 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,1" id="308">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1,1,0,1" id="309">
      <find>S.4.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1,0,1" id="310">
      <find>S.4</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,0,1" id="311">
      <find>S.4.0.0.1.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1,0,1" id="312">
      <find>S.4.0.0.1.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,0,1" id="313">
      <find>S.4.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1,0,1" id="314">
      <find>S.4.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,0,1" id="315">
      <find>S.4.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,1,1,0,1" id="316">
      <find>S.4.1</find>
      <schemavariable name="%b">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,1,0,1" id="317">
      <find>S.4.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,0,1" id="318">
      <find>S.4.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,0,1" id="319">
      <find>S.4.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,0,1" id="320">
      <find>S.4</find>
      <schemavariable name="%a">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="0,0,1,1,1,0,1" id="321">
      <find>S.4</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,1" id="322">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,1" id="323">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="0,0,1,1,1,0,1" id="324">
      <find>A.0</find>
      <schemavariable name="%e">\var e as int</schemavariable>
      <schemavariable name="%a">seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%b">setA as set(int)</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="0,0,1,1,1,0,1" id="325">
      <find>S.0</find>
      <schemavariable name="%e">\var e as int</schemavariable>
      <schemavariable name="%a">setA as set(int)</schemavariable>
      <schemavariable name="%b">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,1,1,0,1" id="326">
      <find>S.0</find>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%b">$equiv($mem(\var e as int,setA as set(int)) as bool,$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="skolemName(\var e as int)">e2</property>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="0,0,1,1,1,0,1" id="327">
      <find>A.0.0</find>
      <schemavariable name="%a">$mem(\var e as int,seqAsSet(arrayAsIntSeq($heap as heap,array as ref) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$mem(\var e as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="0,0,1,1,1,0,1" id="328">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e2 as int,setA as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$mem(e2 as int,seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,0,1" id="329">
      <find>A.0.0.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%s">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="lenOfInArrayAsIntSeq" path="0,0,1,1,1,0,1" id="330">
      <find>A.0.0.0.0.0.1.1</find>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%a">array as ref</schemavariable>
      <typevariable name="a">ref</typevariable>
      <typevariable name="h">heap</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,0,1" id="331">
      <find>A.0.0.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,0,1" id="332">
      <find>S.0.1</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e2 as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,0,1,1,1,0,1" id="333">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,0,1,1,1,0,1" id="334">
      <find>S.0.1.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,0,1" id="335">
      <find>S.0.1.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,0 as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,1" id="336">
      <find>S.0.1.0.1.0.1.0.0.1</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,1" id="337">
      <find>S.0.1.0.1.0.1.0.1.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,1" id="338">
      <find>S.0.1.0.1.0.1.1.2.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,1" id="339">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="eq_to_imp" path="0,0,1,1,1,0,1,0" id="340">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e2 as int,setA as set(int)) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,1,0" id="341">
      <find>S.0</find>
      <schemavariable name="%a">$impl($mem(e2 as int,setA as set(int)) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool,$mem(e2 as int,setA as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,1,1,0,1,0,0" id="342">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e2 as int,setA as set(int)) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,1,0,0" id="343">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,1,1,0,1,0,1" id="344">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(e2 as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,0,1,1,1,0,1,0,1" id="345">
      <find>A.8</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(\var i as int) as field) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i9</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,1,0,1" id="346">
      <find>A.8</find>
      <schemavariable name="%a">$and($lte(0 as int,i9 as int) as bool,$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i9 as int) as bool,$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,i9 as int) as bool,$lt(i9 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(i9 as int) as field) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,1,0,1" id="347">
      <find>A.8</find>
      <schemavariable name="%a">$lte(0 as int,i9 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,1,0,1" id="348">
      <find>A.9.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,i9 as int) as bool,$lt(i9 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index(i9 as int) as field) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i9 as int) as bool,$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,1,0,1,0" id="349">
      <find>A.11</find>
      <schemavariable name="%a">$lte(0 as int,i9 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,1,0,1,0" id="350">
      <find>A.9.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index(i9 as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i9 as int) as bool,$lt(i9 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,1,0,1,0,0" id="351">
      <find>A.13</find>
      <schemavariable name="%a">$lte(0 as int,i9 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i9 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,1,0,1,0,0" id="352">
      <find>A.8</find>
      <assume>A.13</assume>
      <schemavariable name="%b">$lte(0 as int,i9 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,1,0,1,0,0" id="353">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,1,0,1,0,0" id="354">
      <find>A.9</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,1,0,1,0,0" id="355">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,1,0,1,0,0" id="356">
      <find>A.9</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i9 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,1,0,1,0,0" id="357">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,1,0,1,0,0" id="358">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,1,0,1,0,1" id="359">
      <find>A.9</find>
      <schemavariable name="%u">e2 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,1,0,1,0,1" id="360">
      <find>S.4</find>
      <schemavariable name="%a">$lte(0 as int,i9 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i9 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,1,0,1,0,1,0" id="361">
      <find>S.4</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lte(0 as int,i9 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,1,0,1,0,1,1" id="362">
      <find>A.8</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i9 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,1,0,1,0,1,1" id="363">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,0,1,0,1,0,1,1" id="364">
      <find>A.9</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,0,1,0,1,0,1,1" id="365">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,0,1,1,1,0,1,0,1,0,1,1" id="366">
      <find>S.0.0</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,1,0,1,0,1,1" id="367">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,1,0,1,1" id="368">
      <find>A.9</find>
      <schemavariable name="%u">e2 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,1,0,1,1" id="369">
      <find>S.4</find>
      <schemavariable name="%a">$lte(0 as int,i9 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,1,0,1,1,0" id="370">
      <find>S.4</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lte(0 as int,i9 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,1,0,1,1,1" id="371">
      <find>S.4</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lt(i9 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,1,1" id="372">
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,1,1,1" id="373">
      <find>S.4</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1,1,0" id="374">
      <find>S.4</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,1,1,1,0" id="375">
      <find>S.4</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,1,1,1,0" id="376">
      <find>S.4</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,1,1,1,0" id="377">
      <find>S.4</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,setA as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x5</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,1,1,1,0" id="378">
      <find>S.4</find>
      <schemavariable name="%b">$mem(x5 as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,1,0" id="379">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,1,0" id="380">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,1,0" id="381">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1,1,1,1" id="382">
      <find>S.4.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1,1,1" id="383">
      <find>S.4</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $exception := $null as ref || $old_heap := $heap as heap || result := 0 as int || i := 0 as int || $stack_1_int := 0 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,1,1" id="384">
      <find>S.4.0.0.1.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1,1,1" id="385">
      <find>S.4.0.0.1.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,1,1" id="386">
      <find>S.4.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1,1,1" id="387">
      <find>S.4.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,1,1" id="388">
      <find>S.4.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,1,1,1,1" id="389">
      <find>S.4.1</find>
      <schemavariable name="%b">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,1,1,1" id="390">
      <find>S.4.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,1,1" id="391">
      <find>S.4.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,1,1" id="392">
      <find>S.4.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),0 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,1,1" id="393">
      <find>S.4</find>
      <schemavariable name="%a">$eq(0 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="0,0,1,1,1,1,1" id="394">
      <find>S.4</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,0,1,1,1,1,1" id="395">
      <find>A.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,0,1,1,1,1,1" id="396">
      <find>A.2</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,1,1" id="397">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1" id="398">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }([26;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="399">
      <find>A.2</find>
      <schemavariable name="%a">$eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="400">
      <find>A.3</find>
      <schemavariable name="%a">$gte(i1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="401">
      <find>A.4</find>
      <schemavariable name="%a">$lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <schemavariable name="%b">$eq(sumA1 as int,result1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1" id="402">
      <find>A.5</find>
      <schemavariable name="%u">result1 as int</schemavariable>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,1" id="403">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[26;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($lte(0 as int,$stack_3_int as int) as bool,$lt($stack_3_int as int,$load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,0" id="404">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,$stack_3_int as int) as bool,$lt($stack_3_int as int,$load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,0" id="405">
      <find>S.0</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,0,0" id="406">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,0,1" id="407">
      <find>S.0</find>
      <assume>A.4</assume>
      <schemavariable name="%b">$lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,1,1" id="408">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[27;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq($null as ref,$stack_2_ref as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,0" id="409">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq($null as ref,$stack_2_ref as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,0" id="410">
      <find>S.0</find>
      <schemavariable name="%b">$eq($null as ref,array as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,0" id="411">
      <find>S.0.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">array as ref</schemavariable>
      <schemavariable name="%t">$null as ref</schemavariable>
      <typevariable name="u">ref</typevariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,1,1,0" id="412">
      <find>S.0</find>
      <schemavariable name="%t">array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0,1,1,0" id="413">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="414">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[28;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_2_int := $load_heap($heap as heap,$stack_2_ref as ref,$array_index($stack_3_int as int) as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="415">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_2_int := $load_heap($heap as heap,$stack_2_ref as ref,$array_index($stack_3_int as int) as field) as int }([29;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="416">
      <find>S.0.14</find>
      <schemavariable name="%t">$load_heap($heap as heap,$stack_2_ref as ref,$array_index($stack_3_int as int) as field) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="417">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[29;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := $iadd($stack_1_int as int,$stack_2_int as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="418">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_1_int := $iadd($stack_1_int as int,$stack_2_int as int) as int }([30;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="419">
      <find>S.0.14</find>
      <schemavariable name="%t">$iadd($stack_1_int as int,$stack_2_int as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := result1 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="iadd_to_plus" path="0,1,1,1" id="420">
      <find>S.0.14</find>
      <schemavariable name="%a">result1 as int</schemavariable>
      <schemavariable name="%b">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="421">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[30;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ result := $stack_1_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="422">
      <find>S.0</find>
      <schemavariable name="%t">{ result := $stack_1_int as int }([31;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int || $stack_1_int := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="423">
      <find>S.0.14</find>
      <schemavariable name="%t">$stack_1_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int || $stack_1_int := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="424">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[31;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ i := $iadd(i as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="425">
      <find>S.0</find>
      <schemavariable name="%t">{ i := $iadd(i as int,1 as int) as int }([32;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int || $stack_1_int := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || result := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="426">
      <find>S.0.14</find>
      <schemavariable name="%t">$iadd(i as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int || $stack_1_int := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || result := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="iadd_to_plus" path="0,1,1,1" id="427">
      <find>S.0.14</find>
      <schemavariable name="%a">i1 as int</schemavariable>
      <schemavariable name="%b">1 as int</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="428">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[32;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markC := 2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="429">
      <find>S.0</find>
      <schemavariable name="%t">{ $markC := 2 as int }([33;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int || $stack_1_int := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || result := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || i := $plus(i1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="430">
      <find>S.0.14</find>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int || $stack_1_int := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || result := $plus(result1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || i := $plus(i1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,1,1,1" id="431">
      <find>S.0.0</find>
      <schemavariable name="%a">[33;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1" id="432">
      <find>S.0.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1" id="433">
      <find>S.0.11.0</find>
      <assume>A.5</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1" id="434">
      <find>S.0.12.0</find>
      <assume>A.5</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="dprg_havoc" path="0,1,1,1" id="435">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%v">xA as int</schemavariable>
      <schemavariable name="%a">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="dprg_assume" path="0,1,1,1" id="436">
      <find>S.0.0.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;7;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(xA as int,sA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="437">
      <find>S.0.0.0.0.1</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;8;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sumA := $plus(sumA as int,xA as int) as int }</schemaupdate>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="438">
      <find>S.0.0.0.0.1.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;9;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := $diff(sA as set(int),singleton(xA as int) as set(int)) as set(int) }</schemaupdate>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="439">
      <find>S.0.0.0.0.1.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;10;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 2 as int }</schemaupdate>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,1,1,1" id="440">
      <find>S.0.0.0.0.1.0.0.0</find>
      <schemavariable name="%a">[&lt;11;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="441">
      <find>S.0</find>
      <schemavariable name="%t">(\exists x as int;{ xA := \var x as int }($and($mem(xA as int,sA as set(int)) as bool,{ sumA := $plus(sumA as int,xA as int) as int }({ sA := $diff(sA as set(int),singleton(xA as int) as set(int)) as set(int) }({ $markA := 2 as int }($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool)))) as bool)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int) || $old_heap := $old_heap1 as heap || $exception := $exception1 as ref || sumA := sumA1 as int || xA := xA1 as int || $markA := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_3_int := i1 as int || $stack_2_int := $load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int || $stack_1_int := $plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || result := $plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int || i := $plus(i1 as int,1 as int) as int || $markC := 2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,1,1,1" id="442">
      <find>S.0.0.1.0.0.0</find>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1" id="443">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%a">$impl($eq(2 as int,1 as int) as bool,$and($eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(i1 as int,1 as int) as int,0 as int) as bool,$and($lt($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,1,1,1" id="444">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,1,1,1" id="445">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%b">$and($eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1" id="446">
      <find>S.0.0.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,1,1,1" id="447">
      <find>S.0.0.0.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,1,1,1" id="448">
      <find>S.0.0.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,1,1,1" id="449">
      <find>S.0.0.0.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,i1 as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,1,1,1" id="450">
      <find>S.0.0.1.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,1,1,1" id="451">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%b">$and($eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(i1 as int,1 as int) as int,0 as int) as bool,$and($lt($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1" id="452">
      <find>S.0.0.1.0</find>
      <schemavariable name="%a">$and($eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,1,1,1" id="453">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,1,1,1" id="454">
      <find>S.0.0.1.1</find>
      <schemavariable name="%b">$eq($plus(sumA1 as int,\var x as int) as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,1,1,1" id="455">
      <find>S.0.0.1</find>
      <schemavariable name="%a">$and($eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,1,1,1" id="456">
      <find>S.0</find>
      <schemavariable name="%inst">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$and((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,\var x as int) as bool) as bool) as bool,$and($eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,1,1,1" id="457">
      <find>S.0.1.1.1</find>
      <schemavariable name="%t">$plus(sumA1 as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,1,1,1" id="458">
      <find>S.0.1.1</find>
      <schemavariable name="%a">$gte($plus(i1 as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1" id="459">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton($load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$gte($plus(i1 as int,1 as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,0" id="460">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,1,1,1,0,0" id="461">
      <find>S.0</find>
      <schemavariable name="%inst">0 as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,0,0" id="462">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,0,1" id="463">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1" id="464">
      <find>S.0</find>
      <schemavariable name="%a">$eq($diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton($load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$gte($plus(i1 as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="0,1,1,1,1,0" id="465">
      <find>S.0</find>
      <schemavariable name="%e">\var e as int</schemavariable>
      <schemavariable name="%a">$diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton($load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as set(int)) as set(int)</schemavariable>
      <schemavariable name="%b">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="0,1,1,1,1,0" id="466">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var e as int,$diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton($load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as set(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,1,1,1,1,0" id="467">
      <find>S.0</find>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%b">$eq($mem(\var e as int,$diff(seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int),singleton($load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as set(int)) as set(int)) as bool,$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var e as int)">e</property>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="0,1,1,1,1,0" id="468">
      <find>S.0.0</find>
      <schemavariable name="%x">e as int</schemavariable>
      <schemavariable name="%a">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%b">singleton($load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as set(int)</schemavariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1,1,0" id="469">
      <find>S.0.0.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,1,1,1,1,0" id="470">
      <find>S.0.0.0.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,1,1,1,1,0" id="471">
      <find>S.0.0.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,1,1,1,1,0" id="472">
      <find>S.0.0.0.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,i1 as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0,1,1,1,1,0" id="473">
      <find>S.0.0.1.0</find>
      <schemavariable name="%y">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%x">e as int</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1,1,0" id="474">
      <find>S.0.1</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),$plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,1,1,1,1,0" id="475">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">$plus(i1 as int,1 as int) as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,1,1,1,1,0" id="476">
      <find>S.0.1.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">$plus(i1 as int,1 as int) as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,1,1,1,1,0" id="477">
      <find>S.0.1.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="eq_to_imp" path="0,1,1,1,1,0" id="478">
      <find>S.0</find>
      <schemavariable name="%a">$and((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool,$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0" id="479">
      <find>S.0</find>
      <schemavariable name="%a">$impl($and((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool,$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool,$and((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool,$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1,1,1,1,0,0" id="480">
      <find>S.0</find>
      <schemavariable name="%a">$and((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool,$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0" id="481">
      <find>A.6</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,1,1,1,1,0,0" id="482">
      <find>A.7</find>
      <schemavariable name="%b">$eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,1,1,1,1,0,0" id="483">
      <find>A.6</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i5</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0" id="484">
      <find>A.6</find>
      <schemavariable name="%a">$and($lte(0 as int,i5 as int) as bool,$lt(i5 as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i5 as int) as bool,$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool,$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(i5 as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0" id="485">
      <find>A.6</find>
      <schemavariable name="%a">$lte(0 as int,i5 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i5 as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0" id="486">
      <find>A.7.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool,$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(i5 as int,i1 as int) as int) as field) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i5 as int) as bool,$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,0" id="487">
      <find>A.9</find>
      <schemavariable name="%a">$lte(0 as int,i5 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0" id="488">
      <find>A.7.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index($plus(i5 as int,i1 as int) as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool,$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,0,0" id="489">
      <find>A.11</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,0" id="490">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,0,0" id="491">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,0,0" id="492">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,0,0" id="493">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,0,0" id="494">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,0,0" id="495">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,1,1,1,1,0,0,0,0,0,0" id="496">
      <find>S.0</find>
      <schemavariable name="%inst">$minus(i5 as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,0,0" id="497">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,0,1" id="498">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,0,1" id="499">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,0,1" id="500">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,0,1" id="501">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,0,1" id="502">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,0,1" id="503">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,0" id="504">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,1,0" id="505">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,1,0" id="506">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,1" id="507">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,1,1" id="508">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,1,1" id="509">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,0,1" id="510">
      <find>A.7</find>
      <schemavariable name="%u">e as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,1" id="511">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,1,0" id="512">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,1,0,0" id="513">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,0,0" id="514">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,0,0" id="515">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,0,0" id="516">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,0,0" id="517">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,0,0" id="518">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,0,0" id="519">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,0,0,0" id="520">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,0,1" id="521">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,0,1" id="522">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,0,1" id="523">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,0,1" id="524">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,0,1" id="525">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,0,1" id="526">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,0,0,1" id="527">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,1,0,1" id="528">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,1,0" id="529">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,1,0" id="530">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,1,0" id="531">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,1,0" id="532">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,1,0" id="533">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,1,0" id="534">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,0,1,0" id="535">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,1,1" id="536">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,1,1" id="537">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,0,1,1" id="538">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,0,1,1" id="539">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,1,1" id="540">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,0,1,1" id="541">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,0,1,1" id="542">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,1,1" id="543">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,1,1,0" id="544">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,1,0,0" id="545">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,1,0,0" id="546">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,0,0" id="547">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,0,0" id="548">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,1,0,0" id="549">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,1,0,1" id="550">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,1,0,1" id="551">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,0,1" id="552">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,0,1" id="553">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,1,0,1" id="554">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,1,1,1" id="555">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i5 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i5 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,1,1,0" id="556">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,1,1,0" id="557">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,1,0" id="558">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,1,0" id="559">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,1,1,0" id="560">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,1,1,1,1" id="561">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,1,1,1,1" id="562">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,1,1" id="563">
      <find>S.0.0.1.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,1,1" id="564">
      <find>S.2.0</find>
      <assume>A.6</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,1,1,1" id="565">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,1" id="566">
      <find>A.7</find>
      <schemavariable name="%u">e as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,1" id="567">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,1,0" id="568">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,1,0,0" id="569">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i5 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,0,0,0" id="570">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,0,0,1" id="571">
      <find>S.3</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,1,0,1" id="572">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i5 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,0,1,0" id="573">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,0,1,1" id="574">
      <find>S.3</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,1,1" id="575">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,1,1,0" id="576">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i5 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,1,0,0" id="577">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,1,0,1" id="578">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,1,0,1" id="579">
      <find>S.2.0</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,1,0,1" id="580">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,1,1,1" id="581">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i5 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i5 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,1,1,0" id="582">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,1,1,1" id="583">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,1,1,1" id="584">
      <find>S.2.0</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,1,1,1" id="585">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1,1,1,1,0,1" id="586">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool,$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,1,1,1,1,0,1" id="587">
      <find>A.6</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i6</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,1" id="588">
      <find>A.6</find>
      <schemavariable name="%a">$and($lte(0 as int,i6 as int) as bool,$lt(i6 as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i6 as int) as bool,$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,1" id="589">
      <find>A.6</find>
      <schemavariable name="%a">$lte(0 as int,i6 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i6 as int,cond($lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1" id="590">
      <find>A.7.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as field) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i6 as int) as bool,$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,0" id="591">
      <find>A.7.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool,$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,1,0,0" id="592">
      <find>A.10</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,0,0" id="593">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,0,0" id="594">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,0,0,0,0" id="595">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,0,0,0" id="596">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,0,0,0,0" id="597">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,0,0,0" id="598">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,0,0,0,0" id="599">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,1,1,1,1,0,1,0,0,0,0,0" id="600">
      <find>S.0</find>
      <schemavariable name="%inst">$plus(i6 as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,0,0,0,0" id="601">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,0,0,1" id="602">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,0,0,0,1" id="603">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,0,0,1" id="604">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,0,0,0,1" id="605">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,0,0,0,1" id="606">
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,1,0,0,0,1" id="607">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,0,0,0,1" id="608">
      <find>A.13</find>
      <schemavariable name="%u">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,0,1" id="609">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,0,0,1" id="610">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,0,1" id="611">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,0,0,1" id="612">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,0,0,1" id="613">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,0,1" id="614">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,0,0,1,0" id="615">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,1,0,0" id="616">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,0,1,0,0" id="617">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,0,1,0,0" id="618">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,1,0,1" id="619">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,0,1,0,1" id="620">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,0,1,0,1" id="621">
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,1,0,0,1,1" id="622">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,0,0,1,1" id="623">
      <find>A.12</find>
      <schemavariable name="%u">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,0,1,1" id="624">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,0,1,1" id="625">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,0,1,1" id="626">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,0,1" id="627">
      <find>A.7</find>
      <schemavariable name="%u">e as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,0,1" id="628">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,0" id="629">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,0,1,0,0" id="630">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,0,0,0" id="631">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,0,0" id="632">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,0,0,0,0" id="633">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,0,0" id="634">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,1,0,0,0,0" id="635">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,0,0,0,0" id="636">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,0,0,0,0" id="637">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,0,1" id="638">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,0,0,0,1" id="639">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,0,1" id="640">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,1,0,0,0,1" id="641">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,0,0,0,1" id="642">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,0,0,0,1" id="643">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,0,0,1" id="644">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,1,0" id="645">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,0,0,1,0" id="646">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,1,0" id="647">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,1,0,0,1,0" id="648">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,0,0,1,0" id="649">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,0,0,1,0" id="650">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,1,1" id="651">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,0,0,1,1" id="652">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,0,1,1" id="653">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,1,0,0,1,1" id="654">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,0,0,1,1" id="655">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,0,0,1,1" id="656">
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,1,0,1,0,1" id="657">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,0,1,0,1" id="658">
      <find>A.11</find>
      <schemavariable name="%u">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,0,1" id="659">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,1,0" id="660">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,0,1,0" id="661">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,1,0" id="662">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,1,0,1,0" id="663">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,0,1,0" id="664">
      <find>A.10.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,0,1,0" id="665">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,1,1" id="666">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,0,1,1" id="667">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,0,1,1" id="668">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,1,0,1,0,1,1" id="669">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,0,1,1" id="670">
      <find>A.10.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,0,1,1" id="671">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,1" id="672">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,0,1,1,0" id="673">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,1,0,0" id="674">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,1,0,0,0" id="675">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,1,0,0,0" id="676">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,1,0,0,0" id="677">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,1,0,0,0" id="678">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,1,0,0,1" id="679">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,1,0,0,1" id="680">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,1,0,0,1" id="681">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,1,0,0,1" id="682">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,1,0,1" id="683">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,1,0,1,0" id="684">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,1,0,1,0" id="685">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,1,0,1,0" id="686">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,1,0,1,0" id="687">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,1,0,1,1" id="688">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,1,0,1,1" id="689">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,1,0,1,1" id="690">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,1,0,1,1" id="691">
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,1,0,1,1,1" id="692">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,0,1,1,1" id="693">
      <find>A.10</find>
      <schemavariable name="%u">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,0,1,1,1" id="694">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i6 as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i6 as int,$plus(i1 as int,1 as int) as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,1,1,0" id="695">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,1,1,0" id="696">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,1,1,0" id="697">
      <find>A.10.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,1,1,0" id="698">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,1,0,1,1,1,1" id="699">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,1,0,1,1,1,1" id="700">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,0,1,1,1,1" id="701">
      <find>A.10.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,0,1,1,1,1" id="702">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,1" id="703">
      <find>A.7</find>
      <schemavariable name="%u">e as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,1" id="704">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(i1 as int,1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,0" id="705">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,1,0,0" id="706">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,0,0,0" id="707">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,i6 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,0,0,0,0" id="708">
      <find>S.2</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,0,0,0,1" id="709">
      <find>S.2</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,0,0,1" id="710">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,i6 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,0,0,1,0" id="711">
      <find>S.2</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,0,0,1,1" id="712">
      <find>S.2</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,1,1,0,1" id="713">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,1,0,1" id="714">
      <find>A.10</find>
      <schemavariable name="%u">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,0,1" id="715">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i6 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,0,1,0" id="716">
      <find>S.1</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,0,1,1" id="717">
      <find>S.1</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,1" id="718">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,i1 as int) as int) as bool,$lt($plus(\var i as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(\var i as int,i1 as int) as int) as field) as int,seqError as int) as int,seqError as int) as int,e as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,1,1,1,0" id="719">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,1,0,0" id="720">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,i6 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,1,0,0,0" id="721">
      <find>S.2</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,1,1,0,0,1" id="722">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,1,1,0,0,1" id="723">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,1,0,1" id="724">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,i6 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,1,0,1,0" id="725">
      <find>S.2</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,1,1,0,1,1" id="726">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,1,1,0,1,1" id="727">
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,1,1,1,1" id="728">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,1,1,1,1" id="729">
      <find>A.9</find>
      <schemavariable name="%u">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,1,1,1,1" id="730">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i6 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i6 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,$plus(i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,1,1,1,1,0" id="731">
      <find>S.1</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,1,1,1,1,1" id="732">
      <find>A.9.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1,1,1,1,1" id="733">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,1" id="734">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1" id="735">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }([11;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="736">
      <find>A.2</find>
      <schemavariable name="%a">$eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="737">
      <find>A.3</find>
      <schemavariable name="%a">$gte(i1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$eq(sumA1 as int,result1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1" id="738">
      <find>A.4</find>
      <schemavariable name="%u">result1 as int</schemavariable>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="1" id="739">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[11;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="740">
      <find>A.5</find>
      <schemavariable name="%t">$wellformed($heap as heap) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="741">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[12;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := i as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="742">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_1_int := i as int }([13;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="743">
      <find>S.0.14</find>
      <schemavariable name="%t">i as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_1_int := $stack_1_int1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="744">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[13;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="745">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_2_ref := array as ref }([14;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="746">
      <find>S.0.14</find>
      <schemavariable name="%t">array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $stack_2_ref := $stack_2_ref1 as ref || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="1" id="747">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[14;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq($null as ref,$stack_2_ref as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="748">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq($null as ref,$stack_2_ref as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0" id="749">
      <find>S.0</find>
      <schemavariable name="%b">$eq($null as ref,array as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,0" id="750">
      <find>S.0.1</find>
      <assume>A.6</assume>
      <schemavariable name="%u">array as ref</schemavariable>
      <schemavariable name="%t">$null as ref</schemavariable>
      <typevariable name="u">ref</typevariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,0" id="751">
      <find>S.0</find>
      <schemavariable name="%t">array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0" id="752">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1" id="753">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[15;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_2_int := $load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="754">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_2_int := $load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int }([16;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="755">
      <find>S.0.14</find>
      <schemavariable name="%t">$load_heap($heap as heap,$stack_2_ref as ref,$array_length as field) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_2_int := $stack_2_int1 as int || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_goto2" path="1,1" id="756">
      <find>S.0</find>
      <schemavariable name="%k">19 as int</schemavariable>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[16;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">17 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="1,1,0" id="757">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte($stack_1_int as int,$stack_2_int as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="758">
      <find>A.6</find>
      <schemavariable name="%t">$gte($stack_1_int as int,$stack_2_int as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0" id="759">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[18;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">35 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0" id="760">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[35;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $stack_1_int := result as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="761">
      <find>S.0</find>
      <schemavariable name="%t">{ $stack_1_int := result as int }([36;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="762">
      <find>S.0.14</find>
      <schemavariable name="%t">result as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="1,1,0" id="763">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[36;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq($result as int,$stack_1_int as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="764">
      <find>A.7</find>
      <schemavariable name="%t">$eq($result as int,$stack_1_int as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,0" id="765">
      <find>A.7</find>
      <schemavariable name="%u">result1 as int</schemavariable>
      <schemavariable name="%t">$result as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0" id="766">
      <find>S.0.0</find>
      <schemavariable name="%a">[37;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="1,1,0" id="767">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,0" id="768">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,0" id="769">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,0" id="770">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,0" id="771">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,0,0" id="772">
      <find>S.1</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,0,0" id="773">
      <find>S.1</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,0,0,0" id="774">
      <find>S.1</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,0,0" id="775">
      <find>S.1</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,0,0" id="776">
      <find>S.1</find>
      <assume>A.8</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,0,1" id="777">
      <find>S.1.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,0,1" id="778">
      <find>S.1</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,0,1" id="779">
      <find>S.1.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,0,1" id="780">
      <find>S.1.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,0,1" id="781">
      <find>S.1.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,0,0,1" id="782">
      <find>S.1.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,0,1" id="783">
      <find>S.1.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,0,1" id="784">
      <find>S.1.0.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,0,1" id="785">
      <find>S.1.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,0,1" id="786">
      <find>S.1.0.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,0,1" id="787">
      <find>S.1.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,0,1" id="788">
      <find>S.1</find>
      <schemavariable name="%a">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,0,0,1" id="789">
      <find>A.4.0</find>
      <assume>A.7</assume>
      <schemavariable name="%u">$result as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,0,0,1" id="790">
      <find>A.4</find>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">$result as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,0,1" id="791">
      <find>S.1</find>
      <assume>A.4</assume>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1" id="792">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="793">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="794">
      <find>S.0.14</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,1" id="795">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="796">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1" id="797">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,0,1" id="798">
      <find>S.0.0.0.1</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1" id="799">
      <find>S.0.0.0.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,0,1" id="800">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,0,1" id="801">
      <find>S.0.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,0,1" id="802">
      <find>S.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,0 as int) as bool,$eq(sumA1 as int,$result as int) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="1,1,0,1" id="803">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,0,1" id="804">
      <find>S.1</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,0" id="805">
      <find>S.1</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,0,1,0" id="806">
      <find>S.1</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,0" id="807">
      <find>S.1</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,0" id="808">
      <find>S.1</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,sA1 as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,0" id="809">
      <find>S.1</find>
      <schemavariable name="%b">$mem(x as int,sA1 as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,0,1,0" id="810">
      <find>A.4.0</find>
      <assume>A.7</assume>
      <schemavariable name="%u">$result as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,0,1,0" id="811">
      <find>A.4</find>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">$result as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,0,1,0" id="812">
      <find>A.8.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="1,1,0,1,0" id="813">
      <find>A.8</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">x as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,1,0,1,0" id="814">
      <find>A.8</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool,$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),\var i as int) as int,x as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i2</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,0" id="815">
      <find>A.8</find>
      <schemavariable name="%a">$and($lte(0 as int,i2 as int) as bool,$lt(i2 as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),i2 as int) as int,x as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,0" id="816">
      <find>A.8</find>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i2 as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="1,1,0,1,0" id="817">
      <find>A.9.0</find>
      <schemavariable name="%i">i2 as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="1,1,0,1,0" id="818">
      <find>A.9.0.1</find>
      <schemavariable name="%i">$plus(i2 as int,i1 as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="1,1,0,1,0" id="819">
      <find>A.10.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,0,1,0" id="820">
      <find>A.9.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,$plus(i2 as int,i1 as int) as int) as bool,$lt($plus(i2 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(i2 as int,i1 as int) as int) as field) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i2 as int) as bool,$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,0,0" id="821">
      <find>A.11</find>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,0,1,0,0" id="822">
      <find>A.9.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index($plus(i2 as int,i1 as int) as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,$plus(i2 as int,i1 as int) as int) as bool,$lt($plus(i2 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,0,0,0" id="823">
      <find>A.13</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i2 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i2 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,0,1,0,0,0" id="824">
      <find>A.10.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,0,0" id="825">
      <find>A.8</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,0,0" id="826">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,0,0" id="827">
      <find>A.9</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,0,0" id="828">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,0,0,0" id="829">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,0,1" id="830">
      <find>A.8</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,0,1" id="831">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,0,0,1" id="832">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,0,1,0,0,1" id="833">
      <find>A.10.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,0,0,1,0" id="834">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i2 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i2 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,1,0,0" id="835">
      <find>A.8</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,1,0,0" id="836">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,1,0,0" id="837">
      <find>A.9</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,1,0,0" id="838">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,0,1,0,0" id="839">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,1,0,1" id="840">
      <find>A.8</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,1,0,1" id="841">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,1,0,1" id="842">
      <find>A.9</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,1,0,1" id="843">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,0,1,0,1" id="844">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,0,0,1,1" id="845">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i2 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i2 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,1,1,0" id="846">
      <find>A.8</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,1,1,0" id="847">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,0,1,1,0" id="848">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,0,1,0,0,1,1,1" id="849">
      <find>A.8</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,0,1,0,0,1,1,1" id="850">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,0,1,1,1" id="851">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,0,1,0,1" id="852">
      <find>A.10.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,0,1,0" id="853">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,0,1,0,0" id="854">
      <find>S.1</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,0,1,0,1" id="855">
      <find>S.1</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,0,1,1" id="856">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i2 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,0,1,1,0" id="857">
      <find>S.1</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,1,1,1" id="858">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,1,1" id="859">
      <find>S.1.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="860">
      <find>S.1</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $stack_1_int := result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1" id="861">
      <find>S.1.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1" id="862">
      <find>S.1.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1" id="863">
      <find>S.1.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,0,1,1" id="864">
      <find>S.1.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1,1" id="865">
      <find>S.1.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,1,1" id="866">
      <find>S.1.0.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1" id="867">
      <find>S.1.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1,1" id="868">
      <find>S.1.0.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,1,1" id="869">
      <find>S.1.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1" id="870">
      <find>S.1</find>
      <schemavariable name="%a">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,0,1,1" id="871">
      <find>A.4.0</find>
      <assume>A.7</assume>
      <schemavariable name="%u">$result as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,0,1,1" id="872">
      <find>A.4</find>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">$result as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,1" id="873">
      <find>S.1</find>
      <assume>A.4</assume>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="1,1,1" id="874">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[19;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($gte($stack_1_int as int,$stack_2_int as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="875">
      <find>A.6</find>
      <schemavariable name="%t">$not($gte($stack_1_int as int,$stack_2_int as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1" id="876">
      <find>A.6</find>
      <schemavariable name="%b">$gte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1" id="877">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[20;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">21 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1" id="878">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[21;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="879">
      <find>S.0</find>
      <schemavariable name="%t">{ $markC := 1 as int }([22;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="880">
      <find>S.0.14</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || $markC := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1" id="881">
      <find>S.0.0</find>
      <schemavariable name="%a">[22;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="1,1,1" id="882">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,1" id="883">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0" id="884">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1,0" id="885">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,0" id="886">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,1,0" id="887">
      <find>S.2</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,0" id="888">
      <find>S.2</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,1,0,0" id="889">
      <find>S.2</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1,0,0" id="890">
      <find>S.2</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,0" id="891">
      <find>S.2</find>
      <assume>A.6</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1" id="892">
      <find>S.2.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1" id="893">
      <find>S.2</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,0,1" id="894">
      <find>S.2.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,1,0,1" id="895">
      <find>S.2.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,0,1" id="896">
      <find>S.2.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,0,1" id="897">
      <find>S.2.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,0,1" id="898">
      <find>S.2.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,0,1" id="899">
      <find>S.2</find>
      <schemavariable name="%a">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="1,1,1,0,1" id="900">
      <find>S.2</find>
    </ruleApplication>
    <ruleApplication rule="forall_left_hide" path="1,1,1,0,1" id="901">
      <find>A.6</find>
      <schemavariable name="%inst">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,sA1 as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1" id="902">
      <find>A.6</find>
      <schemavariable name="%b">$mem($load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int,sA1 as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,0,1" id="903">
      <find>S.2.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="1,1,1,0,1" id="904">
      <find>S.2</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="1,1,1,0,1" id="905">
      <find>S.2</find>
      <schemavariable name="%inst">0 as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool,$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),\var i as int) as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1" id="906">
      <find>S.2</find>
      <schemavariable name="%a">$and($lte(0 as int,0 as int) as bool,$lt(0 as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),0 as int) as int,$load_heap($heap as heap,array as ref,$array_index(i1 as int) as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,0" id="907">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1" id="908">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,1" id="909">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="910">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="911">
      <find>S.0.14</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1" id="912">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="913">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1" id="914">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1" id="915">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1" id="916">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,1,1" id="917">
      <find>S.0.0.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,1" id="918">
      <find>S.0.0.1.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,1,1" id="919">
      <find>S.0.0.1</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,1,1" id="920">
      <find>S.0.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,1" id="921">
      <find>S.0.1.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,1,1" id="922">
      <find>S.0.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,1,1" id="923">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1" id="924">
      <find>S.0</find>
      <schemavariable name="%a">$eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,0" id="925">
      <find>S.0</find>
      <assume>A.2</assume>
      <schemavariable name="%b">$eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1" id="926">
      <find>S.0</find>
      <schemavariable name="%a">$gte(i1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,1,0" id="927">
      <find>S.0</find>
      <assume>A.3</assume>
      <schemavariable name="%b">$gte(i1 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1" id="928">
      <find>S.0</find>
      <schemavariable name="%a">$lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <schemavariable name="%b">$eq(sumA1 as int,result1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,1,1,1,1,0" id="929">
      <find>S.3</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,0,0" id="930">
      <find>S.3</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,1,1,1,1,0,0" id="931">
      <find>S.3</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1,1,1,1,0,0" id="932">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,1,1,0,0" id="933">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,sA1 as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x2</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,1,1,1,0,0" id="934">
      <find>S.3</find>
      <schemavariable name="%b">$mem(x2 as int,sA1 as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,0,0" id="935">
      <find>A.6.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="1,1,1,1,1,1,0,0" id="936">
      <find>A.6</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">x2 as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,1,1,1,1,1,0,0" id="937">
      <find>A.6</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool,$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),\var i as int) as int,x2 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i4</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,0,0" id="938">
      <find>A.6</find>
      <schemavariable name="%a">$and($lte(0 as int,i4 as int) as bool,$lt(i4 as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),i4 as int) as int,x2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,0,0" id="939">
      <find>A.6</find>
      <schemavariable name="%a">$lte(0 as int,i4 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i4 as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="1,1,1,1,1,1,0,0" id="940">
      <find>A.7.0</find>
      <schemavariable name="%i">i4 as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="1,1,1,1,1,1,0,0" id="941">
      <find>A.7.0.1</find>
      <schemavariable name="%i">$plus(i4 as int,i1 as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="1,1,1,1,1,1,0,0" id="942">
      <find>A.8.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,0,0" id="943">
      <find>A.7.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,$plus(i4 as int,i1 as int) as int) as bool,$lt($plus(i4 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(i4 as int,i1 as int) as int) as field) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i4 as int) as bool,$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,0,0,0" id="944">
      <find>A.9</find>
      <schemavariable name="%a">$lte(0 as int,i4 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,0,0,0" id="945">
      <find>A.7.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index($plus(i4 as int,i1 as int) as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,$plus(i4 as int,i1 as int) as int) as bool,$lt($plus(i4 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,0,0,0,0" id="946">
      <find>A.11</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i4 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i4 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,0,0,0,0" id="947">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,0,0" id="948">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,0,0" id="949">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,0,0" id="950">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,0,0" id="951">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,0,0,0,0" id="952">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,0,1" id="953">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,0,1" id="954">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,0,0,0,1" id="955">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,0,0,0,1" id="956">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,0,0,0,1,0" id="957">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i4 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i4 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,1,0,0" id="958">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,1,0,0" id="959">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,1,0,0" id="960">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,1,0,0" id="961">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,0,0,1,0,0" id="962">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,1,0,1" id="963">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,1,0,1" id="964">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,1,0,1" id="965">
      <find>A.7</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,1,0,1" id="966">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,0,0,1,0,1" id="967">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,0,0,0,1,1" id="968">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i4 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i4 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,1,1,0" id="969">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,1,1,0" id="970">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,0,0,1,1,0" id="971">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,0,0,0,1,1,1" id="972">
      <find>A.6</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0,0,0,1,1,1" id="973">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,0,0,1,1,1" id="974">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,0,0,1" id="975">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,0,0,1,0" id="976">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i4 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,1,1,0,0,1,0,0" id="977">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,1,1,0,0,1,0,1" id="978">
      <find>S.3</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,0,0,1,1" id="979">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i4 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i4 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,1,1,0,0,1,1,0" id="980">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,0,1,1,1" id="981">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1,1,1,0,1" id="982">
      <find>S.3.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,0,1" id="983">
      <find>S.3</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,0,1" id="984">
      <find>S.3.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,1,1,1,1,0,1" id="985">
      <find>S.3.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,1,1,1,0,1" id="986">
      <find>S.3.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1,1,0,1" id="987">
      <find>S.3.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1,1,0,1" id="988">
      <find>S.3.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1,1,0,1" id="989">
      <find>S.3</find>
      <schemavariable name="%a">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="1,1,1,1,1,1,0,1" id="990">
      <find>S.3</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0,1" id="991">
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,1,1,1,1,1" id="992">
      <find>S.3</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,1,0" id="993">
      <find>S.3</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,1,1,1,1,1,0" id="994">
      <find>S.3</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1,1,1,1,1,0" id="995">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,1,1,1,0" id="996">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,sA1 as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x1</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,1,1,1,1,0" id="997">
      <find>S.3</find>
      <schemavariable name="%b">$mem(x1 as int,sA1 as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0" id="998">
      <find>A.6.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="1,1,1,1,1,1,1,0" id="999">
      <find>A.6</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">x1 as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="1,1,1,1,1,1,1,0" id="1000">
      <find>A.6</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool,$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),\var i as int) as int,x1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i3</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,1,0" id="1001">
      <find>A.6</find>
      <schemavariable name="%a">$and($lte(0 as int,i3 as int) as bool,$lt(i3 as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(seqGet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int),i3 as int) as int,x1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,1,0" id="1002">
      <find>A.6</find>
      <schemavariable name="%a">$lte(0 as int,i3 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i3 as int,seqLen(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="1,1,1,1,1,1,1,0" id="1003">
      <find>A.7.0</find>
      <schemavariable name="%i">i3 as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="1,1,1,1,1,1,1,0" id="1004">
      <find>A.7.0.1</find>
      <schemavariable name="%i">$plus(i3 as int,i1 as int) as int</schemavariable>
      <schemavariable name="%h">$heap as heap</schemavariable>
      <schemavariable name="%r">array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="1,1,1,1,1,1,1,0" id="1005">
      <find>A.8.1</find>
      <schemavariable name="%a">arrayAsIntSeq($heap as heap,array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">i1 as int</schemavariable>
      <schemavariable name="%to">$load_heap($heap as heap,array as ref,$array_length as field) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,1,0" id="1006">
      <find>A.7.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,$plus(i3 as int,i1 as int) as int) as bool,$lt($plus(i3 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool,$load_heap($heap as heap,array as ref,$array_index($plus(i3 as int,i1 as int) as int) as field) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i3 as int) as bool,$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,1,0,0" id="1007">
      <find>A.7.0</find>
      <schemavariable name="%a">$load_heap($heap as heap,array as ref,$array_index($plus(i3 as int,i1 as int) as int) as field) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,$plus(i3 as int,i1 as int) as int) as bool,$lt($plus(i3 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,1,0,0,0" id="1008">
      <find>A.10</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i3 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i3 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,1,0,0,0" id="1009">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,0,0" id="1010">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1,1,1,1,0,0,0,0" id="1011">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,0,0" id="1012">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,1,0,0,0,0" id="1013">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,0,0,0" id="1014">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,0,0,0,0" id="1015">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,0,0,0" id="1016">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,0,1" id="1017">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1,1,1,1,0,0,0,1" id="1018">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,0,0,1" id="1019">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,0,0,0,1" id="1020">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,0,0,1" id="1021">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,1,0,0,1" id="1022">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,1,0,0,1,0" id="1023">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i3 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i3 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,1,0,0" id="1024">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1,1,1,1,0,0,1,0,0" id="1025">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,1,0,0" id="1026">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,1,0,0,1,0,0" id="1027">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,0,1,0,0" id="1028">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,0,0,1,0,0" id="1029">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,0,1,0,0" id="1030">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,1,0,1" id="1031">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1,1,1,1,0,0,1,0,1" id="1032">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,1,0,1" id="1033">
      <find>A.8</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,1,0,0,1,0,1" id="1034">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,0,1,0,1" id="1035">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,0,0,1,0,1" id="1036">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,0,1,0,1" id="1037">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,1,0,0,1,1" id="1038">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i3 as int,i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i3 as int,i1 as int) as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,1,1,0" id="1039">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1,1,1,1,0,0,1,1,0" id="1040">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,0,1,1,0" id="1041">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,0,0,1,1,0" id="1042">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,0,1,1,0" id="1043">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="1,1,1,1,1,1,1,0,0,1,1,1" id="1044">
      <find>A.9.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1,1,1,1,0,0,1,1,1" id="1045">
      <find>A.9</find>
      <schemavariable name="%a">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,0,1,1,1" id="1046">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,0,0,1,1,1" id="1047">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,0,1,1,1" id="1048">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,1,1,1,1,0,1" id="1049">
      <find>A.8.1</find>
      <schemavariable name="%a">$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,1,0,1,0" id="1050">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i3 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,1,1,1,0,1,0,0" id="1051">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,1,1,1,0,1,0,1" id="1052">
      <find>S.3</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,1,1,1,1,0,1,1" id="1053">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i3 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i3 as int,$minus($load_heap($heap as heap,array as ref,$array_length as field) as int,i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,1,1,1,1,0,1,1,0" id="1054">
      <find>S.3</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,1,1,1" id="1055">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,0,1,1,1" id="1056">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,1,1,1" id="1057">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1,1,1,1,1" id="1058">
      <find>S.3.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,1,1" id="1059">
      <find>S.3</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$and($lt(i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i as int,0 as int) as bool,$eq(sumA as int,result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,$result as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sA := sA1 as set(int) || $old_heap := $old_heap1 as heap || result := result1 as int || $exception := $exception1 as ref || $stack_3_int := $stack_3_int1 as int || sumA := sumA1 as int || xA := xA1 as int || i := i1 as int || $markA := 0 as int || var := 42 as int || $stack_1_int := i1 as int || $stack_2_ref := array as ref || $stack_2_int := $load_heap($heap as heap,array as ref,$array_length as field) as int || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,1" id="1060">
      <find>S.3.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,1,1,1,1,1,1" id="1061">
      <find>S.3.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,1,1,1,1,1" id="1062">
      <find>S.3.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1,1,1,1" id="1063">
      <find>S.3.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$and($lt(i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1,1,1,1" id="1064">
      <find>S.3.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq($heap as heap,array as ref) as seq(int),i1 as int,$load_heap($heap as heap,array as ref,$array_length as field) as int) as seq(int)) as set(int)) as bool,$and($gte(i1 as int,0 as int) as bool,$eq(sumA1 as int,result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1,1,1,1" id="1065">
      <find>S.3</find>
      <schemavariable name="%a">$eq(sumA1 as int,$result as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="1,1,1,1,1,1,1,1" id="1066">
      <find>S.3</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,1" id="1067">
      <find>S.0.1</find>
      <assume>A.4</assume>
      <schemavariable name="%u">sumA1 as int</schemavariable>
      <schemavariable name="%t">result1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,1,1,1" id="1068">
      <find>S.0</find>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,1" id="1069">
      <find>S.0</find>
    </ruleApplication>
  </steps>
</proof>
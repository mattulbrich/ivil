; Boogie universal background predicate
; Copyright (c) 2004-2005, Microsoft Corp.
(DEFPRED (<: t u))

(BG_PUSH (AND

  ; select/store axioms, 1 index argument

  (FORALL (A i v)
    (EQ (select1 (store1 A i v) i) v))

  (FORALL (A i j v)
    (IMPLIES (NEQ i j)
      (EQ
        (select1 (store1 A i v) j)
        (select1 A j))))

  ; select/store axioms, 2 index arguments

  (FORALL (A o f v)
    (EQ (select2 (store2 A o f v) o f) v))

  (FORALL (A o f p g v)
    (IMPLIES (NEQ o p)
      (EQ
        (select2 (store2 A o f v) p g)
        (select2 A p g))))

  (FORALL (A o f p g v)
    (IMPLIES (NEQ f g)
      (EQ
        (select2 (store2 A o f v) p g)
        (select2 A p g))))

  ; formula/term axioms

  (FORALL (x y)
    (IFF
      (EQ (boolIff x y) |@true|)
      (IFF (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x y)
    (IFF
      (EQ (boolImplies x y) |@true|)
      (IMPLIES (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x y)
    (IFF
      (EQ (boolAnd x y) |@true|)
      (AND (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x y)
    (IFF
      (EQ (boolOr x y) |@true|)
      (OR (EQ x |@true|) (EQ y |@true|))))

  (FORALL (x)
    (PATS (boolNot x))
    (IFF
      (EQ (boolNot x) |@true|)
      (NEQ x |@true|)))

  (FORALL (x y)
    (IFF
      (EQ (anyEqual x y) |@true|)
      (EQ x y)))

  (FORALL (x y)
    (PATS (anyNeq x y))
    (IFF
      (EQ (anyNeq x y) |@true|)
      (NEQ x y)))

  (FORALL (x y)
    (IFF
      (EQ (intLess x y) |@true|)
      (< x y)))

  (FORALL (x y)
    (IFF
      (EQ (intAtMost x y) |@true|)
      (<= x y)))

  (FORALL (x y)
    (IFF
      (EQ (intAtLeast x y) |@true|)
      (>= x y)))

  (FORALL (x y)
    (IFF
      (EQ (intGreater x y) |@true|)
      (> x y)))

  ; false is not true

  (DISTINCT |@false| |@true|)

  ; <: is a partial order:  it is reflexive, transitive, and anti-symmetric

  (FORALL (t)
    (PATS (<: t t))
    (<: t t))

  (FORALL (t u v)
    (PATS (MPAT (<: t u) (<: u v)))
    (IMPLIES
      (AND (<: t u ) (<: u v))
      (<: t v)))

  (FORALL (t u)
    (PATS (MPAT (<: t u) (<: u t)))
    (IMPLIES
      (AND (<: t u) (<: u t))
      (EQ t u)))

  ;; The following axiom gives a way to typed produce verification conditions,
  ;; that is, verification conditions where the terms are typable.  To use these,
  ;; the VCExpressionGenerator.{CastTo,CastFrom} methods must be overridden.
  ;; Look for USE_SORTED_LOGIC in VCGeneration/VCExpr.ssc.
  ; (FORALL (val T U)
  ;   (PATS (TypeConvert (TypeConvert val T U) U T))
  ;   (EQ (TypeConvert (TypeConvert val T U) U T) val))

))  ;; AND, BG_PUSH
; End Boogie universal background predicate
; -------------------------------------------------------------------------

(BG_PUSH 
(AND TRUE TRUE)
)
; M
(IMPLIES (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (IMPLIES (IMPLIES (LBLPOS |+27| TRUE) (IMPLIES TRUE (IMPLIES (AND (EQ 0 0) (EQ 0 0)) TRUE))) (EQ |start_correct| |@true|)) (IMPLIES (IMPLIES (LBLPOS |+369| TRUE) (IMPLIES (AND (<= 0 0) (EQ 0 0)) (IMPLIES (<= 0 n) (IMPLIES (AND (<= 0 n) (AND (<= 0 0) (EQ 0 0))) TRUE)))) (EQ |start-2-body_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+39| TRUE) (IMPLIES (AND (<= 0 |i@0|) (EQ 0 0)) (IMPLIES (<= |i@0| n) (IMPLIES (AND (<= |i@0| n) (AND (<= 0 |i@0|) (EQ 0 0))) TRUE)))) (EQ |body_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+56| TRUE) (IMPLIES (AND (<= |i@0| n) (AND (<= 0 |i@0|) (EQ 0 0))) (IMPLIES (EQ |i@1| (+ |i@0| 1)) (IMPLIES (AND (<= |i@1| (+ n 1)) (AND (<= (+ 0 1) |i@1|) (EQ 0 0))) TRUE)))) (EQ |join_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+371| TRUE) (IMPLIES (AND (<= 0 |i@1|) (EQ 0 0)) (IMPLIES (<= |i@1| n) (IMPLIES (AND (<= |i@1| n) (AND (<= 0 |i@1|) (EQ 0 0))) (IMPLIES FALSE TRUE))))) (EQ |join-2-body_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+68| TRUE) (IMPLIES (AND (<= |i@1| (+ n 1)) (AND (<= (+ 0 1) |i@1|) (EQ 0 0))) (AND (LBLNEG |@653| (AND (<= |i@1| (+ n 1)) (<= 1 |i@1|))) (IMPLIES (AND (<= |i@1| (+ n 1)) (<= 1 |i@1|)) (IMPLIES (AND (<= 1 |i@1|) (AND (<= |i@1| (+ n 1)) (EQ 0 0))) TRUE))))) (EQ |JoinCheck_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+386| TRUE) (IMPLIES (EQ |i@2| |i@1|) TRUE)) (EQ |JoinCheck-2-GeneratedUnifiedExit_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+377| TRUE) TRUE) (EQ |GeneratedUnifiedExit_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+383| TRUE) TRUE) (EQ |ReallyLastGeneratedExit_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+49| TRUE) (IMPLIES (AND (<= |i@0| n) (AND (<= 0 |i@0|) (EQ 0 0))) (AND (LBLNEG |@717| (AND (<= |i@0| n) (<= 0 |i@0|))) (IMPLIES (AND (<= |i@0| n) (<= 0 |i@0|)) (IMPLIES (AND (<= 0 |i@0|) (AND (<= |i@0| n) (EQ 0 0))) TRUE))))) (EQ |BodyCheck_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+388| TRUE) (IMPLIES (EQ |i@2| |i@0|) TRUE)) (EQ |BodyCheck-2-GeneratedUnifiedExit_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+33| TRUE) (IMPLIES (AND (EQ 0 0) (EQ 0 0)) (AND (LBLNEG |@420| (EQ 0 0)) (IMPLIES (EQ 0 0) (IMPLIES (AND (AND (EQ 0 0) (EQ 0 0)) (EQ 0 0)) TRUE))))) (EQ |StartCheck_correct| |@true|))) (IMPLIES (IMPLIES (LBLPOS |+390| TRUE) (IMPLIES (EQ |i@2| 0) TRUE)) (EQ |StartCheck-2-GeneratedUnifiedExit_correct| |@true|))) (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (EQ |start_correct| |@true|) (EQ |start-2-body_correct| |@true|)) (EQ |body_correct| |@true|)) (EQ |join_correct| |@true|)) (EQ |join-2-body_correct| |@true|)) (EQ |JoinCheck_correct| |@true|)) (EQ |JoinCheck-2-GeneratedUnifiedExit_correct| |@true|)) (EQ |GeneratedUnifiedExit_correct| |@true|)) (EQ |ReallyLastGeneratedExit_correct| |@true|)) (EQ |BodyCheck_correct| |@true|)) (EQ |BodyCheck-2-GeneratedUnifiedExit_correct| |@true|)) (EQ |StartCheck_correct| |@true|)) (EQ |StartCheck-2-GeneratedUnifiedExit_correct| |@true|)))
; Undetermined

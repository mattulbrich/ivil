<?xml version="1.0"?>
<proof format="1"><info>
    <date>Thu Aug 23 19:38:03 CEST 2012</date>
    <version>0.0</version>
    <problem>$and($eq(setA,seqAsSet(arrayAsIntSeq(h,_array))),$and($not($eq(_array,null)),(\forall a;$impl($and($lte(0,\var a),$lt(\var a,arrlen(_array))),(\forall b;$impl($and($lte(0,\var b),$lt(\var b,arrlen(_array))),$impl($eq($load_heap(h,_array,idxInt(\var a)),$load_heap(h,_array,idxInt(\var b))),$eq(\var a,\var b)))))))) |- [0;Java][&lt;0;Sum&gt;]$eq(sumA,resInt)</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="refinement" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%phi">$eq(sumA as int,resInt as int) as bool</schemavariable>
      <schemavariable name="%C">[0;Java]([&lt;0;Sum&gt;]($eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%A">[&lt;0;Sum&gt;]($eq(sumA as int,resInt as int) as bool) as bool</schemavariable>
      <typevariable name="A">bool</typevariable>
      <typevariable name="C">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="1">
      <find>S.0.0.1</find>
      <schemavariable name="%t">{ $markA := 0 as int || $markC := 0 as int }({ var := 42 as int }($impl($and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool,[22;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool) as bool))</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="2">
      <find>S.0.0.1.1.16</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="3">
      <find>S.0.0.1.1.17</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="4">
      <find>S.0.0.1.1.18</find>
      <schemavariable name="%t">42 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := { st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }(0 as int) || $markC := { st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }(0 as int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="5">
      <find>S.0.1</find>
      <schemavariable name="%t">{ $markA := 0 as int || $markC := 0 as int }({ var := 42 as int }($impl($and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool,[33;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool) as bool))</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="6">
      <find>S.0.1.1.16</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="7">
      <find>S.0.1.1.17</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="8">
      <find>S.0.1.1.18</find>
      <schemavariable name="%t">42 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := { st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }(0 as int) || $markC := { st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap }(0 as int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="9">
      <find>A.0</find>
      <schemavariable name="%a">$eq(setA as set(int),seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($not($eq(_array as ref,null as ref) as bool) as bool,(\forall a as int;$impl($and($lte(0 as int,\var a as int) as bool,$lt(\var a as int,arrlen(_array as ref) as int) as bool) as bool,(\forall b as int;$impl($and($lte(0 as int,\var b as int) as bool,$lt(\var b as int,arrlen(_array as ref) as int) as bool) as bool,$impl($eq($load_heap(h as heap,_array as ref,idxInt(\var a as int) as field(int)) as int,$load_heap(h as heap,_array as ref,idxInt(\var b as int) as field(int)) as int) as bool,$eq(\var a as int,\var b as int) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="10">
      <find>A.1</find>
      <schemavariable name="%a">$not($eq(_array as ref,null as ref) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as int;$impl($and($lte(0 as int,\var a as int) as bool,$lt(\var a as int,arrlen(_array as ref) as int) as bool) as bool,(\forall b as int;$impl($and($lte(0 as int,\var b as int) as bool,$lt(\var b as int,arrlen(_array as ref) as int) as bool) as bool,$impl($eq($load_heap(h as heap,_array as ref,idxInt(\var a as int) as field(int)) as int,$load_heap(h as heap,_array as ref,idxInt(\var b as int) as field(int)) as int) as bool,$eq(\var a as int,\var b as int) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="" id="11">
      <find>A.1</find>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="" id="12">
      <find>A.0</find>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="13">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;0;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sumA := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="14">
      <find>S.0.0.0.0.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;1;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="15">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%t">{ sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ sumA := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="16">
      <find>S.0.0.0.0.0.2</find>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="t">set(int)</typevariable>
      <schemaupdate name="U">{ sumA := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="17">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[22;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := _result as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="18">
      <find>S.0.0.1.1</find>
      <schemavariable name="%t">{ st_0_int := _result as int }([23;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="19">
      <find>S.0.0.1.1.18</find>
      <schemavariable name="%t">_result as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="20">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[23;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="21">
      <find>S.0.0.1.1</find>
      <schemavariable name="%t">{ st_1_ref := _array as ref }([24;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="22">
      <find>S.0.0.1.1.18</find>
      <schemavariable name="%t">_array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="23">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[24;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_2_int := _i as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="24">
      <find>S.0.0.1.1</find>
      <schemavariable name="%t">{ st_2_int := _i as int }([25;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="25">
      <find>S.0.0.1.1.18</find>
      <schemavariable name="%t">_i as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="" id="26">
      <find>S.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[33;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">11 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="27">
      <find>S.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[11;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := _i as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="28">
      <find>S.0.1.1</find>
      <schemavariable name="%t">{ st_0_int := _i as int }([12;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="29">
      <find>S.0.1.1.18</find>
      <schemavariable name="%t">_i as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_int := st_0_int1 as int || st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="30">
      <find>S.0.1.1.0</find>
      <schemavariable name="%phi">[&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[12;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="31">
      <find>S.0.1.1</find>
      <schemavariable name="%t">{ st_1_ref := _array as ref }([13;Java']([&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="32">
      <find>S.0.1.1.18</find>
      <schemavariable name="%t">_array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ st_1_ref := st_1_ref1 as ref || _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="" id="33">
      <find>S.0.1.1.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;12;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">2 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="" id="34">
      <find>S.0</find>
      <schemavariable name="%a">$and({ $markA := 0 as int || $markC := 0 as int }([0;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool),$impl($and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool,{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }([25;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool,{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref }([13;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0" id="35">
      <find>S.0</find>
      <schemavariable name="%a">{ $markA := 0 as int || $markC := 0 as int }([0;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <schemavariable name="%b">$impl($and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool,{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }([25;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="36">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[0;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(_array as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="37">
      <find>A.2</find>
      <schemavariable name="%t">$not($eq(_array as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,0" id="38">
      <find>A.2</find>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="39">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[1;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">wellformed(h as heap) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="40">
      <find>A.2</find>
      <schemavariable name="%t">wellformed(h as heap) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="41">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[2;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(_this as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="42">
      <find>A.3</find>
      <schemavariable name="%t">$not($eq(_this as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,0" id="43">
      <find>A.3</find>
      <schemavariable name="%b">$eq(_this as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0" id="44">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[3;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$load_heap(h as heap,_this as ref,created as field(bool)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="45">
      <find>A.3</find>
      <schemavariable name="%t">$load_heap(h as heap,_this as ref,created as field(bool)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="46">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[4;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ pre_h := h as heap || pre_array := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="47">
      <find>S.0</find>
      <schemavariable name="%t">{ pre_h := h as heap || pre_array := _array as ref }([5;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="48">
      <find>S.0.3</find>
      <schemavariable name="%t">h as heap</schemavariable>
      <typevariable name="t">heap</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="49">
      <find>S.0.4</find>
      <schemavariable name="%t">_array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="50">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[5;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_bool := false as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="51">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_bool := false as bool }([6;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="52">
      <find>S.0.5</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="53">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[6;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="54">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_int := 0 as int }([7;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_bool := false as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="55">
      <find>S.0.6</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_bool := false as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="56">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[7;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _result := st_0_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="57">
      <find>S.0</find>
      <schemavariable name="%t">{ _result := st_0_int as int }([8;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_bool := false as bool || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="58">
      <find>S.0.7</find>
      <schemavariable name="%t">st_0_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_bool := false as bool || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="59">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[8;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_bool := false as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="60">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_bool := false as bool }([9;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_bool := false as bool || st_0_int := 0 as int || _result := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="61">
      <find>S.0.7</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_bool := false as bool || st_0_int := 0 as int || _result := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="62">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[9;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="63">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_int := 0 as int }([10;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_int := 0 as int || _result := 0 as int || st_0_bool := false as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="64">
      <find>S.0.7</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || st_0_int := 0 as int || _result := 0 as int || st_0_bool := false as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="65">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[10;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := st_0_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="66">
      <find>S.0</find>
      <schemavariable name="%t">{ _i := st_0_int as int }([11;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="67">
      <find>S.0.8</find>
      <schemavariable name="%t">st_0_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="68">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[11;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := _i as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="69">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_int := _i as int }([12;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || st_0_int := 0 as int || _i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="70">
      <find>S.0.8</find>
      <schemavariable name="%t">_i as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || st_0_int := 0 as int || _i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0" id="71">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[12;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="72">
      <find>S.0</find>
      <schemavariable name="%t">{ st_1_ref := _array as ref }([13;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0" id="73">
      <find>S.0.9</find>
      <schemavariable name="%t">_array as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,0" id="74">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[13;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(st_1_ref as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,0" id="75">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(st_1_ref as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,0" id="76">
      <find>S.0</find>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,0" id="77">
      <find>S.0</find>
      <assume>A.4</assume>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1" id="78">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[14;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_1_int := arrlen(st_1_ref as ref) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1" id="79">
      <find>S.0</find>
      <schemavariable name="%t">{ st_1_int := arrlen(st_1_ref as ref) as int }([15;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1" id="80">
      <find>S.0.10</find>
      <schemavariable name="%t">arrlen(st_1_ref as ref) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1" id="81">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[15;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ branchCond := $gte(st_0_int as int,st_1_int as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1" id="82">
      <find>S.0</find>
      <schemavariable name="%t">{ branchCond := $gte(st_0_int as int,st_1_int as int) as bool }([16;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1" id="83">
      <find>S.0.11</find>
      <schemavariable name="%t">$gte(st_0_int as int,st_1_int as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_goto2" path="0,0,1" id="84">
      <find>S.0</find>
      <schemavariable name="%k">19 as int</schemavariable>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[16;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%n">17 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0,1,0" id="85">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[17;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">branchCond as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="86">
      <find>A.4</find>
      <schemavariable name="%t">branchCond as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="0,0,1,0" id="87">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[18;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%n">34 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,0" id="88">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[34;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := _result as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="89">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_int := _result as int }([35;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="90">
      <find>S.0.11</find>
      <schemavariable name="%t">_result as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,0" id="91">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[35;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ exc := null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="92">
      <find>S.0</find>
      <schemavariable name="%t">{ exc := null as ref }([36;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="93">
      <find>S.0.12</find>
      <schemavariable name="%t">null as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,0" id="94">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[36;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ resInt := st_0_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="95">
      <find>S.0</find>
      <schemavariable name="%t">{ resInt := st_0_int as int }([37;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0" id="96">
      <find>S.0.13</find>
      <schemavariable name="%t">st_0_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="0,0,1,0" id="97">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[37;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%n">38 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,0,1,0" id="98">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[38;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$eq(exc as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,0" id="99">
      <find>S.0</find>
      <schemavariable name="%t">$eq(exc as ref,null as ref) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,0" id="100">
      <find>S.0</find>
      <schemavariable name="%t">null as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0,0,1,0,0" id="101">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,0,1,0,1" id="102">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[39;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,0" id="103">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0,0,1,0,1,0" id="104">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="prg_skip" path="0,0,1,0,1,1" id="105">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[40;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0,1,1" id="106">
      <find>S.0.0</find>
      <schemavariable name="%a">[41;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1" id="107">
      <find>S.0</find>
      <schemavariable name="%t">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1" id="108">
      <find>S.0.14</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1" id="109">
      <find>S.0.15</find>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="t">set(int)</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="0,0,1,0,1,1" id="110">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,0,1,1" id="111">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,0" id="112">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,0,1,1,0" id="113">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,0,1,1,0" id="114">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,0,1,1,0" id="115">
      <find>S.3</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,0,0" id="116">
      <find>S.3</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,0,1,1,0,0" id="117">
      <find>S.3</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,0,1,1,0,0" id="118">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,0,1,1,0,0" id="119">
      <find>S.3</find>
      <assume>A.5</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0,1,1,0,1" id="120">
      <find>S.3.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,0,1" id="121">
      <find>S.3</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,0,1" id="122">
      <find>S.3.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,1,1,0,1" id="123">
      <find>S.3.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,arrlen(_array as ref) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,0,1" id="124">
      <find>S.3.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,0,1" id="125">
      <find>S.3.0.0.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,0,1" id="126">
      <find>S.3.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,0,1" id="127">
      <find>S.3.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_same" path="0,0,1,0,1,1,0,1" id="128">
      <find>S.3.1</find>
      <schemavariable name="%b">$eq(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,0,1" id="129">
      <find>S.3</find>
      <schemavariable name="%a">$and($impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool) as bool,$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1,1,0,1" id="130">
      <find>S.3.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,0,1,1,0,1" id="131">
      <find>S.3.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,1,1,0,1" id="132">
      <find>S.3</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,0,1,1,0,1" id="133">
      <find>S.3</find>
      <schemavariable name="%a">$eq(0 as int,2 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1,1,0,1" id="134">
      <find>A.6</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="0,0,1,0,1,1,0,1" id="135">
      <find>A.6</find>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,0,1,1,1" id="136">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,1" id="137">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,1" id="138">
      <find>S.0.15</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0,1,1,1" id="139">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,1" id="140">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,1" id="141">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,0,1,1,1" id="142">
      <find>S.0.0.0.1</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,arrlen(_array as ref) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,1" id="143">
      <find>S.0.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,1" id="144">
      <find>S.0.0.0.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,1" id="145">
      <find>S.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,1" id="146">
      <find>S.0.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,1" id="147">
      <find>S.0.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_r" path="0,0,1,0,1,1,1" id="148">
      <find>S.0.1</find>
      <schemavariable name="%b">$eq(1 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,1" id="149">
      <find>S.0</find>
      <schemavariable name="%a">$and($and($eq(1 as int,0 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool) as bool,$impl($eq(1 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1,1,1" id="150">
      <find>S.0.0.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,0,1,1,1" id="151">
      <find>S.0.0</find>
      <schemavariable name="%a">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,0,1,1,1" id="152">
      <find>S.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="0,0,1,0,1,1,1" id="153">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,0,1,1,1" id="154">
      <find>S.3</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,1,0" id="155">
      <find>S.3</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,0,1,1,1,0" id="156">
      <find>S.3</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,0,1,1,1,0" id="157">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,0,1,1,1,0" id="158">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,setA as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x3</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,0,1,1,1,0" id="159">
      <find>S.3</find>
      <schemavariable name="%b">$mem(x3 as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,0,1,1,1,0" id="160">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,0,1,1,1,1" id="161">
      <find>S.3.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,0,1,1,1,1" id="162">
      <find>S.3</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || st_0_int := 0 as int || exc := null as ref || resInt := 0 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,1,1" id="163">
      <find>S.3.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,1,1,1,1" id="164">
      <find>S.3.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,arrlen(_array as ref) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,1,1" id="165">
      <find>S.3.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,1,1" id="166">
      <find>S.3.0.0.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,0,1,1,1,1" id="167">
      <find>S.3.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,1,1" id="168">
      <find>S.3.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_same" path="0,0,1,0,1,1,1,1" id="169">
      <find>S.3.1</find>
      <schemavariable name="%b">$eq(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,0,1,1,1,1" id="170">
      <find>S.3</find>
      <schemavariable name="%a">$and($impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool) as bool,$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1,1,1,1" id="171">
      <find>S.3.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,0,1,1,1,1" id="172">
      <find>S.3.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,0,1,1,1,1" id="173">
      <find>S.3</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,0,1,1,1,1" id="174">
      <find>S.3</find>
      <schemavariable name="%a">$eq(0 as int,2 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,0,1,1,1,1" id="175">
      <find>A.5</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="0,0,1,0,1,1,1,1" id="176">
      <find>A.5</find>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="0,0,1,1" id="177">
      <find>S.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[19;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">$not(branchCond as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="178">
      <find>A.4</find>
      <schemavariable name="%t">$not(branchCond as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,0,1,1" id="179">
      <find>A.4</find>
      <schemavariable name="%b">$gte(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,1" id="180">
      <find>S.0.0</find>
      <schemavariable name="%phi">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <schemavariable name="%a">[20;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="181">
      <find>S.0</find>
      <schemavariable name="%t">{ $markC := 1 as int }([21;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="182">
      <find>S.0.11</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || $markC := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1" id="183">
      <find>S.0.0</find>
      <schemavariable name="%a">[21;Java']({ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool</schemavariable>
      <schemavariable name="%b">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="184">
      <find>S.0</find>
      <schemavariable name="%t">{ sumA := 0 as int || sA := setA as set(int) }([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="185">
      <find>S.0.12</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1" id="186">
      <find>S.0.13</find>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="t">set(int)</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="0,0,1,1" id="187">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,1" id="188">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,0" id="189">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,1,0" id="190">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,1,0" id="191">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,1,0" id="192">
      <find>S.4</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,0,0" id="193">
      <find>S.4</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,1,0,0" id="194">
      <find>S.4</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,1,0,0" id="195">
      <find>S.4</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,0,0" id="196">
      <find>S.4</find>
      <assume>A.4</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,setA as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1,0,1" id="197">
      <find>S.4.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,0,1" id="198">
      <find>S.4</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,0,1" id="199">
      <find>S.4.0.0.1.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,0,1" id="200">
      <find>S.4.0.0.1.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,0,1" id="201">
      <find>S.4.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,0,1" id="202">
      <find>S.4.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,0,1" id="203">
      <find>S.4.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,1,0,1" id="204">
      <find>S.4.1</find>
      <schemavariable name="%b">$eq(0 as int,resInt as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,0,1" id="205">
      <find>S.4.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,0,1" id="206">
      <find>S.4.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,0,1" id="207">
      <find>S.4.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,0,1" id="208">
      <find>S.4</find>
      <schemavariable name="%a">$eq(0 as int,resInt as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="0,0,1,1,0,1" id="209">
      <find>S.4</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,0,1" id="210">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,0,1,1,1" id="211">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1" id="212">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1" id="213">
      <find>S.0.13</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1,1" id="214">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1" id="215">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="216">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,1,1" id="217">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,arrlen(_array as ref) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="218">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,1,1" id="219">
      <find>S.0.0.0</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$and($lt(0 as int,arrlen(_array as ref) as int) as bool,$eq(0 as int,0 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="220">
      <find>S.0.0.0.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="221">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1" id="222">
      <find>S.0.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="223">
      <find>S.0.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="0,0,1,1,1" id="224">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%t">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,0,1,1,1" id="225">
      <find>S.0.0.0.1</find>
      <schemavariable name="%a">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,1" id="226">
      <find>S.0.0.1.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,1,1" id="227">
      <find>S.0.0.1</find>
      <schemavariable name="%b">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="228">
      <find>S.0.0</find>
      <schemavariable name="%a">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,1" id="229">
      <find>S.0.1.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,0,1,1,1" id="230">
      <find>S.0.1</find>
      <schemavariable name="%b">$eq(0 as int,resInt as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1" id="231">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="0,0,1,1,1" id="232">
      <find>S.5</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1,0" id="233">
      <find>S.5</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="0,0,1,1,1,0" id="234">
      <find>S.5</find>
      <schemavariable name="%b">$eq(setA as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="0,0,1,1,1,0" id="235">
      <find>S.5</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">setA as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,1,1,0" id="236">
      <find>S.5</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,setA as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x2</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,0,1,1,1,0" id="237">
      <find>S.5</find>
      <schemavariable name="%b">$mem(x2 as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0" id="238">
      <find>S.0</find>
      <schemavariable name="%a">$eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="0,0,1,1,1,0,0" id="239">
      <find>S.0</find>
      <schemavariable name="%e">\var e as int</schemavariable>
      <schemavariable name="%a">setA as set(int)</schemavariable>
      <schemavariable name="%b">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="0,0,1,1,1,0,0" id="240">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var e as int,setA as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,1,1,0,0" id="241">
      <find>S.0</find>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%b">$eq($mem(\var e as int,setA as set(int)) as bool,$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var e as int)">e1</property>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,0,0" id="242">
      <find>S.0.1</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e1 as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,0,1,1,1,0,0" id="243">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,0,1,1,1,0,0" id="244">
      <find>S.0.1.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,0,0" id="245">
      <find>S.0.1.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,0 as int) as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,0" id="246">
      <find>S.0.1.0.1.0.1.0.0.1</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,0" id="247">
      <find>S.0.1.0.1.0.1.0.1.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,0,0" id="248">
      <find>S.0.1.0.1.0.1.1.2.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,0" id="249">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,0 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="eq_to_imp" path="0,0,1,1,1,0,0,0" id="250">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e1 as int,setA as set(int)) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(\var i as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,0,0" id="251">
      <find>S.0</find>
      <schemavariable name="%a">$impl($mem(e1 as int,setA as set(int)) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(\var i as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(\var i as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool,$mem(e1 as int,setA as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,1,1,0,0,0,0" id="252">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e1 as int,setA as set(int)) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(\var i as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,0,0" id="253">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0,1,1,1,0,0,0,1" id="254">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(\var i as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(e1 as int,setA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,0,1,1,1,0,0,0,1" id="255">
      <find>A.6</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(\var i as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1" id="256">
      <find>A.6</find>
      <schemavariable name="%a">$and($lte(0 as int,i as int) as bool,$lt(i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i as int) as bool,$lt(i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool,cond($and($lte(0 as int,i as int) as bool,$lt(i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(i as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1" id="257">
      <find>A.6</find>
      <schemavariable name="%a">$lte(0 as int,i as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,0,0,1" id="258">
      <find>A.7.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,i as int) as bool,$lt(i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(i as int) as field(int)) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i as int) as bool,$lt(i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1,0" id="259">
      <find>A.9</find>
      <schemavariable name="%a">$lte(0 as int,i as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,0,0,0,1,0" id="260">
      <find>A.7.0</find>
      <schemavariable name="%a">$load_heap(h as heap,_array as ref,idxInt(i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i as int) as bool,$lt(i as int,arrlen(_array as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,0,1,1,1,0,0,0,1,0,0" id="261">
      <find>A.11</find>
      <schemavariable name="%a">$lte(0 as int,i as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply_reverse" path="0,0,1,1,1,0,0,0,1,0,0" id="262">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply_reverse" path="0,0,1,1,1,0,0,0,1,0,0" id="263">
      <find>S.0.0</find>
      <assume>A.7</assume>
      <schemavariable name="%u">$load_heap(h as heap,_array as ref,idxInt(i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%t">e1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,0,0,0,1,0,0" id="264">
      <find>S.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">$load_heap(h as heap,_array as ref,idxInt(i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%s">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="lenOfInArrayAsIntSeq" path="0,0,1,1,1,0,0,0,1,0,0" id="265">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%a">_array as ref</schemavariable>
      <typevariable name="a">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,0,0,0,1,0,0" id="266">
      <find>S.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,0,1,1,1,0,0,0,1,0,0" id="267">
      <find>S.0</find>
      <schemavariable name="%inst">i as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt(\var i as int) as field(int)) as int,seqError as int) as int,$load_heap(h as heap,_array as ref,idxInt(i as int) as field(int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,0,1,0,0" id="268">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,0,0,1,0,1" id="269">
      <find>A.7</find>
      <schemavariable name="%u">e1 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,0,0,1,0,1" id="270">
      <find>S.5</find>
      <schemavariable name="%a">$lte(0 as int,i as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,1,0,1,0" id="271">
      <find>S.5</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,0,1,0,1,1" id="272">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0,1,1,1,0,0,0,1,1" id="273">
      <find>A.7</find>
      <schemavariable name="%u">e1 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,0,0,0,1,1" id="274">
      <find>S.5</find>
      <schemavariable name="%a">$lte(0 as int,i as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,1,1,0" id="275">
      <find>S.5</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lte(0 as int,i as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,0,1,1,1,0,0,0,1,1,1" id="276">
      <find>S.5</find>
      <assume>A.8</assume>
      <schemavariable name="%b">$lt(i as int,$minus(arrlen(_array as ref) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,0,1" id="277">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,0,1" id="278">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,0,1,1,1,1" id="279">
      <find>S.5.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,0,1,1,1,1" id="280">
      <find>S.5</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ $markA := 0 as int || pre_h := h as heap || pre_array := _array as ref || _result := 0 as int || st_0_bool := false as bool || _i := 0 as int || st_0_int := 0 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(0 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || sumA := 0 as int || sA := setA as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,1" id="281">
      <find>S.5.0.0.1.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1,1" id="282">
      <find>S.5.0.0.1.1.1.1</find>
      <schemavariable name="%a">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,1" id="283">
      <find>S.5.0.1.1.1.1</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,0,1,1,1,1" id="284">
      <find>S.5.0.1.1.1</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,0,1,1,1,1" id="285">
      <find>S.5.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,0,1,1,1,1" id="286">
      <find>S.5.1</find>
      <schemavariable name="%b">$eq(0 as int,resInt as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,0,1,1,1,1" id="287">
      <find>S.5.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,1" id="288">
      <find>S.5.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(0 as int,0 as int) as bool,$lt(0 as int,arrlen(_array as ref) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,1" id="289">
      <find>S.5.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(setA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$gte(0 as int,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="0,0,1,1,1,1" id="290">
      <find>S.5</find>
      <schemavariable name="%a">$eq(0 as int,resInt as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="0,0,1,1,1,1" id="291">
      <find>S.5</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply_reverse" path="0,0,1,1,1,1" id="292">
      <find>S.0.0.0</find>
      <assume>A.0</assume>
      <schemavariable name="%u">seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">setA as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,0,1,1,1,1" id="293">
      <find>S.0</find>
      <schemavariable name="%a">$eq(seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$lt(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="0,0,1,1,1,1,0" id="294">
      <find>S.0</find>
      <schemavariable name="%e">\var e as int</schemavariable>
      <schemavariable name="%a">seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%b">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0,1,1,1,1,0" id="295">
      <find>S.0</find>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%b">$equiv($mem(\var e as int,seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int)) as bool,$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="skolemName(\var e as int)">e</property>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="0,0,1,1,1,1,0" id="296">
      <find>S.0</find>
      <schemavariable name="%a">$mem(e as int,seqAsSet(arrayAsIntSeq(h as heap,_array as ref) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$mem(e as int,seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,1,0" id="297">
      <find>S.0.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e as int</schemavariable>
      <schemavariable name="%s">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="lenOfInArrayAsIntSeq" path="0,0,1,1,1,1,0" id="298">
      <find>S.0.0.0.0.1.1</find>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%a">_array as ref</schemavariable>
      <typevariable name="a">ref</typevariable>
      <typevariable name="h">heap</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,1,0" id="299">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,0,1,1,1,1,0" id="300">
      <find>S.0.1</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),0 as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,0,1,1,1,1,0" id="301">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,0,1,1,1,1,0" id="302">
      <find>S.0.1.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">0 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,0,1,1,1,1,0" id="303">
      <find>S.0.1.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,0 as int) as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,1,0" id="304">
      <find>S.0.1.0.1.0.1.0.0.1</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,1,0" id="305">
      <find>S.0.1.0.1.0.1.0.1.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="0,0,1,1,1,1,0" id="306">
      <find>S.0.1.0.1.0.1.1.2.0</find>
      <schemavariable name="%a">\var i as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,0,1,1,1,1,0" id="307">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,0 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(0 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,1,0,0" id="308">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,1,0,1" id="309">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0,1,1,1,1,1" id="310">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1" id="311">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }([25;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="312">
      <find>A.2</find>
      <schemavariable name="%a">$eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="313">
      <find>A.3</find>
      <schemavariable name="%a">$gte(_i1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1" id="314">
      <find>A.4</find>
      <schemavariable name="%a">$lt(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <schemavariable name="%b">$eq(sumA1 as int,_result1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1" id="315">
      <find>A.5</find>
      <schemavariable name="%u">_result1 as int</schemavariable>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,1" id="316">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[25;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(st_1_ref as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,0" id="317">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(st_1_ref as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,0" id="318">
      <find>S.0</find>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,0" id="319">
      <find>S.0</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="0,1,1" id="320">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[26;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(st_2_int as int,0 as int) as bool,$lt(st_2_int as int,arrlen(st_1_ref as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,0" id="321">
      <find>S.0</find>
      <schemavariable name="%t">$and($gte(st_2_int as int,0 as int) as bool,$lt(st_2_int as int,arrlen(st_1_ref as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,0" id="322">
      <find>S.0</find>
      <schemavariable name="%a">$gte(_i1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,0,0" id="323">
      <find>S.0</find>
      <assume>A.3</assume>
      <schemavariable name="%b">$gte(_i1 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,0,1" id="324">
      <find>S.0</find>
      <assume>A.4</assume>
      <schemavariable name="%b">$lt(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="325">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[27;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_1_int := $load_heap(h as heap,st_1_ref as ref,idxInt(st_2_int as int) as field(int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="326">
      <find>S.0</find>
      <schemavariable name="%t">{ st_1_int := $load_heap(h as heap,st_1_ref as ref,idxInt(st_2_int as int) as field(int)) as int }([28;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="327">
      <find>S.0.18</find>
      <schemavariable name="%t">$load_heap(h as heap,st_1_ref as ref,idxInt(st_2_int as int) as field(int)) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="328">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[28;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := $plus(st_0_int as int,st_1_int as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="329">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_int := $plus(st_0_int as int,st_1_int as int) as int }([29;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="330">
      <find>S.0.18</find>
      <schemavariable name="%t">$plus(st_0_int as int,st_1_int as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _result1 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="331">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[29;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _result := st_0_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="332">
      <find>S.0</find>
      <schemavariable name="%t">{ _result := st_0_int as int }([30;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="333">
      <find>S.0.18</find>
      <schemavariable name="%t">st_0_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="334">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[30;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := $plus(_i as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="335">
      <find>S.0</find>
      <schemavariable name="%t">{ _i := $plus(_i as int,1 as int) as int }([31;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="336">
      <find>S.0.18</find>
      <schemavariable name="%t">$plus(_i as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="337">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[31;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markC := 2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="338">
      <find>S.0</find>
      <schemavariable name="%t">{ $markC := 2 as int }([32;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="339">
      <find>S.0.18</find>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,1,1,1" id="340">
      <find>S.0.0</find>
      <schemavariable name="%a">[32;Java']([&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="dprg_havoc" path="0,1,1,1" id="341">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%v">xA as int</schemavariable>
      <schemavariable name="%a">[&lt;6;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="dprg_assume" path="0,1,1,1" id="342">
      <find>S.0.0.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;7;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(xA as int,sA as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="343">
      <find>S.0.0.0.0.1</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;8;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sumA := $plus(sumA as int,xA as int) as int }</schemaupdate>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="344">
      <find>S.0</find>
      <schemavariable name="%t">(\exists x as int;{ xA := \var x as int }($and($mem(xA as int,sA as set(int)) as bool,{ sumA := $plus(sumA as int,xA as int) as int }([&lt;9;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)) as bool)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="345">
      <find>S.0.0.1.17</find>
      <schemavariable name="%t">\var x as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="346">
      <find>S.0.0.1.18</find>
      <schemavariable name="%t">$plus(sumA as int,xA as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int || xA := { st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int }(\var x as int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="347">
      <find>S.0.0.1.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;9;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ sA := $diff(sA as set(int),singleton(xA as int) as set(int)) as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="348">
      <find>S.0.0.1</find>
      <schemavariable name="%t">{ sA := $diff(sA as set(int),singleton(xA as int) as set(int)) as set(int) }([&lt;10;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int || xA := \var x as int || sumA := $plus(sumA1 as int,\var x as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="349">
      <find>S.0.0.1.18</find>
      <schemavariable name="%t">$diff(sA as set(int),singleton(xA as int) as set(int)) as set(int)</schemavariable>
      <typevariable name="t">set(int)</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int || xA := \var x as int || sumA := $plus(sumA1 as int,\var x as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="0,1,1,1" id="350">
      <find>S.0.0.1.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;10;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="351">
      <find>S.0.0.1</find>
      <schemavariable name="%t">{ $markA := 2 as int }([&lt;11;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int || xA := \var x as int || sumA := $plus(sumA1 as int,\var x as int) as int || sA := $diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="352">
      <find>S.0.0.1.18</find>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int || xA := \var x as int || sumA := $plus(sumA1 as int,\var x as int) as int || sA := $diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="0,1,1,1" id="353">
      <find>S.0.0.1.0</find>
      <schemavariable name="%a">[&lt;11;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0,1,1,1" id="354">
      <find>S.0.0.1</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ st_0_bool := st_0_bool1 as bool || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || var := 42 as int || st_1_ref := _array as ref || st_2_int := _i1 as int || st_1_int := $load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int || st_0_int := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _result := $plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int || _i := $plus(_i1 as int,1 as int) as int || $markC := 2 as int || xA := \var x as int || sumA := $plus(sumA1 as int,\var x as int) as int || sA := $diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int) || $markA := 2 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,1,1,1" id="355">
      <find>S.0.0.1.0.0.0</find>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1" id="356">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%a">$impl($eq(2 as int,1 as int) as bool,$and($eq($diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(_i1 as int,1 as int) as int,0 as int) as bool,$and($lt($plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,1,1,1" id="357">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="0,1,1,1" id="358">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%b">$and($eq($diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(_i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,1,1,1" id="359">
      <find>S.0.0.1.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,1,1,1" id="360">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%b">$and($eq($diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(_i1 as int,1 as int) as int,0 as int) as bool,$and($lt($plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1" id="361">
      <find>S.0.0.1.0</find>
      <schemavariable name="%a">$and($eq($diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(_i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="0,1,1,1" id="362">
      <find>S.0.0.1.1.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0,1,1,1" id="363">
      <find>S.0.0.1.1</find>
      <schemavariable name="%b">$eq($plus(sumA1 as int,\var x as int) as int,resInt1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,1,1,1" id="364">
      <find>S.0.0.1</find>
      <schemavariable name="%a">$and($eq($diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(_i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(sumA1 as int,\var x as int) as int,$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply_reverse" path="0,1,1,1" id="365">
      <find>S.0.0.1.1.1.0.0</find>
      <assume>A.5</assume>
      <schemavariable name="%u">_result1 as int</schemavariable>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,1,1,1" id="366">
      <find>S.0</find>
      <schemavariable name="%inst">$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$and($mem(\var x as int,sA1 as set(int)) as bool,$and($eq($diff(sA1 as set(int),singleton(\var x as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(_i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(_result1 as int,\var x as int) as int,$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1" id="367">
      <find>S.0</find>
      <schemavariable name="%a">$mem($load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int,sA1 as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($eq($diff(sA1 as set(int),singleton($load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as set(int)) as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte($plus(_i1 as int,1 as int) as int,0 as int) as bool,$eq($plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int,$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,0" id="368">
      <find>S.0.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1,0" id="369">
      <find>S.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,0" id="370">
    </ruleApplication>
    <ruleApplication rule="set_equality" path="0,1,1,1,1" id="371">
      <find>S.0.0</find>
      <schemavariable name="%e">\var e as int</schemavariable>
      <schemavariable name="%a">$diff(sA1 as set(int),singleton($load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as set(int)) as set(int)</schemavariable>
      <schemavariable name="%b">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <typevariable name="e">int</typevariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="0,1,1,1,1" id="372">
      <find>S.0.1.1</find>
      <schemavariable name="%t">$plus(_result1 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0,1,1,1,1" id="373">
      <find>S.0.1</find>
      <schemavariable name="%a">$gte($plus(_i1 as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="0,1,1,1,1" id="374">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$mem(\var e as int,$diff(sA1 as set(int),singleton($load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as set(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$mem(\var e as int,seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="0,1,1,1,1" id="375">
      <find>S.0.0.0.0</find>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%a">sA1 as set(int)</schemavariable>
      <schemavariable name="%b">singleton($load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as set(int)</schemavariable>
      <typevariable name="b">set(int)</typevariable>
      <typevariable name="a">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0,1,1,1,1" id="376">
      <find>S.0.0.0.0.1.0</find>
      <schemavariable name="%y">$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%x">\var e as int</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1,1" id="377">
      <find>S.0.0.0.1</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),$plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,1,1,1,1" id="378">
      <find>S.0.0.0.1.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">$plus(_i1 as int,1 as int) as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,1,1,1,1" id="379">
      <find>S.0.0.0.1.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">$plus(_i1 as int,1 as int) as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,1,1,1,1" id="380">
      <find>S.0.0.0.1.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1" id="381">
      <find>S.0</find>
      <schemavariable name="%a">(\forall e as int;$eq($and($mem(\var e as int,sA1 as set(int)) as bool,$not($eq(\var e as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as bool,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,\var e as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte($plus(_i1 as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,1,1,1,1,0" id="382">
      <find>S.0</find>
      <schemavariable name="%x">\var e as int</schemavariable>
      <schemavariable name="%b">$eq($and($mem(\var e as int,sA1 as set(int)) as bool,$not($eq(\var e as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte($plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as bool,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,\var e as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var e as int)">e2</property>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0" id="383">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte($plus(_i1 as int,1 as int) as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="eq_to_imp" path="0,1,1,1,1,0,0" id="384">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(e2 as int,sA1 as set(int)) as bool,$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0" id="385">
      <find>S.0</find>
      <schemavariable name="%a">$impl($and($mem(e2 as int,sA1 as set(int)) as bool,$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool) as bool,(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool,$and($mem(e2 as int,sA1 as set(int)) as bool,$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1,1,1,1,0,0,0" id="386">
      <find>S.0</find>
      <schemavariable name="%a">$and($mem(e2 as int,sA1 as set(int)) as bool,$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0" id="387">
      <find>A.7.0.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,0" id="388">
      <find>A.7</find>
      <schemavariable name="%a">$mem(e2 as int,seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="0,1,1,1,1,0,0,0" id="389">
      <find>A.8</find>
      <schemavariable name="%b">$eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1,1,0,0,0" id="390">
      <find>A.7</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e2 as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,1,1,1,1,0,0,0" id="391">
      <find>A.7</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as int) as bool) as bool,$eq(seqGet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int),\var i as int) as int,e2 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i2</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,0" id="392">
      <find>A.7</find>
      <schemavariable name="%a">$and($lte(0 as int,i2 as int) as bool,$lt(i2 as int,seqLen(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(seqGet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int),i2 as int) as int,e2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,0" id="393">
      <find>A.7</find>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i2 as int,seqLen(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,1,1,1,1,0,0,0" id="394">
      <find>A.8.0</find>
      <schemavariable name="%i">i2 as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,1,1,1,1,0,0,0" id="395">
      <find>A.8.0.1</find>
      <schemavariable name="%i">$plus(i2 as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,1,1,1,1,0,0,0" id="396">
      <find>A.9.1</find>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0" id="397">
      <find>A.8.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,$plus(i2 as int,_i1 as int) as int) as bool,$lt($plus(i2 as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(i2 as int,_i1 as int) as int) as field(int)) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i2 as int) as bool,$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,0" id="398">
      <find>A.8.0</find>
      <schemavariable name="%a">$load_heap(h as heap,_array as ref,idxInt($plus(i2 as int,_i1 as int) as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,$plus(i2 as int,_i1 as int) as int) as bool,$lt($plus(i2 as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,0,0,0" id="399">
      <find>A.11</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i2 as int,_i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i2 as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,0,0" id="400">
      <find>A.9.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,0,0" id="401">
      <find>A.10.0</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,0,0,0,0,0" id="402">
      <find>A.10</find>
      <schemavariable name="%a">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,0,0" id="403">
      <find>A.9</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,0,0" id="404">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,0,0" id="405">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,0,1" id="406">
      <find>A.10.0</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,0,0,0,0,1" id="407">
      <find>A.10</find>
      <schemavariable name="%a">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,0,1" id="408">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,0,0,1" id="409">
      <find>A.8</find>
      <schemavariable name="%u">e2 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,0,1" id="410">
      <find>A.9.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,0,1,0" id="411">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i2 as int,_i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i2 as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,0,0" id="412">
      <find>A.10.0</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,0,0,0,1,0,0" id="413">
      <find>A.10</find>
      <schemavariable name="%a">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,0,0" id="414">
      <find>A.9</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,1,0,0" id="415">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,0,0" id="416">
      <find>S.0.0.1.1</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,0,0" id="417">
      <find>S.2.0</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,1,0,0" id="418">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,0,1" id="419">
      <find>A.10.0</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,0,0,0,1,0,1" id="420">
      <find>A.10</find>
      <schemavariable name="%a">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,0,1" id="421">
      <find>A.9</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,0,0,1,0,1" id="422">
      <find>A.9</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,0,1" id="423">
      <find>S.0.0.1.1</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,0,1" id="424">
      <find>S.2.0</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,1,0,1" id="425">
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,0,1,1" id="426">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,$plus(i2 as int,_i1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$lt($plus(i2 as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,1,0" id="427">
      <find>A.10.0</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,0,0,0,1,1,0" id="428">
      <find>A.10</find>
      <schemavariable name="%a">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,1,0" id="429">
      <find>S.0.0.1.1</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,1,0" id="430">
      <find>S.2.0</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,1,1,0" id="431">
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,0,0,1,1,1" id="432">
      <find>A.10.0</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0,1,1,1,1,0,0,0,0,1,1,1" id="433">
      <find>A.10</find>
      <schemavariable name="%a">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,1,1" id="434">
      <find>S.0.0.1.1</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,0,1,1,1" id="435">
      <find>S.2.0</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,0,1,1,1" id="436">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,0,1" id="437">
      <find>A.8</find>
      <schemavariable name="%u">e2 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,0,1" id="438">
      <find>A.9.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,1,0" id="439">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,0,1,0,0" id="440">
      <find>S.3</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,0,1,0,1" id="441">
      <find>S.3</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,0,1,1" id="442">
      <find>S.3</find>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i2 as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,0,1,1,0" id="443">
      <find>S.3</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,1" id="444">
      <find>S.0.0.1.1</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,0,1,1,1" id="445">
      <find>S.2.0</find>
      <assume>A.8</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,0,1,1,1" id="446">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,1,1,1,1,0,0,1" id="447">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($mem(e2 as int,sA1 as set(int)) as bool,$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_left" path="0,1,1,1,1,0,0,1" id="448">
      <find>A.7</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i1</property>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,1" id="449">
      <find>A.7</find>
      <schemavariable name="%a">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,1" id="450">
      <find>A.7</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,1" id="451">
      <find>A.8.0</find>
      <schemavariable name="%a">cond($and($lte(0 as int,$plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int,seqError as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="0,1,1,1,1,0,0,1,0" id="452">
      <find>A.10</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,1,0" id="453">
      <find>A.8.0</find>
      <schemavariable name="%a">$load_heap(h as heap,_array as ref,idxInt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,$plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as bool,$lt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int,arrlen(_array as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,1,0,0" id="454">
      <find>A.7</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,1,0,0" id="455">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,1,0,0" id="456">
      <find>A.8</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,1,0,0" id="457">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,0,0" id="458">
      <find>S.0.0.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1,1,0,0,1,0,0" id="459">
      <find>S.0.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">e2 as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,1,1,1,1,0,0,1,0,0" id="460">
      <find>S.0.0.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,1,1,1,1,0,0,1,0,0" id="461">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,1,1,1,1,0,0,1,0,0" id="462">
      <find>S.0.0.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,1,0,0" id="463">
      <find>S.0</find>
      <schemavariable name="%a">(\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,cond($lte(_i1 as int,arrlen(_array as ref) as int) as bool,$minus(arrlen(_array as ref) as int,_i1 as int) as int,0 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,_i1 as int) as int) as bool,$lt($plus(\var i as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,_i1 as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,e2 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,1,0,0,0" id="464">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply_reverse" path="0,1,1,1,1,0,0,1,0,0,0,0" id="465">
      <find>S.0.0.1.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">$load_heap(h as heap,_array as ref,idxInt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="0,1,1,1,1,0,0,1,0,0,0,0" id="466">
      <find>S.0</find>
      <schemavariable name="%inst">$plus(i1 as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,_i1 as int) as int) as bool,$lt($plus(\var i as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,_i1 as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,$load_heap(h as heap,_array as ref,idxInt($plus(i1 as int,$plus(_i1 as int,1 as int) as int) as int) as field(int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,0,0,0,0" id="467">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,0,0,0,1" id="468">
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,0,1,0,0,1" id="469">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,1,0,0,1" id="470">
      <find>A.11</find>
      <schemavariable name="%u">$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,0,0,1" id="471">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,1,0,1" id="472">
      <find>A.8</find>
      <schemavariable name="%u">e2 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,1,0,1" id="473">
      <find>A.7</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,1,0,1" id="474">
      <find>A.7</find>
    </ruleApplication>
    <ruleApplication rule="replace_known_left" path="0,1,1,1,1,0,0,1,0,1" id="475">
      <find>A.8</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="0,1,1,1,1,0,0,1,0,1" id="476">
      <find>A.8</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,0,1" id="477">
      <find>S.0.0.0</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,1,0,1" id="478">
      <find>S.0</find>
      <schemavariable name="%a">$mem(seqError as int,sA1 as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,0,1,0" id="479">
      <find>S.0.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="0,1,1,1,1,0,0,1,0,1,0" id="480">
      <find>S.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">seqError as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="0,1,1,1,1,0,0,1,0,1,0" id="481">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="0,1,1,1,1,0,0,1,0,1,0" id="482">
      <find>S.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="0,1,1,1,1,0,0,1,0,1,0" id="483">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="0,1,1,1,1,0,0,1,0,1,0" id="484">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,0,1,0,0" id="485">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,0,1,0,1" id="486">
    </ruleApplication>
    <ruleApplication rule="not_right" path="0,1,1,1,1,0,0,1,0,1,1" id="487">
      <find>S.0</find>
      <schemavariable name="%b">$eq(e2 as int,$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,1,0,1,1" id="488">
      <find>A.10</find>
      <schemavariable name="%u">$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="0,1,1,1,1,0,0,1,0,1,1" id="489">
      <find>A.10.1</find>
      <assume>A.7</assume>
      <schemavariable name="%u">seqError as int</schemavariable>
      <schemavariable name="%t">e2 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,0,1,0,1,1" id="490">
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,1,1,1,1,0,0,1,1" id="491">
      <find>A.8</find>
      <schemavariable name="%u">e2 as int</schemavariable>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0,1,1,1,1,0,0,1,1" id="492">
      <find>S.2</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,1,0" id="493">
      <find>S.2</find>
      <assume>A.7</assume>
      <schemavariable name="%b">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0,1,1,1,1,0,0,1,1,1" id="494">
      <find>S.2</find>
      <assume>A.9</assume>
      <schemavariable name="%b">$lt(i1 as int,$minus(arrlen(_array as ref) as int,$plus(_i1 as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,0,1" id="495">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,1,1,1,1,1" id="496">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1" id="497">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref }([13;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="498">
      <find>A.2</find>
      <schemavariable name="%a">$eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="499">
      <find>A.3</find>
      <schemavariable name="%a">$gte(_i1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$eq(sumA1 as int,_result1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1" id="500">
      <find>A.4</find>
      <schemavariable name="%u">_result1 as int</schemavariable>
      <schemavariable name="%t">sumA1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="1" id="501">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[13;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(st_1_ref as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="502">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(st_1_ref as ref,null as ref) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0" id="503">
      <find>S.0</find>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0" id="504">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">$eq(_array as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1" id="505">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[14;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_1_int := arrlen(st_1_ref as ref) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="506">
      <find>S.0</find>
      <schemavariable name="%t">{ st_1_int := arrlen(st_1_ref as ref) as int }([15;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="507">
      <find>S.0.18</find>
      <schemavariable name="%t">arrlen(st_1_ref as ref) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || st_1_int := st_1_int1 as int || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1" id="508">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[15;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ branchCond := $gte(st_0_int as int,st_1_int as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="509">
      <find>S.0</find>
      <schemavariable name="%t">{ branchCond := $gte(st_0_int as int,st_1_int as int) as bool }([16;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="510">
      <find>S.0.18</find>
      <schemavariable name="%t">$gte(st_0_int as int,st_1_int as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || branchCond := branchCond1 as bool || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_goto2" path="1,1" id="511">
      <find>S.0</find>
      <schemavariable name="%k">19 as int</schemavariable>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[16;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">17 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="1,1,0" id="512">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">branchCond as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="513">
      <find>A.5</find>
      <schemavariable name="%t">branchCond as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0" id="514">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[18;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">34 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0" id="515">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[34;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ st_0_int := _result as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="516">
      <find>S.0</find>
      <schemavariable name="%t">{ st_0_int := _result as int }([35;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="517">
      <find>S.0.18</find>
      <schemavariable name="%t">_result as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0" id="518">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[35;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ exc := null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="519">
      <find>S.0</find>
      <schemavariable name="%t">{ exc := null as ref }([36;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="520">
      <find>S.0.18</find>
      <schemavariable name="%t">null as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0" id="521">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[36;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ resInt := st_0_int as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="522">
      <find>S.0</find>
      <schemavariable name="%t">{ resInt := st_0_int as int }([37;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="523">
      <find>S.0.18</find>
      <schemavariable name="%t">st_0_int as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0" id="524">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[37;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">38 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="1,1,0" id="525">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[38;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(exc as ref,null as ref) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,0" id="526">
      <find>S.0</find>
      <schemavariable name="%t">$eq(exc as ref,null as ref) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,0" id="527">
      <find>S.0</find>
      <schemavariable name="%t">null as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,0,0" id="528">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_box_assert" path="1,1,0,1" id="529">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[39;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,0" id="530">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,0,1,0" id="531">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="prg_skip" path="1,1,0,1,1" id="532">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[40;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,1,1" id="533">
      <find>S.0.0</find>
      <schemavariable name="%a">[41;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="1,1,0,1,1" id="534">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,0,1,1" id="535">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,0" id="536">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,0" id="537">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,0" id="538">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,0,1,1,0" id="539">
      <find>S.1</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,0,0" id="540">
      <find>S.1</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,0,1,1,0,0" id="541">
      <find>S.1</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,0,0" id="542">
      <find>S.1</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,1,0,0" id="543">
      <find>S.1</find>
      <assume>A.6</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,1,1,0,1" id="544">
      <find>S.1.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,0,1" id="545">
      <find>S.1</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1,0,1" id="546">
      <find>S.1.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,0,1" id="547">
      <find>S.1.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1,0,1" id="548">
      <find>S.1.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,0,1,1,0,1" id="549">
      <find>S.1.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,_result1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1,1,0,1" id="550">
      <find>S.1.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,1,1,0,1" id="551">
      <find>S.1.0.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,0,1" id="552">
      <find>S.1.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1,1,0,1" id="553">
      <find>S.1.0.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,1,1,0,1" id="554">
      <find>S.1.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,0,1" id="555">
      <find>S.1</find>
      <schemavariable name="%a">$eq(sumA1 as int,_result1 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,0,1" id="556">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1,1" id="557">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="558">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="559">
      <find>S.0.18</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,1,1,1" id="560">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="561">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1,1" id="562">
      <find>S.0.0.0.1.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,0,1,1,1" id="563">
      <find>S.0.0.0.1</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1,1,1" id="564">
      <find>S.0.0.0.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,0,1,1,1" id="565">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,0,1,1,1" id="566">
      <find>S.0.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,0,1,1,1" id="567">
      <find>S.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="1,1,0,1,1,1" id="568">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,0,1,1,1" id="569">
      <find>S.1</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0" id="570">
      <find>S.1</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,0,1,1,1,0" id="571">
      <find>S.1</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,0" id="572">
      <find>S.1</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,0" id="573">
      <find>S.1</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,sA1 as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x1</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,0" id="574">
      <find>S.1</find>
      <schemavariable name="%b">$mem(x1 as int,sA1 as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0" id="575">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,1,1,1,1" id="576">
      <find>S.1.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1" id="577">
      <find>S.1</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || st_0_int := _result1 as int || exc := null as ref || resInt := _result1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1,1,1" id="578">
      <find>S.1.0.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,1,1" id="579">
      <find>S.1.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1,1,1" id="580">
      <find>S.1.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,0,1,1,1,1" id="581">
      <find>S.1.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,_result1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1,1,1,1" id="582">
      <find>S.1.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,1,1,1,1" id="583">
      <find>S.1.0.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,1,1" id="584">
      <find>S.1.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,0,1,1,1,1" id="585">
      <find>S.1.0.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,0,1,1,1,1" id="586">
      <find>S.1.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,1,1" id="587">
      <find>S.1</find>
      <schemavariable name="%a">$eq(sumA1 as int,_result1 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1" id="588">
    </ruleApplication>
    <ruleApplication rule="auto_box_assume" path="1,1,1" id="589">
      <find>S.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[19;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not(branchCond as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="590">
      <find>A.5</find>
      <schemavariable name="%t">$not(branchCond as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1" id="591">
      <find>A.5</find>
      <schemavariable name="%b">$gte(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1" id="592">
      <find>S.0.0</find>
      <schemavariable name="%phi">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[20;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="593">
      <find>S.0</find>
      <schemavariable name="%t">{ $markC := 1 as int }([21;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="594">
      <find>S.0.18</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || $markC := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1" id="595">
      <find>S.0.0</find>
      <schemavariable name="%a">[21;Java']([&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_goto2" path="1,1,1" id="596">
      <find>S.0</find>
      <schemavariable name="%k">13 as int</schemavariable>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;2;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">3 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,1" id="597">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;3;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0" id="598">
      <find>S.0</find>
      <schemavariable name="%t">$not($eq(sA as set(int),emptyset as set(int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1,0" id="599">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,0" id="600">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,1,0" id="601">
      <find>S.2</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,0" id="602">
      <find>S.2</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,1,0,0" id="603">
      <find>S.2</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1,0,0" id="604">
      <find>S.2</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,0" id="605">
      <find>S.2</find>
      <assume>A.5</assume>
      <schemavariable name="%b">(\forall x as int;$not($mem(\var x as int,sA1 as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1" id="606">
      <find>S.2.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1" id="607">
      <find>S.2</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,0,1" id="608">
      <find>S.2.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,1,0,1" id="609">
      <find>S.2.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,resInt1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,0,1" id="610">
      <find>S.2.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,0,1" id="611">
      <find>S.2.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,0,1" id="612">
      <find>S.2.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,0,1" id="613">
      <find>S.2</find>
      <schemavariable name="%a">$eq(sumA1 as int,resInt1 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="1,1,1,0,1" id="614">
      <find>S.2</find>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,0,1" id="615">
      <find>A.5.0.0.1</find>
      <assume>A.2</assume>
      <schemavariable name="%u">seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)</schemavariable>
      <schemavariable name="%t">sA1 as set(int)</schemavariable>
      <typevariable name="u">set(int)</typevariable>
      <typevariable name="t">set(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="inSeqAsSet" path="1,1,1,0,1" id="616">
      <find>A.5.0.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)</schemavariable>
      <typevariable name="s">seq(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqLenOfSub" path="1,1,1,0,1" id="617">
      <find>A.5.0.0.0.0.1.1</find>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqGetOfSub" path="1,1,1,0,1" id="618">
      <find>A.5.0.0.0.1.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%a">arrayAsIntSeq(h as heap,_array as ref) as seq(int)</schemavariable>
      <schemavariable name="%from">_i1 as int</schemavariable>
      <schemavariable name="%to">arrlen(_array as ref) as int</schemavariable>
      <typevariable name="to">int</typevariable>
      <typevariable name="5">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="from">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="1,1,1,0,1" id="619">
      <find>A.5.0.0.0.1.0.1</find>
      <schemavariable name="%i">$plus(\var i as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%h">h as heap</schemavariable>
      <schemavariable name="%r">_array as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,0,1" id="620">
      <find>A.5.0.0.0.0.1.1</find>
      <schemavariable name="%a">$minus(arrlen(_array as ref) as int,_i1 as int) as int</schemavariable>
      <schemavariable name="%b">0 as int</schemavariable>
      <schemavariable name="%c">$lte(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut" path="1,1,1,0,1,0" id="621">
      <schemavariable name="%inst">$lt(_i1 as int,arrlen(_array as ref) as int) as bool</schemavariable>
      <property name="interact(%inst)">bool</property>
    </ruleApplication>
    <ruleApplication rule="forall_left_hide" path="1,1,1,0,1,0,0" id="622">
      <find>A.5</find>
      <schemavariable name="%inst">$load_heap(h as heap,_array as ref,idxInt(_i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not((\exists i as int;$and($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$minus(arrlen(_array as ref) as int,_i1 as int) as int) as bool) as bool,cond($and($lte(0 as int,$plus(\var i as int,_i1 as int) as int) as bool,$lt($plus(\var i as int,_i1 as int) as int,arrlen(_array as ref) as int) as bool) as bool,$load_heap(h as heap,_array as ref,idxInt($plus(\var i as int,_i1 as int) as int) as field(int)) as int,seqError as int) as int,seqError as int) as int,\var x as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,0,0" id="623">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,0,1" id="624">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1" id="625">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,1" id="626">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;4;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="627">
      <find>S.0</find>
      <schemavariable name="%t">{ $markA := 1 as int }([&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="628">
      <find>S.0.18</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1" id="629">
      <find>S.0.0</find>
      <schemavariable name="%a">[&lt;5;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="630">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int || $markA := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1" id="631">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,1" id="632">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$impl($eq(1 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1" id="633">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,1,1" id="634">
      <find>S.0.0.0</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,1" id="635">
      <find>S.0.0.1.0</find>
      <schemavariable name="%u">2 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,1,1" id="636">
      <find>S.0.0.1</find>
      <schemavariable name="%b">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,1,1" id="637">
      <find>S.0.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,1" id="638">
      <find>S.0.1.0</find>
      <schemavariable name="%u">0 as int</schemavariable>
      <schemavariable name="%t">1 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,1,1" id="639">
      <find>S.0.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,resInt1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,1,1" id="640">
      <find>S.0</find>
      <schemavariable name="%a">$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_dia_assume" path="1,1,1,1" id="641">
      <find>S.3</find>
      <schemavariable name="%phi">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[&lt;13;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,0" id="642">
      <find>S.3</find>
      <schemavariable name="%t">$not($not($eq(sA as set(int),emptyset as set(int)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,1,1,0" id="643">
      <find>S.3</find>
      <schemavariable name="%b">$eq(sA1 as set(int),emptyset as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1,1,0" id="644">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%s">sA1 as set(int)</schemavariable>
      <typevariable name="s">set(int)</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,0" id="645">
      <find>S.3</find>
      <schemavariable name="%x">\var x as int</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as int,sA1 as set(int)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var x as int)">x</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,1,0" id="646">
      <find>S.3</find>
      <schemavariable name="%b">$mem(x as int,sA1 as set(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,0" id="647">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1,1" id="648">
      <find>S.3.0</find>
      <schemavariable name="%a">[&lt;14;Sum'&gt;]($and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1" id="649">
      <find>S.3</find>
      <schemavariable name="%t">$and($and($and($eq($markA as int,$markC as int) as bool,$impl($eq($markA as int,1 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$and($lt(_i as int,arrlen(_array as ref) as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,2 as int) as bool,$and($eq(sA as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i as int,0 as int) as bool,$eq(sumA as int,_result as int) as bool) as bool) as bool) as bool) as bool,$impl($eq($markA as int,0 as int) as bool,$eq(sumA as int,resInt as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ _i := _i1 as int || st_0_bool := st_0_bool1 as bool || sumA := sumA1 as int || st_2_int := st_2_int1 as int || _result := _result1 as int || sA := sA1 as set(int) || pre_array := pre_array1 as ref || xA := xA1 as int || resInt := resInt1 as int || exc := exc1 as ref || pre_h := pre_h1 as heap || $markA := 0 as int || var := 42 as int || st_0_int := _i1 as int || st_1_ref := _array as ref || st_1_int := arrlen(_array as ref) as int || branchCond := $gte(_i1 as int,arrlen(_array as ref) as int) as bool || $markC := 1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1" id="650">
      <find>S.3.1.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1,1,1,1" id="651">
      <find>S.3.1</find>
      <schemavariable name="%b">$eq(sumA1 as int,resInt1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="1,1,1,1,1" id="652">
      <find>S.3.0.0.0</find>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1" id="653">
      <find>S.3.0.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,1 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$and($lt(_i1 as int,arrlen(_array as ref) as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1" id="654">
      <find>S.3.0</find>
      <schemavariable name="%a">$impl($eq(0 as int,2 as int) as bool,$and($eq(sA1 as set(int),seqAsSet(seqSub(arrayAsIntSeq(h as heap,_array as ref) as seq(int),_i1 as int,arrlen(_array as ref) as int) as seq(int)) as set(int)) as bool,$and($gte(_i1 as int,0 as int) as bool,$eq(sumA1 as int,_result1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_false_l" path="1,1,1,1,1" id="655">
      <find>S.3</find>
      <schemavariable name="%a">$eq(sumA1 as int,resInt1 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_right" path="1,1,1,1,1" id="656">
      <find>S.3</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1" id="657">
    </ruleApplication>
  </steps>
</proof>
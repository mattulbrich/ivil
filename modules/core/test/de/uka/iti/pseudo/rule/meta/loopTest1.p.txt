include 
  "$base.p"
  "$int.p"

function
  int a assignable
  int b assignable
  int c assignable
  int d assignable
  int e assignable
  
  int var
  int varAtPre
  bool inv

(* a modifies analysis of [0;P] ought to yield {c,a} *)
program P
  S: goto A, S2
  S2: goto B, S3
  S3: goto C, D
  
  A: a := 0
     goto S
  B: b := 0
     goto B
     goto S
  C: c := 0
     goto A, B
  D: d := 0
     end
     goto S 

(* application of invariant rule on [2;Q] with inv and var should yield [5;Q']
 * with Q' equivalent to Q_after *)
program Q
     a := 0
  start:
     b := 0
     assert true (* cover execution of all statements in this test *)
     assume true 
     havoc d
     skip # <---  (skip is removed)
     c := 0  
     goto start, cont
  cont:
     e := 0
     
     
program Q_after
     a := 0
  start:
     b := 0
     assert true
     assume true
     havoc d
     assert inv ; "Continuation preserves invariant"
     assert var >= 0 & var < varAtPre ; "Continuation reduces variant"
     assume false
     #  C U T   H E R E
     havoc d
     havoc b
     havoc c
     assume varAtPre = var
     assume inv
     c := 0
     goto start, cont
  cont:
     e := 0
     
program Q_after_without_var
     a := 0
  start:
     b := 0
     assert true
     assume true
     havoc d
     assert inv ; "Continuation preserves invariant"
     assume false
     #  C U T  H E R E
     havoc d
     havoc b
     havoc c
     assume inv
     c := 0
     goto start, cont
   cont:
     e := 0
     
     
program Bug1
  loop:
     skip
     a := 0
     goto loop
     
program Bug1_after
  loop:
     assert inv
     assume false
     havoc a
     assume inv
     a := 0
     goto loop
     
program Bug_termination
     a := 0
     b := 0

program ParallelAssignment
  loop:
     a := 0 || b:= 0
     goto loop
     
program ChangeAfterLoop
  loop:
     havoc a
     goto loop, after
  after:
     havoc b
     goto after

     
(* Was a bug in the detection of assigned variables in nested loops *)
program BugInLoopDetect
  l0: skip
  l1: goto l2, l4
  l2: havoc a
  l3: goto 1
  l4: goto l5, l7
  l5: havoc b
  l6: goto l5
  l7: goto l0
  
  
(* react on gotos into nirvana *)
program GoBeyond
  goto 10000
     
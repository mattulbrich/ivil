
//
// This file contains partial parser definition for terms only
//

// a greedy term ... read the whole stream
// needed for parsing terms
ASTTerm TermEOF():
{ 
  ASTTerm term;
}
{
        { token_source.SwitchTo(PROTECTED); }
	term=Term() <EOF>
	{ return term; }
}

ASTTerm Term():
{ 
  ASTTerm term;
  List<ASTTerm> list = new ArrayList<ASTTerm>();
  int depth = 0; 
}
{
        ( term=OpIdentifier() { list.add(term); } )*
        term=ModalityTerm() { list.add(term); }
        (  
          ( term=OpIdentifier() { list.add(term); } )+
          term=ModalityTerm() { list.add(term); }
        )*
   { 
     if(list.size() > 1)
        return new ASTListTerm(list);
     else
        return list.get(0);
   }
}

ASTTerm ModalityTerm():
{
  ASTTerm term;
  ASTProgramTerm pt;
  Token id;
  List<ASTAssignment> assignments = Collections.emptyList();
  boolean optional = false;
}
{      LOOKAHEAD(3)
         "{" id=<IDENTIFIER> 
           ( "}" | "?}" {optional=true;} )
           term=ModalityTerm()
            { return new ASTSchemaUpdateTerm(id, optional, term); }

       | "{" ( assignments=ParallelAssignment() )? "}" term=ModalityTerm() 
            { return new ASTUpdateTerm(assignments, term); }

       | (   "[" pt=ProgramTerm_Content(Modality.BOX) "]"
           | "[[" pt=ProgramTerm_Content(Modality.BOX_TERMINATION) "]" "]"
           | "[<" pt=ProgramTerm_Content(Modality.DIAMOND) ">]"
           | "[?" pt=ProgramTerm_Content(Modality.ANY) "?]"
         ) term=ModalityTerm() 
            { pt.addChild(term); return pt; }

       | term=AsTerm()
            { return term; }
}

ASTAssignment Assignment():
{
        ASTTerm target;
        ASTTerm term;
        List<ASTTerm> arguments = null;
        Token t = null, symbol = null;
}
{
        (
          target=SchemaVariable()
        | 
          ( t=<IDENTIFIER> | t=<INTERNAL_IDENTIFIER> )
                { target = new ASTIdentifierTerm(t); }
          (
             symbol="[" 
                { arguments = new ArrayList<ASTTerm>(); }
             term=Term()
                { arguments.add(term); }
             ( "," term=Term()
                { arguments.add(term); }
             )*
             "]"
          )?
        )
        ":=" term=Term()
        { 
            if(arguments != null) {
               // we cannot use the same ast node twice (it's tree after all), 
               // so simply create an identical one.
               ASTTerm targetCopy = new ASTIdentifierTerm(t);
               term = new ASTMapOperationTerm(symbol, targetCopy, arguments, term);
            }
            return new ASTAssignment(target, term); 
        }
}

List<ASTAssignment> ParallelAssignment():	 
{
  Token t;
  ASTTerm term;
  ASTAssignment assignment;
  List<ASTAssignment> assignments = new ArrayList<ASTAssignment>();
}
{
          assignment=Assignment() 
          	{ assignments.add(assignment); }
          ( "||"  assignment=Assignment() 
                { assignments.add(assignment); } )*
          	
          { return assignments; }
}

ASTProgramTerm ProgramTerm_Content(Modality modality):
{
  Token t, label, progref;
  ASTStatement matchStatement = null, st;
}
{
       ( label=<SCHEMA_IDENTIFIER> 
         (  ":" 
           ( LOOKAHEAD(2)
             matchStatement=Statement() 
           | matchStatement=SchematicAssignmentStatement()
           ) 
         )?
           { return new ASTProgramTerm(label, modality, matchStatement); }
            
       | 
         label=<NATURAL> ";" (progref=<PROGRAM_IDENTIFIER>|progref=<IDENTIFIER>)
         { return new ASTProgramTerm(label, modality, progref); }
       )
}

ASTTerm AsTerm():
{ 
  ASTTerm term;
  ASTType type; 
}
{
        term=MapAccessTerm()
        (
          "as"
          type=TypeRef()
            { term = new ASTAsType(term, type); }
        )?  
         { return term; }
}

ASTTerm MapAccessTerm():
{
  List<ASTTerm> args = new ArrayList<ASTTerm>();
  ASTTerm result, t;
  Token symbol;
  ASTTerm assignment = null;  
}
{
    result=BaseTerm()
    (
        symbol="["
        (
          t=Term() { args.add(t); }
          ( "," t = Term(){ args.add(t); } )*
        )?
        (
          ":=" assignment=Term()
        )? 
        "]"
        {
           result = new ASTMapOperationTerm(symbol, result, args, assignment);
           // bugfix:
           args.clear();
           assignment = null;
        }
    )*
    {
      return result;
    }
}

ASTTerm BaseTerm():
{ 
  ASTTerm term;
}
{
        ( LOOKAHEAD(2) "(" term=BinderTerm() ")"
        | LOOKAHEAD(2) "(" term=TypevarBinderTerm() ")"
        | "(" term=Term() ")"
        | term=ExplicitVariableTerm()
        | term=ApplicationTerm()
        | term=SchemaVariable()
        | term=NumberLiteral()
        )
        { return term; }
}

ASTTerm ExplicitVariableTerm():
{
  Token firstToken, varToken;
}
{
    firstToken="\\var" varToken=<IDENTIFIER>
      { return new ASTExplicitVariableTerm(firstToken, varToken); }
}

ASTBinderTerm BinderTerm():
{
  Token binderToken;
  ASTTerm t;
  Pair<Token, ASTType> bound;
  List<Pair<Token, ASTType>> boundVars = new ArrayList<Pair<Token, ASTType>>();
  LinkedList<ASTTerm> subterms = new LinkedList<ASTTerm>(); 
}
{
        binderToken = <BINDER_IDENTIFIER>
        
        bound = BoundVariable() { boundVars.add(bound); }
        ( "," bound = BoundVariable() { boundVars.add(bound); } )*

        ( ";" t=Term() { subterms.add(t); } )+
   { return new ASTBinderTerm(binderToken, boundVars, subterms); }
}

Pair<Token, ASTType> BoundVariable() :
{
  Token varToken;
  ASTType type = null; 
}
{
  ( varToken=<IDENTIFIER> | varToken=<SCHEMA_IDENTIFIER> )
  ( "as" type = TypeRef() )?
    { return Pair.make(varToken, type); }
}

ASTTypevarBinderTerm TypevarBinderTerm():
{
  Token binderToken;
  ASTType type;
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>(); 
}
{
        // this might be generalised later ... if ever needed ?!
        ( binderToken = <ALL_TY> | binderToken = <EX_TY> )
        
        // in top level terms
        ( type=BindableTypeRef() )

        ";" t=Term()
        
   { return new ASTTypevarBinderTerm(binderToken, type, t); }
}


ASTType TypeRef():
{
  Token token;
  List<ASTType> args = new ArrayList<ASTType>();
  ASTType ty;
}
{
		token = <IDENTIFIER>
		( LOOKAHEAD(2) // a binder declaration may follow, but has a binder-identifier next
		  "(" ty=TypeRef() { args.add(ty); }
		  		( "," ty=TypeRef() { args.add(ty); } )*
		  ")"
		)?
		{ return new ASTTypeApplication(token, args); }
	|
		ty=BindableTypeRef() { return ty; }
}

/* type references that can be used for type binders.
 * TypeApplications are not allowed */
ASTType BindableTypeRef():
{
  Token token;
}
{
                ( token = <TYVAR_IDENTIFIER> )
                { return new ASTTypeVar(token); }
        |
                ( token = <SCHEMA_TYPE_IDENTIFIER> )
                { return new ASTSchemaType(token); }
}

ASTTerm ApplicationTerm():
{
  ASTTerm t;
  List<ASTTerm> subterms = new ArrayList<ASTTerm>();
  ASTTerm result;
  Token symbol;
}
{
        (symbol=<IDENTIFIER> | symbol=<META_IDENTIFIER> | symbol=<INTERNAL_IDENTIFIER>)
        
        ( /* parentheses are not empty, constants dont have them */ 
          "("
          t=Term() { subterms.add(t); }
          ( "," t=Term() { subterms.add(t); } )*
          ")"
        )?
        
    { if(subterms.size() > 0) 
        result = new ASTApplicationTerm(symbol, subterms); 
      else
        result = new ASTIdentifierTerm(symbol);
      
      return result;
    }
}

ASTTerm OpIdentifier():
{ 
  Token t;
}
{
        t=<OP_IDENTIFIER>
  { return new ASTOperatorIdentifierTerm(t); }
}

ASTTerm Identifier():
{
  Token t;
}
{
        t=<IDENTIFIER>
  { return new ASTIdentifierTerm(t); }
}

ASTTerm InternalIdentifier():
{
  Token t;
}
{
        t=<INTERNAL_IDENTIFIER>
  { return new ASTIdentifierTerm(t); }
}

ASTNumberLiteralTerm NumberLiteral():
{
  Token t;
}
{
        t=<NATURAL>
  { return new ASTNumberLiteralTerm(t); }
}

ASTSchemaVariableTerm SchemaVariable():
{
	Token t;
}
{
        t=<SCHEMA_IDENTIFIER>
  { return new ASTSchemaVariableTerm(t); }
}
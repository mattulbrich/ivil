<?xml version="1.0"?>
<proof format="1"><info>
    <date>Thu May 26 18:36:20 CEST 2011</date>
    <version>0.0</version>
    <problem>|- [0;PrioQueueTake]</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="auto_assume" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%b">$gt(len(h as map(int,int)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">[0;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assume" path="" id="1">
      <find>S.0</find>
      <schemavariable name="%b">(\forall l as int;$impl($and($lte(1 as int,\var l as int) as bool,$lt(\var l as int,len(h as map(int,int)) as int) as bool) as bool,$gte(read(h as map(int,int),\var l as int) as int,read(h as map(int,int),$div($minus(\var l as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[1;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="2">
      <find>S.0</find>
      <schemavariable name="%a">[2;PrioQueueTake] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="" id="3">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,0 as int) as bool,$lt(0 as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[3;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0" id="4">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,0 as int) as bool,$lt(0 as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="0" id="5">
      <find>S.0.0</find>
      <schemavariable name="%t">$lte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="6">
      <find>S.0</find>
      <schemavariable name="%a">$lt(0 as int,len(h as map(int,int)) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0" id="7">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="8">
      <find>S.0.0</find>
      <schemavariable name="%a">[4;PrioQueueTake] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ result := read(h as map(int,int),0 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="9">
      <find>S.0</find>
      <schemavariable name="%t">{ result := read(h as map(int,int),0 as int) as int }([5;PrioQueueTake] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="10">
      <find>S.0.2</find>
      <schemavariable name="%t">read(h as map(int,int),0 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1" id="11">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$lt($minus(len(h as map(int,int)) as int,1 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[5;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="12">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$lt($minus(len(h as map(int,int)) as int,1 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0" id="13">
      <find>S.0</find>
      <schemavariable name="%b">$lt($minus(len(h as map(int,int)) as int,1 as int) as int,len(h as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0" id="14">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1" id="15">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1" id="16">
      <find>S.0.0</find>
      <schemavariable name="%a">[6;PrioQueueTake] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="17">
      <find>S.0</find>
      <schemavariable name="%t">{ last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int }([7;PrioQueueTake] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="18">
      <find>S.0.3</find>
      <schemavariable name="%t">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1" id="19">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$lt($minus(len(h as map(int,int)) as int,1 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[7;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="20">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$lt($minus(len(h as map(int,int)) as int,1 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0" id="21">
      <find>S.0</find>
      <schemavariable name="%b">$lt($minus(len(h as map(int,int)) as int,1 as int) as int,len(h as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,0" id="22">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1" id="23">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1" id="24">
      <find>S.0.0</find>
      <schemavariable name="%a">[8;PrioQueueTake] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="25">
      <find>S.0</find>
      <schemavariable name="%t">{ h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }([9;PrioQueueTake] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="26">
      <find>S.0.4</find>
      <schemavariable name="%t">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="t">map(int,int)</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,1,1" id="27">
      <find>S.0</find>
      <schemavariable name="%k">45 as int</schemavariable>
      <schemavariable name="%n">10 as int</schemavariable>
      <schemavariable name="%a">[9;PrioQueueTake] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0" id="28">
      <find>S.0</find>
      <schemavariable name="%b">$gt(len(h as map(int,int)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">[10;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0" id="29">
      <find>A.2</find>
      <schemavariable name="%t">$gt(len(h as map(int,int)) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0" id="30">
      <find>A.2.0</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0" id="31">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,0 as int) as bool,$lt(0 as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[11;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,0" id="32">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,0 as int) as bool,$lt(0 as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1,1,0,0" id="33">
      <find>S.0.0</find>
      <schemavariable name="%t">$lte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,0,0" id="34">
      <find>S.0</find>
      <schemavariable name="%a">$lt(0 as int,len(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)) as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,0" id="35">
      <find>S.0.1</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,0" id="36">
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1" id="37">
      <find>S.0.0</find>
      <schemavariable name="%a">[12;PrioQueueTake] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h := write(h as map(int,int),0 as int,last as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1" id="38">
      <find>S.0</find>
      <schemavariable name="%t">{ h := write(h as map(int,int),0 as int,last as int) as map(int,int) }([13;PrioQueueTake] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1" id="39">
      <find>S.0.4</find>
      <schemavariable name="%t">write(h as map(int,int),0 as int,last as int) as map(int,int)</schemavariable>
      <typevariable name="t">map(int,int)</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1" id="40">
      <find>S.0.0</find>
      <schemavariable name="%a">[13;PrioQueueTake] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ perm := insert(idPerm($minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1" id="41">
      <find>S.0</find>
      <schemavariable name="%t">{ perm := insert(idPerm($minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }([14;PrioQueueTake] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1" id="42">
      <find>S.0.5</find>
      <schemavariable name="%t">insert(idPerm($minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="t">map(int,int)</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="len_write" path="1,1,1,0,1" id="43">
      <find>S.0.5.0.0.0</find>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,1" id="44">
      <find>S.0.5.0.0.0</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_write" path="1,1,1,0,1" id="45">
      <find>S.0.5.2.0</find>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,1" id="46">
      <find>S.0.5.2.0</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1" id="47">
      <find>S.0</find>
      <schemavariable name="%b">isPermN(perm as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">[14;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,0" id="48">
      <find>S.0</find>
      <schemavariable name="%t">isPermN(perm as map(int,int)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="isPermN_def" path="1,1,1,0,1,0" id="49">
      <find>S.0</find>
      <schemavariable name="%p">insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="p">map(int,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,0" id="50">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,len(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as int) as bool) as bool,(\exists j as int;$and($and($lte(0 as int,\var j as int) as bool,$lt(\var j as int,len(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as int) as bool) as bool,$eq(read(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),\var i as int) as int,\var j as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,0" id="51">
      <find>S.0</find>
      <schemavariable name="%b">(\exists j as int;$and($and($lte(0 as int,\var j as int) as bool,$lt(\var j as int,len(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as int) as bool) as bool,$eq(read(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),i2 as int) as int,\var j as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(0 as int,i2 as int) as bool,$lt(i2 as int,len(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,0" id="52">
      <find>A.3</find>
      <schemavariable name="%b">$lt(i2 as int,len(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,i2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_insert" path="1,1,1,0,1,0" id="53">
      <find>A.4.1</find>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_idPerm" path="1,1,1,0,1,0" id="54">
      <find>A.4.1.0</find>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_insert" path="1,1,1,0,1,0" id="55">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_idPerm" path="1,1,1,0,1,0" id="56">
      <find>S.0.0.0.1.1.0</find>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_insert" path="1,1,1,0,1,0" id="57">
      <find>S.0.0.1.0</find>
      <schemavariable name="%j">i2 as int</schemavariable>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="j">int</typevariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_idPerm" path="1,1,1,0,1,0" id="58">
      <find>S.0.0.1.0.2</find>
      <schemavariable name="%i">cond($lt(i2 as int,0 as int) as bool,i2 as int,$minus(i2 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,0,1,0" id="59">
      <find>S.0.0.1.0</find>
      <schemavariable name="%a">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%b">cond($lt(i2 as int,0 as int) as bool,i2 as int,$minus(i2 as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%c">$eq(i2 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,0,0" id="60">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,0,1" id="61">
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1" id="62">
      <find>S.0</find>
      <schemavariable name="%b">isPermN(perm as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">[15;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1" id="63">
      <find>A.3</find>
      <schemavariable name="%t">isPermN(perm as map(int,int)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1" id="64">
      <find>S.0.0</find>
      <schemavariable name="%a">[16;PrioQueueTake] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1" id="65">
      <find>S.0</find>
      <schemavariable name="%t">{ i := 0 as int }([17;PrioQueueTake] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1" id="66">
      <find>S.0.6</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_loop_invariant_update" path="1,1,1,0,1,1" id="67">
      <find>S.0</find>
      <schemavariable name="%inv">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;PrioQueueTake] as bool</schemavariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,0" id="68">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,0,1,1,0" id="69">
      <find>S.0.0.1.0.1.1.0.0</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_true" path="1,1,1,0,1,1,0" id="70">
      <find>S.0.0.1.0.1.1.0</find>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1,1,0,1,1,0" id="71">
      <find>S.0.0.1.0.1.1</find>
      <schemavariable name="%b">$gte(read(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int),\var j as int) as int,read(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int),$div($minus(0 as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_write" path="1,1,1,0,1,1,0" id="72">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,1,1,0" id="73">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,0,1,1,0" id="74">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,0,1,1,0" id="75">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1,1,0,1,1,0" id="76">
      <find>S.0.0.0</find>
      <schemavariable name="%t">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,0,1,1,0" id="77">
      <find>S.0.0</find>
      <schemavariable name="%a">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int)) as int) as bool) as bool,cond($eq(0 as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,true as bool,$gte(read(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int),\var j as int) as int,read(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_write" path="1,1,1,0,1,1,0" id="78">
      <find>S.0.0.0.0.1.1</find>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,1,1,0" id="79">
      <find>S.0.0.0.0.1.1</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,1,1,0,1,1,0" id="80">
      <find>S.0.0.0.1.2.0</find>
      <schemavariable name="%a2">\var j as int</schemavariable>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a1">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a1">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="a2">int</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_removeNo" path="1,1,1,0,1,1,0" id="81">
      <find>S.0.0.0.1.2.0.2</find>
      <schemavariable name="%i">\var j as int</schemavariable>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,1,1,0,1,1,0" id="82">
      <find>S.0.0.0.1.2.1</find>
      <schemavariable name="%a2">$div($minus(\var j as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a1">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a1">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="a2">int</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_removeNo" path="1,1,1,0,1,1,0" id="83">
      <find>S.0.0.0.1.2.1.2</find>
      <schemavariable name="%i">$div($minus(\var j as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,0" id="84">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool) as bool,cond($eq(0 as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,true as bool,$gte(cond($eq(0 as int,\var j as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt(\var j as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,\var j as int,$plus(\var j as int,1 as int) as int) as int) as int) as int,cond($eq(0 as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt($div($minus(\var j as int,1 as int) as int,2 as int) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$div($minus(\var j as int,1 as int) as int,2 as int) as int,$plus($div($minus(\var j as int,1 as int) as int,2 as int) as int,1 as int) as int) as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,0,0" id="85">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool) as bool,cond($eq(0 as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,true as bool,$gte(cond($eq(0 as int,\var j as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt(\var j as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,\var j as int,$plus(\var j as int,1 as int) as int) as int) as int) as int,cond($eq(0 as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt($div($minus(\var j as int,1 as int) as int,2 as int) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$div($minus(\var j as int,1 as int) as int,2 as int) as int,$plus($div($minus(\var j as int,1 as int) as int,2 as int) as int,1 as int) as int) as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var j as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,0,0" id="86">
      <find>S.0</find>
      <schemavariable name="%b">cond($eq(0 as int,$div($minus(j as int,1 as int) as int,2 as int) as int) as bool,true as bool,$gte(cond($eq(0 as int,j as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt(j as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,j as int,$plus(j as int,1 as int) as int) as int) as int) as int,cond($eq(0 as int,$div($minus(j as int,1 as int) as int,2 as int) as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt($div($minus(j as int,1 as int) as int,2 as int) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$div($minus(j as int,1 as int) as int,2 as int) as int,$plus($div($minus(j as int,1 as int) as int,2 as int) as int,1 as int) as int) as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,j as int) as bool,$lt(j as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,0,0" id="87">
      <find>A.4</find>
      <schemavariable name="%b">$lt(j as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,j as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,0,0" id="88">
    </ruleApplication>
    <ruleApplication rule="isPerm_def" path="1,1,1,0,1,1,0,1" id="89">
      <find>S.0</find>
      <schemavariable name="%a">write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int)</schemavariable>
      <schemavariable name="%b">removeNo(h as map(int,int),0 as int) as map(int,int)</schemavariable>
      <typevariable name="b">map(int,int)</typevariable>
      <typevariable name="a">map(int,int)</typevariable>
      <typevariable name="17">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_write" path="1,1,1,0,1,1,0,1" id="90">
      <find>S.0.0.0</find>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,1,1,0,1" id="91">
      <find>S.0.0.0</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,1,1,0,1" id="92">
      <find>S.0.0.1</find>
      <schemavariable name="%n">0 as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,0,1,1,0,1" id="93">
      <find>S.0.0</find>
      <schemavariable name="%t">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,1,0,1,1,0,1" id="94">
      <find>S.0</find>
      <schemavariable name="%a">(\exists p as map(int,int);$and($and(isPermN(\var p as map(int,int)) as bool,$eq(len(\var p as map(int,int)) as int,len(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int)) as int) as bool) as bool,(\forall i as int;$impl($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,len(\var p as map(int,int)) as int) as bool) as bool,$eq(read(write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int),\var i as int) as int,read(removeNo(h as map(int,int),0 as int) as map(int,int),read(\var p as map(int,int),\var i as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_write" path="1,1,1,0,1,1,0,1" id="95">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,0,1,1,0,1" id="96">
      <find>S.0.0.0.1.1</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="readwrite" path="1,1,1,0,1,1,0,1" id="97">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%a2">\var i as int</schemavariable>
      <schemavariable name="%b">read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%a1">0 as int</schemavariable>
      <schemavariable name="%m">removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="a1">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="a2">int</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_removeNo" path="1,1,1,0,1,1,0,1" id="98">
      <find>S.0.0.1.0.1.0.2</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_removeNo" path="1,1,1,0,1,1,0,1" id="99">
      <find>S.0.0.1.0.1.1</find>
      <schemavariable name="%i">read(\var p as map(int,int),\var i as int) as int</schemavariable>
      <schemavariable name="%n">0 as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="exists_right_hide" path="1,1,1,0,1,1,0,1" id="100">
      <find>S.0</find>
      <schemavariable name="%inst">insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <schemavariable name="%x">\var p as map(int,int)</schemavariable>
      <schemavariable name="%b">$and($and(isPermN(\var p as map(int,int)) as bool,$eq(len(\var p as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool) as bool,(\forall i as int;$impl($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,len(\var p as map(int,int)) as int) as bool) as bool,$eq(cond($eq(0 as int,\var i as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt(\var i as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,\var i as int,$plus(\var i as int,1 as int) as int) as int) as int) as int,read(h as map(int,int),cond($lt(read(\var p as map(int,int),\var i as int) as int,0 as int) as bool,read(\var p as map(int,int),\var i as int) as int,$plus(read(\var p as map(int,int),\var i as int) as int,1 as int) as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">map(int,int)</typevariable>
      <property name="interact(%inst)">map(int,int)</property>
    </ruleApplication>
    <ruleApplication rule="len_insert" path="1,1,1,0,1,1,0,1" id="101">
      <find>S.0.0.1.0</find>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_idPerm" path="1,1,1,0,1,1,0,1" id="102">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_insert" path="1,1,1,0,1,1,0,1" id="103">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_idPerm" path="1,1,1,0,1,1,0,1" id="104">
      <find>S.0.1.0.0.1.1.0</find>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_insert" path="1,1,1,0,1,1,0,1" id="105">
      <find>S.0.1.0.1.1.1.0.0</find>
      <schemavariable name="%j">\var i as int</schemavariable>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="j">int</typevariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_idPerm" path="1,1,1,0,1,1,0,1" id="106">
      <find>S.0.1.0.1.1.1.0.0.2</find>
      <schemavariable name="%i">cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_insert" path="1,1,1,0,1,1,0,1" id="107">
      <find>S.0.1.0.1.1.1.1</find>
      <schemavariable name="%j">\var i as int</schemavariable>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="j">int</typevariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_idPerm" path="1,1,1,0,1,1,0,1" id="108">
      <find>S.0.1.0.1.1.1.1.2</find>
      <schemavariable name="%i">cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_insert" path="1,1,1,0,1,1,0,1" id="109">
      <find>S.0.1.0.1.1.1.2.0</find>
      <schemavariable name="%j">\var i as int</schemavariable>
      <schemavariable name="%b">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%i">0 as int</schemavariable>
      <schemavariable name="%m">idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)</schemavariable>
      <typevariable name="j">int</typevariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="b">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_idPerm" path="1,1,1,0,1,1,0,1" id="110">
      <find>S.0.1.0.1.1.1.2.0.2</find>
      <schemavariable name="%i">cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int</schemavariable>
      <schemavariable name="%n">$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,0,1" id="111">
      <find>S.0</find>
      <schemavariable name="%b">(\forall i as int;$impl($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$plus($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,1 as int) as int) as bool) as bool,$eq(cond($eq(0 as int,\var i as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt(\var i as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,\var i as int,$plus(\var i as int,1 as int) as int) as int) as int) as int,read(h as map(int,int),cond($lt(cond($eq(\var i as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int) as int,0 as int) as bool,cond($eq(\var i as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int) as int,$plus(cond($eq(\var i as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int) as int,1 as int) as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and(isPermN(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as bool,$eq($plus($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,1 as int) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,0,1,0" id="112">
      <find>S.0</find>
      <schemavariable name="%b">$eq($plus($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,1 as int) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">isPermN(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,0,1,0,0" id="113">
      <find>S.0</find>
      <assume>A.3</assume>
      <schemavariable name="%b">isPermN(insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,0,1,0,1" id="114">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,0,1,1" id="115">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,$plus($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,1 as int) as int) as bool) as bool,$eq(cond($eq(0 as int,\var i as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt(\var i as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,\var i as int,$plus(\var i as int,1 as int) as int) as int) as int) as int,read(h as map(int,int),cond($lt(cond($eq(\var i as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int) as int,0 as int) as bool,cond($eq(\var i as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int) as int,$plus(cond($eq(\var i as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(\var i as int,0 as int) as bool,\var i as int,$minus(\var i as int,1 as int) as int) as int) as int,1 as int) as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i3</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,0,1,1" id="116">
      <find>S.0</find>
      <schemavariable name="%b">$eq(cond($eq(0 as int,i3 as int) as bool,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int,read(h as map(int,int),cond($lt(i3 as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,i3 as int,$plus(i3 as int,1 as int) as int) as int) as int) as int,read(h as map(int,int),cond($lt(cond($eq(i3 as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(i3 as int,0 as int) as bool,i3 as int,$minus(i3 as int,1 as int) as int) as int) as int,0 as int) as bool,cond($eq(i3 as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(i3 as int,0 as int) as bool,i3 as int,$minus(i3 as int,1 as int) as int) as int) as int,$plus(cond($eq(i3 as int,0 as int) as bool,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,cond($lt(i3 as int,0 as int) as bool,i3 as int,$minus(i3 as int,1 as int) as int) as int) as int,1 as int) as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(0 as int,i3 as int) as bool,$lt(i3 as int,$plus($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,0,1,1" id="117">
      <find>A.4</find>
      <schemavariable name="%b">$lt(i3 as int,$plus($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,i3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,0,1,1" id="118">
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,1,1,0,1,1,1" id="119">
      <find>S.0</find>
      <schemavariable name="%v">min as int</schemavariable>
      <schemavariable name="%a">[19;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int }</schemaupdate>
      <property name="skolemName(min as int)">min1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1" id="120">
      <find>S.0</find>
      <schemavariable name="%t">{ min := min1 as int }([20;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1" id="121">
      <find>S.0.7</find>
      <schemavariable name="%t">min1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,1,1,0,1,1,1" id="122">
      <find>S.0</find>
      <schemavariable name="%v">h as map(int,int)</schemavariable>
      <schemavariable name="%a">[20;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="v">map(int,int)</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int || min := min1 as int }</schemaupdate>
      <property name="skolemName(h as map(int,int))">h1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1" id="123">
      <find>S.0</find>
      <schemavariable name="%t">{ h := h1 as map(int,int) }([21;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int || min := min1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1" id="124">
      <find>S.0.7</find>
      <schemavariable name="%t">h1 as map(int,int)</schemavariable>
      <typevariable name="t">map(int,int)</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := write(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),0 as int,read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int) as map(int,int) || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int || min := min1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_havoc_upd" path="1,1,1,0,1,1,1" id="125">
      <find>S.0</find>
      <schemavariable name="%v">i as int</schemavariable>
      <schemavariable name="%a">[21;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int || min := min1 as int || h := h1 as map(int,int) }</schemaupdate>
      <property name="skolemName(i as int)">i1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1" id="126">
      <find>S.0</find>
      <schemavariable name="%t">{ i := i1 as int }([22;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int || min := min1 as int || h := h1 as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1" id="127">
      <find>S.0.7</find>
      <schemavariable name="%t">i1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := 0 as int || min := min1 as int || h := h1 as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1" id="128">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[22;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1" id="129">
      <find>A.4</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1" id="130">
      <find>A.4</find>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(i1 as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(i1 as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i1 as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(i1 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1" id="131">
      <find>A.4</find>
      <schemavariable name="%b">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(i1 as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i1 as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(i1 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(i1 as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1" id="132">
      <find>A.4</find>
      <schemavariable name="%b">$gte(i1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,1,0,1,1,1" id="133">
      <find>A.4</find>
      <schemavariable name="%u">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%t">len(h1 as map(int,int)) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,1,1,0,1,1,1" id="134">
      <find>S.0</find>
      <schemavariable name="%k">48 as int</schemavariable>
      <schemavariable name="%n">24 as int</schemavariable>
      <schemavariable name="%a">[23;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0" id="135">
      <find>S.0</find>
      <schemavariable name="%b">$lt(i as int,$div(len(h as map(int,int)) as int,2 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[24;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0" id="136">
      <find>A.8</find>
      <schemavariable name="%t">$lt(i as int,$div(len(h as map(int,int)) as int,2 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,1,1,0,1,1,1,0" id="137">
      <find>S.0</find>
      <schemavariable name="%k">29 as int</schemavariable>
      <schemavariable name="%n">26 as int</schemavariable>
      <schemavariable name="%a">[25;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,0" id="138">
      <find>S.0</find>
      <schemavariable name="%b">$eq($plus($mult(2 as int,i as int) as int,2 as int) as int,len(h as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">[26;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0" id="139">
      <find>A.9</find>
      <schemavariable name="%t">$eq($plus($mult(2 as int,i as int) as int,2 as int) as int,len(h as map(int,int)) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,0" id="140">
      <find>S.0.0</find>
      <schemavariable name="%a">[27;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ min := $plus($mult(2 as int,i as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0" id="141">
      <find>S.0</find>
      <schemavariable name="%t">{ min := $plus($mult(2 as int,i as int) as int,1 as int) as int }([28;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0" id="142">
      <find>S.0.7</find>
      <schemavariable name="%t">$plus($mult(2 as int,i as int) as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,0" id="143">
      <find>S.0.0</find>
      <schemavariable name="%n">38 as int</schemavariable>
      <schemavariable name="%a">[28;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,0" id="144">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,i as int) as bool,$lt(i as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[38;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,0" id="145">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,i as int) as bool,$lt(i as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,0" id="146">
      <find>S.0</find>
      <schemavariable name="%b">$lt(i1 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,0,0" id="147">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,0,1" id="148">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,0,1" id="149">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,min as int) as bool,$lt(min as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[39;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,0" id="150">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,min as int) as bool,$lt(min as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,1,0" id="151">
      <find>S.0</find>
      <schemavariable name="%b">$lt($plus($mult(2 as int,i1 as int) as int,1 as int) as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,0,0" id="152">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,0,1" id="153">
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,1,1,0,1,1,1,0,0,1,1" id="154">
      <find>S.0</find>
      <schemavariable name="%k">45 as int</schemavariable>
      <schemavariable name="%n">41 as int</schemavariable>
      <schemavariable name="%a">[40;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,0,1,1,0" id="155">
      <find>S.0</find>
      <schemavariable name="%b">$gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[41;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,0" id="156">
      <find>A.10</find>
      <schemavariable name="%t">$gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,0,1,1,0" id="157">
      <find>S.0.0</find>
      <schemavariable name="%a">[42;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h := swap(h as map(int,int),i as int,min as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,0" id="158">
      <find>S.0</find>
      <schemavariable name="%t">{ h := swap(h as map(int,int),i as int,min as int) as map(int,int) }([43;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,0" id="159">
      <find>S.0.7</find>
      <schemavariable name="%t">swap(h as map(int,int),i as int,min as int) as map(int,int)</schemavariable>
      <typevariable name="t">map(int,int)</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,0,1,1,0" id="160">
      <find>S.0.0</find>
      <schemavariable name="%a">[43;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ i := min as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,0" id="161">
      <find>S.0</find>
      <schemavariable name="%t">{ i := min as int }([44;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,0" id="162">
      <find>S.0.7</find>
      <schemavariable name="%t">min as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,0,1,1,0" id="163">
      <find>S.0.0</find>
      <schemavariable name="%n">47 as int</schemavariable>
      <schemavariable name="%a">[44;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,0,1,1,0" id="164">
      <find>S.0.0</find>
      <schemavariable name="%n">17 as int</schemavariable>
      <schemavariable name="%a">[47;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,0,1,1,0" id="165">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,0,0" id="166">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="len_swap" path="1,1,1,0,1,1,1,0,0,1,1,0,0" id="167">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="3">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_swap" path="1,1,1,0,1,1,1,0,0,1,1,0,0" id="168">
      <find>S.0.0.1.0.0.1.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="3">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,1,1,0,0" id="169">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0" id="170">
      <find>S.0</find>
      <schemavariable name="%b">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,0" id="171">
      <find>S.0</find>
      <schemavariable name="%b">$gte($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0" id="172">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,1" id="173">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1" id="174">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var j as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1" id="175">
      <find>S.0</find>
      <schemavariable name="%b">cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(j2 as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j2 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j2 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(j2 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,j2 as int) as bool,$lt(j2 as int,len(h1 as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1" id="176">
      <find>A.11</find>
      <schemavariable name="%b">$lt(j2 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,j2 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1" id="177">
      <find>S.0</find>
      <schemavariable name="%a">$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j2 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j2 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(j2 as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%c">$eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(j2 as int,1 as int) as int,2 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0" id="178">
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,1" id="179">
      <find>S.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">j2 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,1" id="180">
      <find>S.0.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">$div($minus(j2 as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,1" id="181">
    </ruleApplication>
    <ruleApplication rule="isPerm_swap" path="1,1,1,0,1,1,1,0,0,1,1,0,0,1" id="182">
      <find>S.0</find>
      <schemavariable name="%a">i1 as int</schemavariable>
      <schemavariable name="%b">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%n">removeNo(h as map(int,int),0 as int) as map(int,int)</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="n">map(int,int)</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,1,0,0,1,1,0,0,1" id="183">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1,1,1,0,0,1,1,0,1" id="184">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[18;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,0,1" id="185">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,0,0,1,1,0,1" id="186">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,0,1,1,1" id="187">
      <find>S.0</find>
      <schemavariable name="%b">$not($gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[45;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,1" id="188">
      <find>A.10</find>
      <schemavariable name="%t">$not($gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,0,0,1,1,1" id="189">
      <find>A.10</find>
      <schemavariable name="%b">$gt(read(h1 as map(int,int),i1 as int) as int,read(h1 as map(int,int),$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,0,1,1,1" id="190">
      <find>S.0.0</find>
      <schemavariable name="%a">[46;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ i := len(h as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,1" id="191">
      <find>S.0</find>
      <schemavariable name="%t">{ i := len(h as map(int,int)) as int }([47;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,1" id="192">
      <find>S.0.7</find>
      <schemavariable name="%t">len(h as map(int,int)) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,0,1,1,1" id="193">
      <find>S.0.0</find>
      <schemavariable name="%n">17 as int</schemavariable>
      <schemavariable name="%a">[47;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,0,1,1,1" id="194">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,1,0" id="195">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,1,1,1,0" id="196">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0" id="197">
      <find>S.0</find>
      <schemavariable name="%b">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(len(h1 as map(int,int)) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0,0" id="198">
      <find>S.0</find>
      <schemavariable name="%b">$gte(len(h1 as map(int,int)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0" id="199">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,1" id="200">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0,1" id="201">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var j as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0,1" id="202">
      <find>S.0</find>
      <schemavariable name="%b">cond($eq(len(h1 as map(int,int)) as int,$div($minus(j1 as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),j1 as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),j1 as int) as int,read(h1 as map(int,int),$div($minus(j1 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,j1 as int) as bool,$lt(j1 as int,len(h1 as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0,1" id="203">
      <find>A.10</find>
      <schemavariable name="%b">$lt(j1 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,j1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,0,1,1,1,0,0,1" id="204">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,1,0,0,1,1,1,0,1" id="205">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1,1,1,0,0,1,1,1,1" id="206">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[18;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,0,1,1,1,1" id="207">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,0,0,1,1,1,1" id="208">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,1" id="209">
      <find>S.0</find>
      <schemavariable name="%b">$not($eq($plus($mult(2 as int,i as int) as int,2 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[29;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1" id="210">
      <find>A.9</find>
      <schemavariable name="%t">$not($eq($plus($mult(2 as int,i as int) as int,2 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,0,1" id="211">
      <find>A.9</find>
      <schemavariable name="%b">$eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1" id="212">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,$plus($mult(2 as int,i as int) as int,1 as int) as int) as bool,$lt($plus($mult(2 as int,i as int) as int,1 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[30;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,0" id="213">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,$plus($mult(2 as int,i as int) as int,1 as int) as int) as bool,$lt($plus($mult(2 as int,i as int) as int,1 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,0" id="214">
      <find>S.0</find>
      <schemavariable name="%b">$lt($plus($mult(2 as int,i1 as int) as int,1 as int) as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,0,0" id="215">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,0,1" id="216">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1" id="217">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,$plus($mult(2 as int,i as int) as int,2 as int) as int) as bool,$lt($plus($mult(2 as int,i as int) as int,2 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[31;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,0" id="218">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,$plus($mult(2 as int,i as int) as int,2 as int) as int) as bool,$lt($plus($mult(2 as int,i as int) as int,2 as int) as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,0" id="219">
      <find>S.0</find>
      <schemavariable name="%b">$lt($plus($mult(2 as int,i1 as int) as int,2 as int) as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,0,0" id="220">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,0,1" id="221">
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,1,1,0,1,1,1,0,1,1,1" id="222">
      <find>S.0</find>
      <schemavariable name="%k">36 as int</schemavariable>
      <schemavariable name="%n">33 as int</schemavariable>
      <schemavariable name="%a">[32;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,1,1,1,0" id="223">
      <find>S.0</find>
      <schemavariable name="%b">$gt(read(h as map(int,int),$plus($mult(2 as int,i as int) as int,1 as int) as int) as int,read(h as map(int,int),$plus($mult(2 as int,i as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[33;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0" id="224">
      <find>A.9</find>
      <schemavariable name="%t">$gt(read(h as map(int,int),$plus($mult(2 as int,i as int) as int,1 as int) as int) as int,read(h as map(int,int),$plus($mult(2 as int,i as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,0" id="225">
      <find>S.0.0</find>
      <schemavariable name="%a">[34;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ min := $plus($mult(2 as int,i as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0" id="226">
      <find>S.0</find>
      <schemavariable name="%t">{ min := $plus($mult(2 as int,i as int) as int,2 as int) as int }([35;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0" id="227">
      <find>S.0.7</find>
      <schemavariable name="%t">$plus($mult(2 as int,i as int) as int,2 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,1,1,1,0" id="228">
      <find>S.0.0</find>
      <schemavariable name="%n">38 as int</schemavariable>
      <schemavariable name="%a">[35;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,0" id="229">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,i as int) as bool,$lt(i as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[38;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,0" id="230">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,i as int) as bool,$lt(i as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,0" id="231">
      <find>S.0</find>
      <schemavariable name="%b">$lt(i1 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,0,0" id="232">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,0,1" id="233">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,0,1" id="234">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,min as int) as bool,$lt(min as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[39;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,0" id="235">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,min as int) as bool,$lt(min as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,0" id="236">
      <find>S.0</find>
      <schemavariable name="%b">$lt($plus($mult(2 as int,i1 as int) as int,2 as int) as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,0,0" id="237">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,0,1" id="238">
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1" id="239">
      <find>S.0</find>
      <schemavariable name="%k">45 as int</schemavariable>
      <schemavariable name="%n">41 as int</schemavariable>
      <schemavariable name="%a">[40;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="240">
      <find>S.0</find>
      <schemavariable name="%b">$gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[41;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="241">
      <find>A.10</find>
      <schemavariable name="%t">$gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="242">
      <find>S.0.0</find>
      <schemavariable name="%a">[42;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h := swap(h as map(int,int),i as int,min as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="243">
      <find>S.0</find>
      <schemavariable name="%t">{ h := swap(h as map(int,int),i as int,min as int) as map(int,int) }([43;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="244">
      <find>S.0.7</find>
      <schemavariable name="%t">swap(h as map(int,int),i as int,min as int) as map(int,int)</schemavariable>
      <typevariable name="t">map(int,int)</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="245">
      <find>S.0.0</find>
      <schemavariable name="%a">[43;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ i := min as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="246">
      <find>S.0</find>
      <schemavariable name="%t">{ i := min as int }([44;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="247">
      <find>S.0.7</find>
      <schemavariable name="%t">min as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="248">
      <find>S.0.0</find>
      <schemavariable name="%n">47 as int</schemavariable>
      <schemavariable name="%a">[44;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="249">
      <find>S.0.0</find>
      <schemavariable name="%n">17 as int</schemavariable>
      <schemavariable name="%a">[47;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0" id="250">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0" id="251">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="len_swap" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0" id="252">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="3">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_swap" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0" id="253">
      <find>S.0.0.1.0.0.1.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="3">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0" id="254">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,2 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0" id="255">
      <find>S.0</find>
      <schemavariable name="%b">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,2 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0" id="256">
      <find>S.0</find>
      <schemavariable name="%b">$gte($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0" id="257">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1" id="258">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1" id="259">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,2 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var j as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j6</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1" id="260">
      <find>S.0</find>
      <schemavariable name="%b">cond($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,$div($minus(j6 as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),j6 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,2 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),j6 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus(j6 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,j6 as int) as bool,$lt(j6 as int,len(h1 as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1" id="261">
      <find>A.11</find>
      <schemavariable name="%b">$lt(j6 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,j6 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1" id="262">
      <find>S.0</find>
      <schemavariable name="%a">$impl($not($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),j6 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,2 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),j6 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus(j6 as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%c">$eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,$div($minus(j6 as int,1 as int) as int,2 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0" id="263">
      <find>S.0</find>
      <schemavariable name="%b">$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),j6 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,2 as int) as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$not($eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0" id="264">
      <find>A.14</find>
      <schemavariable name="%b">$eq($plus($mult(2 as int,i1 as int) as int,2 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0" id="265">
      <find>A.13</find>
      <schemavariable name="%u">$div($minus(j6 as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%t">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0" id="266">
      <find>S.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">j6 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0" id="267">
      <find>S.0.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">$div($minus($plus($mult(2 as int,i1 as int) as int,2 as int) as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0" id="268">
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1" id="269">
      <find>S.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">j6 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1" id="270">
      <find>S.0.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">$div($minus(j6 as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1" id="271">
    </ruleApplication>
    <ruleApplication rule="isPerm_swap" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1" id="272">
      <find>S.0</find>
      <schemavariable name="%a">i1 as int</schemavariable>
      <schemavariable name="%b">$plus($mult(2 as int,i1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%n">removeNo(h as map(int,int),0 as int) as map(int,int)</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="n">map(int,int)</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1" id="273">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1" id="274">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[18;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1" id="275">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1" id="276">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="277">
      <find>S.0</find>
      <schemavariable name="%b">$not($gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[45;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="278">
      <find>A.10</find>
      <schemavariable name="%t">$not($gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="279">
      <find>A.10</find>
      <schemavariable name="%b">$gt(read(h1 as map(int,int),i1 as int) as int,read(h1 as map(int,int),$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="280">
      <find>S.0.0</find>
      <schemavariable name="%a">[46;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ i := len(h as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="281">
      <find>S.0</find>
      <schemavariable name="%t">{ i := len(h as map(int,int)) as int }([47;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="282">
      <find>S.0.7</find>
      <schemavariable name="%t">len(h as map(int,int)) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="283">
      <find>S.0.0</find>
      <schemavariable name="%n">17 as int</schemavariable>
      <schemavariable name="%a">[47;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1" id="284">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0" id="285">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0" id="286">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0" id="287">
      <find>S.0</find>
      <schemavariable name="%b">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(len(h1 as map(int,int)) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0" id="288">
      <find>S.0</find>
      <schemavariable name="%b">$gte(len(h1 as map(int,int)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0" id="289">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1" id="290">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1" id="291">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var j as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j4</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1" id="292">
      <find>S.0</find>
      <schemavariable name="%b">cond($eq(len(h1 as map(int,int)) as int,$div($minus(j4 as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),j4 as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),j4 as int) as int,read(h1 as map(int,int),$div($minus(j4 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,j4 as int) as bool,$lt(j4 as int,len(h1 as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1" id="293">
      <find>A.10</find>
      <schemavariable name="%b">$lt(j4 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,j4 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1" id="294">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1" id="295">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1" id="296">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[18;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1" id="297">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,2 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1" id="298">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,1,1,1,1" id="299">
      <find>S.0</find>
      <schemavariable name="%b">$not($gt(read(h as map(int,int),$plus($mult(2 as int,i as int) as int,1 as int) as int) as int,read(h as map(int,int),$plus($mult(2 as int,i as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[36;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1" id="300">
      <find>A.9</find>
      <schemavariable name="%t">$not($gt(read(h as map(int,int),$plus($mult(2 as int,i as int) as int,1 as int) as int) as int,read(h as map(int,int),$plus($mult(2 as int,i as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,0,1,1,1,1" id="301">
      <find>A.9</find>
      <schemavariable name="%b">$gt(read(h1 as map(int,int),$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as int,read(h1 as map(int,int),$plus($mult(2 as int,i1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,1" id="302">
      <find>S.0.0</find>
      <schemavariable name="%a">[37;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ min := $plus($mult(2 as int,i as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1" id="303">
      <find>S.0</find>
      <schemavariable name="%t">{ min := $plus($mult(2 as int,i as int) as int,1 as int) as int }([38;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1" id="304">
      <find>S.0.7</find>
      <schemavariable name="%t">$plus($mult(2 as int,i as int) as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,1" id="305">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,i as int) as bool,$lt(i as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[38;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,0" id="306">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,i as int) as bool,$lt(i as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,0" id="307">
      <find>S.0</find>
      <schemavariable name="%b">$lt(i1 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,0,0" id="308">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,0,1" id="309">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,1,1" id="310">
      <find>S.0</find>
      <schemavariable name="%b">$and($lte(0 as int,min as int) as bool,$lt(min as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[39;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,0" id="311">
      <find>S.0</find>
      <schemavariable name="%t">$and($lte(0 as int,min as int) as bool,$lt(min as int,len(h as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,0" id="312">
      <find>S.0</find>
      <schemavariable name="%b">$lt($plus($mult(2 as int,i1 as int) as int,1 as int) as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(0 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,0,0" id="313">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,0,1" id="314">
    </ruleApplication>
    <ruleApplication rule="auto_goto2_upd" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1" id="315">
      <find>S.0</find>
      <schemavariable name="%k">45 as int</schemavariable>
      <schemavariable name="%n">41 as int</schemavariable>
      <schemavariable name="%a">[40;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="316">
      <find>S.0</find>
      <schemavariable name="%b">$gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[41;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="317">
      <find>A.9</find>
      <schemavariable name="%t">$gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="318">
      <find>S.0.0</find>
      <schemavariable name="%a">[42;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h := swap(h as map(int,int),i as int,min as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="319">
      <find>S.0</find>
      <schemavariable name="%t">{ h := swap(h as map(int,int),i as int,min as int) as map(int,int) }([43;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="320">
      <find>S.0.7</find>
      <schemavariable name="%t">swap(h as map(int,int),i as int,min as int) as map(int,int)</schemavariable>
      <typevariable name="t">map(int,int)</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="321">
      <find>S.0.0</find>
      <schemavariable name="%a">[43;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ i := min as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="322">
      <find>S.0</find>
      <schemavariable name="%t">{ i := min as int }([44;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="323">
      <find>S.0.7</find>
      <schemavariable name="%t">min as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="324">
      <find>S.0.0</find>
      <schemavariable name="%n">47 as int</schemavariable>
      <schemavariable name="%a">[44;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="325">
      <find>S.0.0</find>
      <schemavariable name="%n">17 as int</schemavariable>
      <schemavariable name="%a">[47;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0" id="326">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0" id="327">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="len_swap" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0" id="328">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="3">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_swap" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0" id="329">
      <find>S.0.0.1.0.0.1.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="3">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0" id="330">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0" id="331">
      <find>S.0</find>
      <schemavariable name="%b">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0" id="332">
      <find>S.0</find>
      <schemavariable name="%b">$gte($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0" id="333">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1" id="334">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1" id="335">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),\var j as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var j as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j5</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1" id="336">
      <find>S.0</find>
      <schemavariable name="%b">cond($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(j5 as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j5 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j5 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(j5 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,j5 as int) as bool,$lt(j5 as int,len(h1 as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1" id="337">
      <find>A.10</find>
      <schemavariable name="%b">$lt(j5 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,j5 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1" id="338">
      <find>S.0</find>
      <schemavariable name="%a">$impl($not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool,$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j5 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j5 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus(j5 as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%c">$eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,$div($minus(j5 as int,1 as int) as int,2 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0" id="339">
      <find>S.0</find>
      <schemavariable name="%b">$gte(read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),j5 as int) as int,read(swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int),$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$not($eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0" id="340">
      <find>A.13</find>
      <schemavariable name="%b">$eq($plus($mult(2 as int,i1 as int) as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0" id="341">
      <find>A.12</find>
      <schemavariable name="%u">$div($minus(j5 as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%t">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <typevariable name="u">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0" id="342">
      <find>S.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">j5 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0" id="343">
      <find>S.0.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">$div($minus($plus($mult(2 as int,i1 as int) as int,1 as int) as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0" id="344">
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1" id="345">
      <find>S.0.0</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">j5 as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_swap" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1" id="346">
      <find>S.0.1</find>
      <schemavariable name="%y">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">i1 as int</schemavariable>
      <schemavariable name="%a">$div($minus(j5 as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="y">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1" id="347">
    </ruleApplication>
    <ruleApplication rule="isPerm_swap" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1" id="348">
      <find>S.0</find>
      <schemavariable name="%a">i1 as int</schemavariable>
      <schemavariable name="%b">$plus($mult(2 as int,i1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%n">removeNo(h as map(int,int),0 as int) as map(int,int)</schemavariable>
      <schemavariable name="%m">h1 as map(int,int)</schemavariable>
      <typevariable name="3">int</typevariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="n">map(int,int)</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1" id="349">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1" id="350">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[18;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1" id="351">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || h := swap(h1 as map(int,int),i1 as int,$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as map(int,int) || i := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1" id="352">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="353">
      <find>S.0</find>
      <schemavariable name="%b">$not($gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[45;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="354">
      <find>A.9</find>
      <schemavariable name="%t">$not($gt(read(h as map(int,int),i as int) as int,read(h as map(int,int),min as int) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="355">
      <find>A.9</find>
      <schemavariable name="%b">$gt(read(h1 as map(int,int),i1 as int) as int,read(h1 as map(int,int),$plus($mult(2 as int,i1 as int) as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="356">
      <find>S.0.0</find>
      <schemavariable name="%a">[46;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ i := len(h as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="357">
      <find>S.0</find>
      <schemavariable name="%t">{ i := len(h as map(int,int)) as int }([47;PrioQueueTake'] as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="358">
      <find>S.0.7</find>
      <schemavariable name="%t">len(h as map(int,int)) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || i := i1 as int || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="359">
      <find>S.0.0</find>
      <schemavariable name="%n">17 as int</schemavariable>
      <schemavariable name="%a">[47;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1" id="360">
      <find>S.0</find>
      <schemavariable name="%b">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <schemavariable name="%a">[17;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0" id="361">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool,$gte(i as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h as map(int,int)) as int) as bool) as bool,cond($eq(i as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(i as int,0 as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(i as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h as map(int,int),\var j as int) as int,read(h as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool,isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0" id="362">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">$and($and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0" id="363">
      <find>S.0</find>
      <schemavariable name="%b">(\forall j as int;$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool,$gte(len(h1 as map(int,int)) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0" id="364">
      <find>S.0</find>
      <schemavariable name="%b">$gte(len(h1 as map(int,int)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%a">$eq(len(h1 as map(int,int)) as int,$minus(len(h as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0" id="365">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1" id="366">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1" id="367">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var j as int) as bool,$lt(\var j as int,len(h1 as map(int,int)) as int) as bool) as bool,cond($eq(len(h1 as map(int,int)) as int,$div($minus(\var j as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var j as int) as int,read(h1 as map(int,int),$div($minus(\var j as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var j as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j3</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1" id="368">
      <find>S.0</find>
      <schemavariable name="%b">cond($eq(len(h1 as map(int,int)) as int,$div($minus(j3 as int,1 as int) as int,2 as int) as int) as bool,$impl($not($eq(len(h1 as map(int,int)) as int,0 as int) as bool) as bool,$gte(read(h1 as map(int,int),j3 as int) as int,read(h1 as map(int,int),$div($minus(len(h1 as map(int,int)) as int,1 as int) as int,2 as int) as int) as int) as bool) as bool,$gte(read(h1 as map(int,int),j3 as int) as int,read(h1 as map(int,int),$div($minus(j3 as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,j3 as int) as bool,$lt(j3 as int,len(h1 as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1" id="369">
      <find>A.9</find>
      <schemavariable name="%b">$lt(j3 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,j3 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1" id="370">
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1" id="371">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1" id="372">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[18;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1" id="373">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || h := h1 as map(int,int) || min := $plus($mult(2 as int,i1 as int) as int,1 as int) as int || i := len(h1 as map(int,int)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1" id="374">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,0,1,1,1,1" id="375">
      <find>S.0</find>
      <schemavariable name="%b">$not($lt(i as int,$div(len(h as map(int,int)) as int,2 as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[48;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,1" id="376">
      <find>A.8</find>
      <schemavariable name="%t">$not($lt(i as int,$div(len(h as map(int,int)) as int,2 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,0,1,1,1,1" id="377">
      <find>A.8</find>
      <schemavariable name="%b">$lt(i1 as int,$div(len(h1 as map(int,int)) as int,2 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,1,0,1,1,1,1" id="378">
      <find>S.0.0</find>
      <schemavariable name="%n">51 as int</schemavariable>
      <schemavariable name="%a">[49;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,1" id="379">
      <find>S.0</find>
      <schemavariable name="%b">$eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[51;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,1,0" id="380">
      <find>S.0</find>
      <schemavariable name="%t">$eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,1,0" id="381">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,1,1" id="382">
      <find>S.0</find>
      <schemavariable name="%b">$eq(result as int,read(h0 as map(int,int),0 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[52;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,1,1,0" id="383">
      <find>S.0</find>
      <schemavariable name="%t">$eq(result as int,read(h0 as map(int,int),0 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,0,1,1,1,1,1,0" id="384">
      <find>S.0</find>
      <schemavariable name="%t">read(h as map(int,int),0 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,1,1,0" id="385">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,1,1,1" id="386">
      <find>S.0</find>
      <schemavariable name="%b">(\forall k as int;$impl($and($lte(1 as int,\var k as int) as bool,$lt(\var k as int,len(h as map(int,int)) as int) as bool) as bool,$gte(read(h as map(int,int),\var k as int) as int,read(h as map(int,int),$div($minus(\var k as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[53;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,1,1,1,0" id="387">
      <find>S.0</find>
      <schemavariable name="%t">(\forall k as int;$impl($and($lte(1 as int,\var k as int) as bool,$lt(\var k as int,len(h as map(int,int)) as int) as bool) as bool,$gte(read(h as map(int,int),\var k as int) as int,read(h as map(int,int),$div($minus(\var k as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1,1,1,1,1,1,0" id="388">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var k as int) as bool,$lt(\var k as int,len(h1 as map(int,int)) as int) as bool) as bool,$gte(read(h1 as map(int,int),\var k as int) as int,read(h1 as map(int,int),$div($minus(\var k as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var k as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var k as int)">k1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1,1,1,1,1,1,0" id="389">
      <find>S.0</find>
      <schemavariable name="%b">$gte(read(h1 as map(int,int),k1 as int) as int,read(h1 as map(int,int),$div($minus(k1 as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,k1 as int) as bool,$lt(k1 as int,len(h1 as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1,1,1,1,1,1,0" id="390">
      <find>A.8</find>
      <schemavariable name="%b">$lt(k1 as int,len(h1 as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,k1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1,1,1,1,1,1,0" id="391">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,0,1,1,1,1,1,1,1" id="392">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">[54;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,1,1,1,1,0" id="393">
      <find>S.0</find>
      <schemavariable name="%t">isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,1,0,1,1,1,1,1,1,1,0" id="394">
      <find>S.0</find>
      <assume>A.5</assume>
      <schemavariable name="%b">isPerm(h1 as map(int,int),removeNo(h as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,0,1,1,1,1,1,1,1,1" id="395">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[55;PrioQueueTake'] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1,1,1,1,1,1,1,1" id="396">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || perm := insert(idPerm($minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int),0 as int,$minus($minus(len(h as map(int,int)) as int,1 as int) as int,1 as int) as int) as map(int,int) || min := min1 as int || h := h1 as map(int,int) || i := i1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,0,1,1,1,1,1,1,1,1" id="397">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assume_upd" path="1,1,1,1" id="398">
      <find>S.0</find>
      <schemavariable name="%b">$not($gt(len(h as map(int,int)) as int,0 as int) as bool) as bool</schemavariable>
      <schemavariable name="%a">[45;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="399">
      <find>A.2</find>
      <schemavariable name="%t">$not($gt(len(h as map(int,int)) as int,0 as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,1,1" id="400">
      <find>A.2</find>
      <schemavariable name="%b">$gt(len(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,1" id="401">
      <find>S.1.0</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,1" id="402">
      <find>S.0</find>
      <schemavariable name="%b">$eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[46;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,0" id="403">
      <find>S.0</find>
      <schemavariable name="%t">$eq(len(h as map(int,int)) as int,$minus(len(h0 as map(int,int)) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,1,0" id="404">
      <find>S.0.0</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,0" id="405">
      <find>S.0</find>
      <schemavariable name="%t">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,0" id="406">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,1,1" id="407">
      <find>S.0</find>
      <schemavariable name="%b">$eq(result as int,read(h0 as map(int,int),0 as int) as int) as bool</schemavariable>
      <schemavariable name="%a">[47;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,0" id="408">
      <find>S.0</find>
      <schemavariable name="%t">$eq(result as int,read(h0 as map(int,int),0 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1,1,1,0" id="409">
      <find>S.0</find>
      <schemavariable name="%t">read(h as map(int,int),0 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,0" id="410">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,1,1,1" id="411">
      <find>S.0</find>
      <schemavariable name="%b">(\forall k as int;$impl($and($lte(1 as int,\var k as int) as bool,$lt(\var k as int,len(h as map(int,int)) as int) as bool) as bool,$gte(read(h as map(int,int),\var k as int) as int,read(h as map(int,int),$div($minus(\var k as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[48;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,0" id="412">
      <find>S.0</find>
      <schemavariable name="%t">(\forall k as int;$impl($and($lte(1 as int,\var k as int) as bool,$lt(\var k as int,len(h as map(int,int)) as int) as bool) as bool,$gte(read(h as map(int,int),\var k as int) as int,read(h as map(int,int),$div($minus(\var k as int,1 as int) as int,2 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,1,1,0" id="413">
      <find>S.0</find>
      <schemavariable name="%b">$impl($and($lte(1 as int,\var k as int) as bool,$lt(\var k as int,len(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)) as int) as bool) as bool,$gte(read(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),\var k as int) as int,read(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),$div($minus(\var k as int,1 as int) as int,2 as int) as int) as int) as bool) as bool</schemavariable>
      <schemavariable name="%x">\var k as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var k as int)">k</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,1,1,0" id="414">
      <find>S.0</find>
      <schemavariable name="%b">$gte(read(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),k as int) as int,read(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int),$div($minus(k as int,1 as int) as int,2 as int) as int) as int) as bool</schemavariable>
      <schemavariable name="%a">$and($lte(1 as int,k as int) as bool,$lt(k as int,len(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,1,1,1,0" id="415">
      <find>A.2</find>
      <schemavariable name="%b">$lt(k as int,len(removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int)) as int) as bool</schemavariable>
      <schemavariable name="%a">$lte(1 as int,k as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="len_removeNo" path="1,1,1,1,1,1,0" id="416">
      <find>A.3.1</find>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_removeNo" path="1,1,1,1,1,1,0" id="417">
      <find>S.0.0</find>
      <schemavariable name="%i">k as int</schemavariable>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="read_removeNo" path="1,1,1,1,1,1,0" id="418">
      <find>S.0.1</find>
      <schemavariable name="%i">$div($minus(k as int,1 as int) as int,2 as int) as int</schemavariable>
      <schemavariable name="%n">$minus(len(h as map(int,int)) as int,1 as int) as int</schemavariable>
      <schemavariable name="%m">h as map(int,int)</schemavariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="m">map(int,int)</typevariable>
      <typevariable name="2">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0" id="419">
    </ruleApplication>
    <ruleApplication rule="auto_assert_upd" path="1,1,1,1,1,1,1" id="420">
      <find>S.0</find>
      <schemavariable name="%b">isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <schemavariable name="%a">[49;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,1,0" id="421">
      <find>S.0</find>
      <schemavariable name="%t">isPerm(h as map(int,int),removeNo(h0 as map(int,int),0 as int) as map(int,int)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="cut" path="1,1,1,1,1,1,1,0" id="422">
      <schemavariable name="%inst">$eq(len(h as map(int,int)) as int,1 as int) as bool</schemavariable>
      <property name="interact(%inst)">bool</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,1,1,1,1,1,1,0,0" id="423">
      <find>S.0.0.1.0</find>
      <assume>A.2</assume>
      <schemavariable name="%u">1 as int</schemavariable>
      <schemavariable name="%t">len(h as map(int,int)) as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1,1,1,1,1,1,0,0" id="424">
      <find>S.0.0.1</find>
      <schemavariable name="%t">$minus(1 as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="isPerm_refl" path="1,1,1,1,1,1,1,0,0" id="425">
      <find>S.0</find>
      <schemavariable name="%a">removeNo(h as map(int,int),0 as int) as map(int,int)</schemavariable>
      <typevariable name="a">map(int,int)</typevariable>
      <typevariable name="1">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,0,0" id="426">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,1,0,1" id="427">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1,1,1,1,1" id="428">
      <find>S.0.0</find>
      <schemavariable name="%b">true as bool</schemavariable>
      <schemavariable name="%a">[50;PrioQueueTake] as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,1,1" id="429">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ h0 := h as map(int,int) || result := read(h as map(int,int),0 as int) as int || last := read(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as int || h := removeNo(h as map(int,int),$minus(len(h as map(int,int)) as int,1 as int) as int) as map(int,int) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,1" id="430">
      <find>S.0</find>
    </ruleApplication>
  </steps>
</proof>
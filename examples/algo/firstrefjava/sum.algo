
uses "sum.decl.p"

uses "Sum.sum(int[]).p"

abbreviation
  @injective :=
   (\forall a; 0 <= a < arrlen(_array) -> 
     (\forall b; 0 <= b < arrlen(_array) ->
         h[_array, idxInt(a)] = 
         h[_array, idxInt(b)] -> a=b ))

algo Sum

input 
  setA : set(int)

output
  sumA : int

var
  sA : set(int)
  xA : int

do
  sumA := 0;
  sA := setA;
  while !sA = {} 
    inv true
    var sA
  do
    mark 1;
    choose xA such that xA :: sA;
    sumA := sumA + xA;
    sA := sA \ {xA};
    mark 2
  end
end

refine Sum as Java
  requires setA = seqAsSet(arrayAsIntSeq(h, _array)) &
           !_array = null & @injective
    var 42 // setA
  ensures sumA = resInt

  mark 1
    inv sA = seqAsSet(seqSub(arrayAsIntSeq(h, _array), 
                        _i, arrlen(_array)))
        & _i >= 0 & _i < arrlen(_array)
        & sumA = _result
    var 42 // setA

  mark 2
    inv sA = seqAsSet(seqSub(arrayAsIntSeq(h, _array), 
                        _i, arrlen(_array)))
        & _i >= 0
        & sumA = _result
    var 42 // setA

<?xml version="1.0"?>
<proof format="1"><info>
    <date>Tue Dec 06 20:41:34 CET 2011</date>
    <version>0.0</version>
    <problem> |- [[0;bfs]]$and($and($gte(d,$neg(1)),$impl($lt(d,0),(\forall m;$not(connect(src,dest,\var m))))),$impl($gte(d,0),connect(src,dest,d)))</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="auto_tbox_assume" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[0;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">finite(fullset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{  }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="1">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[1;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="2">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[2;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ V := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="3">
      <find>S.0</find>
      <schemavariable name="%t">{ V := singleton(src as vertex) as set(vertex) }([[3;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="4">
      <find>S.0.2</find>
      <schemavariable name="%t">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="5">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[3;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ C := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="6">
      <find>S.0</find>
      <schemavariable name="%t">{ C := singleton(src as vertex) as set(vertex) }([[4;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="7">
      <find>S.0.3</find>
      <schemavariable name="%t">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="8">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[4;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="9">
      <find>S.0</find>
      <schemavariable name="%t">{ N := emptyset as set(vertex) }([[5;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="10">
      <find>S.0.4</find>
      <schemavariable name="%t">emptyset as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="11">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[5;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="12">
      <find>S.0</find>
      <schemavariable name="%t">{ d := 0 as int }([[6;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="13">
      <find>S.0.5</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="" id="14">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[6;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ done := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="15">
      <find>S.0</find>
      <schemavariable name="%t">{ done := emptyset as set(vertex) }([[7;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="" id="16">
      <find>S.0.6</find>
      <schemavariable name="%t">emptyset as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="autot_loop_invariant_update" path="" id="17">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%inv">$and($and($and($gte(d as int,0 as int) as bool,(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool</schemavariable>
      <schemavariable name="%var">card($complement(done as set(vertex)) as set(vertex)) as int</schemavariable>
      <schemavariable name="%a">[[7;bfs]]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="var">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="0" id="18">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($gte(d as int,0 as int) as bool,(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="0" id="19">
      <find>S.0.0.1.0.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="0" id="20">
      <find>S.0.0.1.0</find>
      <schemavariable name="%b">connect(src as vertex,\var y as vertex,$plus(0 as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_in_anyset" path="0" id="21">
      <find>S.0.1</find>
      <schemavariable name="%s">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="0" id="22">
      <find>S.0</find>
      <schemavariable name="%a">$and($and($gte(0 as int,0 as int) as bool,(\forall x as vertex;$impl($mem(\var x as vertex,singleton(src as vertex) as set(vertex)) as bool,connect(src as vertex,\var x as vertex,0 as int) as bool) as bool) as bool) as bool,(\forall y as vertex;true as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="0" id="23">
      <find>S.0.0.0</find>
      <schemavariable name="%t">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="0" id="24">
      <find>S.0.0</find>
      <schemavariable name="%a">(\forall x as vertex;$impl($mem(\var x as vertex,singleton(src as vertex) as set(vertex)) as bool,connect(src as vertex,\var x as vertex,0 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="0" id="25">
      <find>S.0.0.0.0</find>
      <schemavariable name="%y">src as vertex</schemavariable>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="0" id="26">
      <find>S.0</find>
      <schemavariable name="%a">(\forall x as vertex;$impl($eq(\var x as vertex,src as vertex) as bool,connect(src as vertex,\var x as vertex,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;true as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,0" id="27">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$impl($eq(\var x as vertex,src as vertex) as bool,connect(src as vertex,\var x as vertex,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="0,0" id="28">
      <find>S.0</find>
      <schemavariable name="%a">$eq(x as vertex,src as vertex) as bool</schemavariable>
      <schemavariable name="%b">connect(src as vertex,x as vertex,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="0,0" id="29">
      <find>A.1</find>
      <schemavariable name="%u">src as vertex</schemavariable>
      <schemavariable name="%t">x as vertex</schemavariable>
      <typevariable name="u">vertex</typevariable>
      <typevariable name="t">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="connect_def" path="0,0" id="30">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">src as vertex</schemavariable>
      <schemavariable name="%b">x as vertex</schemavariable>
      <schemavariable name="%n">0 as int</schemavariable>
      <typevariable name="b">vertex</typevariable>
      <typevariable name="a">vertex</typevariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0,0" id="31">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="0,1" id="32">
      <find>S.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var y as vertex)">y</property>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="0,1" id="33">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="34">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">w as vertex</schemavariable>
      <schemavariable name="%a">[[13;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) }</schemaupdate>
      <property name="skolemName(w as vertex)">w1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="35">
      <find>S.0</find>
      <schemavariable name="%t">{ w := w1 as vertex }([[14;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="36">
      <find>S.0.7</find>
      <schemavariable name="%t">w1 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="37">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">tovisit as set(vertex)</schemavariable>
      <schemavariable name="%a">[[14;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex }</schemaupdate>
      <property name="skolemName(tovisit as set(vertex))">tovisit1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="38">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := tovisit1 as set(vertex) }([[15;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="39">
      <find>S.0.8</find>
      <schemavariable name="%t">tovisit1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="40">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">Vo as set(vertex)</schemavariable>
      <schemavariable name="%a">[[15;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) }</schemaupdate>
      <property name="skolemName(Vo as set(vertex))">Vo1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="41">
      <find>S.0</find>
      <schemavariable name="%t">{ Vo := Vo1 as set(vertex) }([[16;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="42">
      <find>S.0.9</find>
      <schemavariable name="%t">Vo1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="43">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">v as vertex</schemavariable>
      <schemavariable name="%a">[[16;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) }</schemaupdate>
      <property name="skolemName(v as vertex)">v1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="44">
      <find>S.0</find>
      <schemavariable name="%t">{ v := v1 as vertex }([[17;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="45">
      <find>S.0.10</find>
      <schemavariable name="%t">v1 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="46">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[[17;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex }</schemaupdate>
      <property name="skolemName(d as int)">d1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="47">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d1 as int }([[18;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="48">
      <find>S.0.10</find>
      <schemavariable name="%t">d1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="49">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">V as set(vertex)</schemavariable>
      <schemavariable name="%a">[[18;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int }</schemaupdate>
      <property name="skolemName(V as set(vertex))">V1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="50">
      <find>S.0</find>
      <schemavariable name="%t">{ V := V1 as set(vertex) }([[19;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="51">
      <find>S.0.10</find>
      <schemavariable name="%t">V1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="52">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">done as set(vertex)</schemavariable>
      <schemavariable name="%a">[[19;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) }</schemaupdate>
      <property name="skolemName(done as set(vertex))">done1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="53">
      <find>S.0</find>
      <schemavariable name="%t">{ done := done1 as set(vertex) }([[20;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="54">
      <find>S.0.10</find>
      <schemavariable name="%t">done1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || done := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="55">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">C as set(vertex)</schemavariable>
      <schemavariable name="%a">[[20;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) }</schemaupdate>
      <property name="skolemName(C as set(vertex))">C1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="56">
      <find>S.0</find>
      <schemavariable name="%t">{ C := C1 as set(vertex) }([[21;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="57">
      <find>S.0.10</find>
      <schemavariable name="%t">C1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="58">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">N as set(vertex)</schemavariable>
      <schemavariable name="%a">[[21;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) }</schemaupdate>
      <property name="skolemName(N as set(vertex))">N1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="59">
      <find>S.0</find>
      <schemavariable name="%t">{ N := N1 as set(vertex) }([[22;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="60">
      <find>S.0.10</find>
      <schemavariable name="%t">N1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1" id="61">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">No as set(vertex)</schemavariable>
      <schemavariable name="%a">[[22;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) }</schemaupdate>
      <property name="skolemName(No as set(vertex))">No1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="62">
      <find>S.0</find>
      <schemavariable name="%t">{ No := No1 as set(vertex) }([[23;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="63">
      <find>S.0.11</find>
      <schemavariable name="%t">No1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1" id="64">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[23;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(varAtPre as int,card($complement(done as set(vertex)) as set(vertex)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="65">
      <find>A.1</find>
      <schemavariable name="%t">$eq(varAtPre as int,card($complement(done as set(vertex)) as set(vertex)) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1" id="66">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[24;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($gte(d as int,0 as int) as bool,(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="67">
      <find>A.2</find>
      <schemavariable name="%t">$and($and($and($gte(d as int,0 as int) as bool,(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="68">
      <find>A.2</find>
      <schemavariable name="%a">$and($and($gte(d1 as int,0 as int) as bool,(\forall x as vertex;$impl($mem(\var x as vertex,C1 as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d1 as int) as bool) as bool) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N1 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N1 as set(vertex),V1 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="69">
      <find>A.2</find>
      <schemavariable name="%a">$and($gte(d1 as int,0 as int) as bool,(\forall x as vertex;$impl($mem(\var x as vertex,C1 as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d1 as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N1 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="70">
      <find>A.2</find>
      <schemavariable name="%a">$gte(d1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as vertex;$impl($mem(\var x as vertex,C1 as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d1 as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1" id="71">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%k">63 as int</schemavariable>
      <schemavariable name="%a">[[25;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">26 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0" id="72">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[26;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="73">
      <find>A.6</find>
      <schemavariable name="%t">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0" id="74">
      <find>A.6</find>
      <schemavariable name="%b">$eq(C1 as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0" id="75">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[27;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists v as vertex;$mem(\var v as vertex,C as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,0" id="76">
      <find>S.0</find>
      <schemavariable name="%t">(\exists v as vertex;$mem(\var v as vertex,C as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0" id="77">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1" id="78">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">v as vertex</schemavariable>
      <schemavariable name="%a">[[28;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
      <property name="skolemName(v as vertex)">v2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="79">
      <find>S.0</find>
      <schemavariable name="%t">{ v := v2 as vertex }([[29;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="80">
      <find>S.0.11</find>
      <schemavariable name="%t">v2 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1" id="81">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[29;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(v as vertex,C as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="82">
      <find>A.6</find>
      <schemavariable name="%t">$mem(v as vertex,C as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1" id="83">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[30;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ C := $diff(C as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="84">
      <find>S.0</find>
      <schemavariable name="%t">{ C := $diff(C as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex) }([[31;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="85">
      <find>S.0.11</find>
      <schemavariable name="%t">$diff(C as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1" id="86">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[31;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ done := $union(done as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="87">
      <find>S.0</find>
      <schemavariable name="%t">{ done := $union(done as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex) }([[32;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1" id="88">
      <find>S.0.11</find>
      <schemavariable name="%t">$union(done as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,0,1" id="89">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%k">36 as int</schemavariable>
      <schemavariable name="%a">[[32;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">33 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,0" id="90">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[33;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(v as vertex,dest as vertex) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,0" id="91">
      <find>A.7</find>
      <schemavariable name="%t">$eq(v as vertex,dest as vertex) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,0" id="92">
      <find>A.7</find>
      <schemavariable name="%u">dest as vertex</schemavariable>
      <schemavariable name="%t">v2 as vertex</schemavariable>
      <typevariable name="u">vertex</typevariable>
      <typevariable name="t">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,0,1,0" id="93">
      <find>S.0.0</find>
      <schemavariable name="%a">[[34;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,0" id="94">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,0" id="95">
      <find>S.0</find>
      <schemavariable name="%a">$and($gte(d1 as int,$neg(1 as int) as int) as bool,$impl($lt(d1 as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($gte(d1 as int,0 as int) as bool,connect(src as vertex,dest as vertex,d1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,0,0" id="96">
      <find>S.0</find>
      <schemavariable name="%a">$gte(d1 as int,$neg(1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$impl($lt(d1 as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0,0,0" id="97">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,0,0,1" id="98">
      <find>S.0</find>
      <schemavariable name="%a">$lt(d1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,0,0,1" id="99">
      <find>S.0</find>
      <schemavariable name="%x">\var m as int</schemavariable>
      <schemavariable name="%b">$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var m as int)">m1</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,0,0,1" id="100">
      <find>S.0</find>
      <schemavariable name="%b">connect(src as vertex,dest as vertex,m1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0,0,1" id="101">
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,0,1" id="102">
      <find>S.0</find>
      <schemavariable name="%a">$gte(d1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">connect(src as vertex,dest as vertex,d1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0,1" id="103">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1" id="104">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[36;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(v as vertex,dest as vertex) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="105">
      <find>A.7</find>
      <schemavariable name="%t">$not($eq(v as vertex,dest as vertex) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1" id="106">
      <find>A.7</find>
      <schemavariable name="%b">$eq(v2 as vertex,dest as vertex) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="107">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[37;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ tovisit := succ(v as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="108">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := succ(v as vertex) as set(vertex) }([[38;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="109">
      <find>S.0.11</find>
      <schemavariable name="%t">succ(v as vertex) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="110">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[38;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ Vo := V as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="111">
      <find>S.0</find>
      <schemavariable name="%t">{ Vo := V as set(vertex) }([[39;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="112">
      <find>S.0.11</find>
      <schemavariable name="%t">V as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1" id="113">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[39;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ No := N as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="114">
      <find>S.0</find>
      <schemavariable name="%t">{ No := N as set(vertex) }([[40;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) || Vo := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1" id="115">
      <find>S.0.11</find>
      <schemavariable name="%t">N as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) || Vo := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="autot_loop_invariant_update" path="1,0,1,1" id="116">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%inv">$and($and($and($and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$subset(Vo as set(vertex),V as set(vertex)) as bool) as bool,$subset(No as set(vertex),N as set(vertex)) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%var">card(tovisit as set(vertex)) as int</schemavariable>
      <schemavariable name="%a">[[40;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="var">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,0" id="117">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($and($and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$subset(Vo as set(vertex),V as set(vertex)) as bool) as bool,$subset(No as set(vertex),N as set(vertex)) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="118">
      <find>S.0.0.0.0.0</find>
      <schemavariable name="%a">succ(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="119">
      <find>S.0.0.0.0</find>
      <schemavariable name="%a">$subset(V1 as set(vertex),V1 as set(vertex)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="120">
      <find>S.0.0.0.0</find>
      <schemavariable name="%a">V1 as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="121">
      <find>S.0.0.0</find>
      <schemavariable name="%a">$subset(N1 as set(vertex),N1 as set(vertex)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,0,1,1,0" id="122">
      <find>S.0.0.0</find>
      <schemavariable name="%a">N1 as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0,1,1,0" id="123">
      <find>S.0.0</find>
      <schemavariable name="%a">$subset(N1 as set(vertex),V1 as set(vertex)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,0" id="124">
      <find>S.0</find>
      <schemavariable name="%a">$subset(N1 as set(vertex),V1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N1 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,0" id="125">
      <find>S.0</find>
      <assume>A.3</assume>
      <schemavariable name="%b">$subset(N1 as set(vertex),V1 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,0,1" id="126">
      <find>S.0</find>
      <assume>A.4</assume>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N1 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="127">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">tovisit as set(vertex)</schemavariable>
      <schemavariable name="%a">[[47;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) }</schemaupdate>
      <property name="skolemName(tovisit as set(vertex))">tovisit2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="128">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := tovisit2 as set(vertex) }([[48;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="129">
      <find>S.0.11</find>
      <schemavariable name="%t">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="130">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">w as vertex</schemavariable>
      <schemavariable name="%a">[[48;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) }</schemaupdate>
      <property name="skolemName(w as vertex)">w2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="131">
      <find>S.0</find>
      <schemavariable name="%t">{ w := w2 as vertex }([[49;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="132">
      <find>S.0.11</find>
      <schemavariable name="%t">w2 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="133">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">V as set(vertex)</schemavariable>
      <schemavariable name="%a">[[49;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex }</schemaupdate>
      <property name="skolemName(V as set(vertex))">V2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="134">
      <find>S.0</find>
      <schemavariable name="%t">{ V := V2 as set(vertex) }([[50;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="135">
      <find>S.0.11</find>
      <schemavariable name="%t">V2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1" id="136">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">N as set(vertex)</schemavariable>
      <schemavariable name="%a">[[50;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) }</schemaupdate>
      <property name="skolemName(N as set(vertex))">N2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="137">
      <find>S.0</find>
      <schemavariable name="%t">{ N := N2 as set(vertex) }([[51;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="138">
      <find>S.0.11</find>
      <schemavariable name="%t">N2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1" id="139">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[51;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(varAtPre1 as int,card(tovisit as set(vertex)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="140">
      <find>A.7</find>
      <schemavariable name="%t">$eq(varAtPre1 as int,card(tovisit as set(vertex)) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1" id="141">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[52;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($and($and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$subset(Vo as set(vertex),V as set(vertex)) as bool) as bool,$subset(No as set(vertex),N as set(vertex)) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1" id="142">
      <find>A.8</find>
      <schemavariable name="%t">$and($and($and($and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$subset(Vo as set(vertex),V as set(vertex)) as bool) as bool,$subset(No as set(vertex),N as set(vertex)) as bool) as bool,$subset(N as set(vertex),V as set(vertex)) as bool) as bool,(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="143">
      <find>A.8</find>
      <schemavariable name="%a">$and($and($and($subset(tovisit2 as set(vertex),succ(v2 as vertex) as set(vertex)) as bool,$subset(V1 as set(vertex),V2 as set(vertex)) as bool) as bool,$subset(N1 as set(vertex),N2 as set(vertex)) as bool) as bool,$subset(N2 as set(vertex),V2 as set(vertex)) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N2 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="144">
      <find>A.8</find>
      <schemavariable name="%a">$and($and($subset(tovisit2 as set(vertex),succ(v2 as vertex) as set(vertex)) as bool,$subset(V1 as set(vertex),V2 as set(vertex)) as bool) as bool,$subset(N1 as set(vertex),N2 as set(vertex)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N2 as set(vertex),V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="145">
      <find>A.8</find>
      <schemavariable name="%a">$and($subset(tovisit2 as set(vertex),succ(v2 as vertex) as set(vertex)) as bool,$subset(V1 as set(vertex),V2 as set(vertex)) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N1 as set(vertex),N2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1" id="146">
      <find>A.8</find>
      <schemavariable name="%a">$subset(tovisit2 as set(vertex),succ(v2 as vertex) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$subset(V1 as set(vertex),V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,0,1,1,1" id="147">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%k">66 as int</schemavariable>
      <schemavariable name="%a">[[53;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">54 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0" id="148">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[54;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(tovisit as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0" id="149">
      <find>A.13</find>
      <schemavariable name="%t">$not($eq(tovisit as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0" id="150">
      <find>A.13</find>
      <schemavariable name="%b">$eq(tovisit2 as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0" id="151">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[55;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists w as vertex;$mem(\var w as vertex,tovisit as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,0" id="152">
      <find>S.0</find>
      <schemavariable name="%t">(\exists w as vertex;$mem(\var w as vertex,tovisit as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,0" id="153">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,0,1,1,1,0,1" id="154">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%v">w as vertex</schemavariable>
      <schemavariable name="%a">[[56;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
      <property name="skolemName(w as vertex)">w3</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="155">
      <find>S.0</find>
      <schemavariable name="%t">{ w := w3 as vertex }([[57;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="156">
      <find>S.0.11</find>
      <schemavariable name="%t">w3 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1" id="157">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[57;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(w as vertex,tovisit as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="158">
      <find>A.13</find>
      <schemavariable name="%t">$mem(w as vertex,tovisit as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1" id="159">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[58;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ tovisit := $diff(tovisit as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="160">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := $diff(tovisit as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }([[59;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1" id="161">
      <find>S.0.11</find>
      <schemavariable name="%t">$diff(tovisit as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,0,1,1,1,0,1" id="162">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%k">64 as int</schemavariable>
      <schemavariable name="%a">[[59;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">60 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,0" id="163">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[60;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(w as vertex,V as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="164">
      <find>A.14</find>
      <schemavariable name="%t">$not($mem(w as vertex,V as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,0,1,0" id="165">
      <find>A.14</find>
      <schemavariable name="%b">$mem(w3 as vertex,V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,0" id="166">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[61;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ V := $union(V as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="167">
      <find>S.0</find>
      <schemavariable name="%t">{ V := $union(V as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }([[62;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="168">
      <find>S.0.11</find>
      <schemavariable name="%t">$union(V as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,0,1,0" id="169">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[62;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ N := $union(N as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="170">
      <find>S.0</find>
      <schemavariable name="%t">{ N := $union(N as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }([[63;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0" id="171">
      <find>S.0.11</find>
      <schemavariable name="%t">$union(N as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,0" id="172">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[63;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">65 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,0" id="173">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[65;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">40 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,0" id="174">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[40;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0,0" id="175">
      <find>S.0</find>
      <schemavariable name="%t">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,0,0" id="176">
      <find>S.0</find>
      <assume>A.8</assume>
      <schemavariable name="%a">tovisit2 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(w3 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%c">succ(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="c">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,0,0" id="177">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,0,1" id="178">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[41;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(Vo as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0,1,0" id="179">
      <find>S.0</find>
      <schemavariable name="%t">$subset(Vo as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_of_union" path="1,0,1,1,1,0,1,0,1,0" id="180">
      <find>S.0</find>
      <assume>A.12</assume>
      <schemavariable name="%a">V1 as set(vertex)</schemavariable>
      <schemavariable name="%b">V2 as set(vertex)</schemavariable>
      <schemavariable name="%c">singleton(w3 as vertex) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="c">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,0,1,0" id="181">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,0,1,1" id="182">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[42;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(No as set(vertex),N as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0,1,1,0" id="183">
      <find>S.0</find>
      <schemavariable name="%t">$subset(No as set(vertex),N as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_of_union" path="1,0,1,1,1,0,1,0,1,1,0" id="184">
      <find>S.0</find>
      <assume>A.11</assume>
      <schemavariable name="%a">N1 as set(vertex)</schemavariable>
      <schemavariable name="%b">N2 as set(vertex)</schemavariable>
      <schemavariable name="%c">singleton(w3 as vertex) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="c">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,0,1,1,0" id="185">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,0,1,1,1" id="186">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[43;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0,1,1,1,0" id="187">
      <find>S.0</find>
      <schemavariable name="%t">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_def" path="1,0,1,1,1,0,1,0,1,1,1,0" id="188">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">$union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">$union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,0,1,1,1,0" id="189">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,0,1,1,1,1" id="190">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[44;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0,1,1,1,1,0" id="191">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,0,1,0,1,1,1,1,0" id="192">
      <find>S.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <schemavariable name="%b">$impl($mem(\var y as vertex,$union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var y as vertex)">y2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,0,1,0,1,1,1,1,0" id="193">
      <find>S.0</find>
      <schemavariable name="%a">$mem(y2 as vertex,$union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">connect(src as vertex,y2 as vertex,$plus(d1 as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="connect_def" path="1,0,1,1,1,0,1,0,1,1,1,1,0" id="194">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">src as vertex</schemavariable>
      <schemavariable name="%b">y2 as vertex</schemavariable>
      <schemavariable name="%n">$plus(d1 as int,1 as int) as int</schemavariable>
      <typevariable name="b">vertex</typevariable>
      <typevariable name="a">vertex</typevariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cutOnThat" path="1,0,1,1,1,0,1,0,1,1,1,1,0" id="195">
      <find>S.0.0</find>
      <schemavariable name="%c">$eq($plus(d1 as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="c">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,0,1,1,1,1,0,0" id="196">
    </ruleApplication>
    <ruleApplication rule="cond_false" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1" id="197">
      <find>S.0</find>
      <schemavariable name="%a">$eq(src as vertex,y2 as vertex) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as vertex;$and(connect(src as vertex,\var x as vertex,$minus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,$mem(y2 as vertex,succ(\var x as vertex) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1" id="198">
      <find>A.14</find>
      <schemavariable name="%x">y2 as vertex</schemavariable>
      <schemavariable name="%a">N2 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(w3 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_left" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1" id="199">
      <find>A.14</find>
      <schemavariable name="%a">$mem(y2 as vertex,N2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$mem(y2 as vertex,singleton(w3 as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_left_hide" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,0" id="200">
      <find>A.9</find>
      <schemavariable name="%inst">y2 as vertex</schemavariable>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <schemavariable name="%b">$impl($mem(\var y as vertex,N2 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">vertex</typevariable>
      <property name="interact(%inst)">vertex</property>
    </ruleApplication>
    <ruleApplication rule="impl_left" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,0" id="201">
      <find>A.9</find>
      <schemavariable name="%a">$mem(y2 as vertex,N2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">connect(src as vertex,y2 as vertex,$plus(d1 as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,0" id="202">
      <find>S.6</find>
      <assume>A.13</assume>
      <schemavariable name="%b">$mem(y2 as vertex,N2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="connect_def" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1" id="203">
      <find>A.9</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">src as vertex</schemavariable>
      <schemavariable name="%b">y2 as vertex</schemavariable>
      <schemavariable name="%n">$plus(d1 as int,1 as int) as int</schemavariable>
      <typevariable name="b">vertex</typevariable>
      <typevariable name="a">vertex</typevariable>
      <typevariable name="n">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1" id="204">
      <find>A.9</find>
      <schemavariable name="%a">$eq(src as vertex,y2 as vertex) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as vertex;$and(connect(src as vertex,\var x as vertex,$minus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,$mem(y2 as vertex,succ(\var x as vertex) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%c">$eq($plus(d1 as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1,0" id="205">
      <find>S.5</find>
      <assume>A.15</assume>
      <schemavariable name="%b">$eq($plus(d1 as int,1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1" id="206">
      <find>S.0</find>
      <assume>A.9</assume>
      <schemavariable name="%b">(\exists x as vertex;$and(connect(src as vertex,\var x as vertex,$minus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,$mem(y2 as vertex,succ(\var x as vertex) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,1" id="207">
      <find>A.14</find>
      <schemavariable name="%y">w3 as vertex</schemavariable>
      <schemavariable name="%x">y2 as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,0,1,1,1,1,0,1,1" id="208">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,0,1,1,1,1,1" id="209">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[45;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(card(tovisit as set(vertex)) as int,0 as int) as bool,$lt(card(tovisit as set(vertex)) as int,varAtPre1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0" id="210">
      <find>S.0</find>
      <schemavariable name="%t">$and($gte(card(tovisit as set(vertex)) as int,0 as int) as bool,$lt(card(tovisit as set(vertex)) as int,varAtPre1 as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0" id="211">
      <find>S.0</find>
      <schemavariable name="%a">$gte(card($diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(card($diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)) as int,varAtPre1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0,0" id="212">
    </ruleApplication>
    <ruleApplication rule="cut_finiteness" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0,1" id="213">
      <find>S.0.0</find>
      <schemavariable name="%s">$diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_setminus" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0" id="214">
      <find>S.5</find>
      <schemavariable name="%t">singleton(w3 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0" id="215">
      <find>S.5</find>
      <assume>A.0</assume>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0" id="216">
      <find>S.5</find>
    </ruleApplication>
    <ruleApplication rule="card_setminus_singleton" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1" id="217">
      <find>S.0.0</find>
      <assume>A.14</assume>
      <schemavariable name="%x">w3 as vertex</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1" id="218">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,0,1,1,1,1,1,1" id="219">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[46;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,0,1,1,1,1,1,1" id="220">
      <find>A.14</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,0,1,1,1,0,1,0,1,1,1,1,1,1" id="221">
      <find>A.14</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,1" id="222">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[64;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($mem(w as vertex,V as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1" id="223">
      <find>A.14</find>
      <schemavariable name="%t">$not($not($mem(w as vertex,V as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,0,1,1,1,0,1,1" id="224">
      <find>A.14</find>
      <schemavariable name="%b">$mem(w3 as vertex,V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,0,1,1" id="225">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[65;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">40 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1" id="226">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[40;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,0" id="227">
      <find>S.0</find>
      <schemavariable name="%t">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,0,1,1,1,0,1,1,0" id="228">
      <find>S.0</find>
      <assume>A.8</assume>
      <schemavariable name="%a">tovisit2 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(w3 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%c">succ(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="c">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,0" id="229">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1" id="230">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[41;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(Vo as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,0" id="231">
      <find>S.0</find>
      <schemavariable name="%t">$subset(Vo as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,0" id="232">
      <find>S.0</find>
      <assume>A.12</assume>
      <schemavariable name="%b">$subset(V1 as set(vertex),V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1" id="233">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[42;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(No as set(vertex),N as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,0" id="234">
      <find>S.0</find>
      <schemavariable name="%t">$subset(No as set(vertex),N as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,0" id="235">
      <find>S.0</find>
      <assume>A.11</assume>
      <schemavariable name="%b">$subset(N1 as set(vertex),N2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1" id="236">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[43;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,0" id="237">
      <find>S.0</find>
      <schemavariable name="%t">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,1,0" id="238">
      <find>S.0</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$subset(N2 as set(vertex),V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1" id="239">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[44;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,0" id="240">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,0,1,1,1,1,1,1,0" id="241">
      <find>S.0</find>
      <assume>A.9</assume>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N2 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,0,1,1,1,1,1,1,1" id="242">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[45;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(card(tovisit as set(vertex)) as int,0 as int) as bool,$lt(card(tovisit as set(vertex)) as int,varAtPre1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0" id="243">
      <find>S.0</find>
      <schemavariable name="%t">$and($gte(card(tovisit as set(vertex)) as int,0 as int) as bool,$lt(card(tovisit as set(vertex)) as int,varAtPre1 as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0" id="244">
      <find>S.0</find>
      <schemavariable name="%a">$gte(card($diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(card($diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)) as int,varAtPre1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0,0" id="245">
    </ruleApplication>
    <ruleApplication rule="cut_finiteness" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0,1" id="246">
      <find>S.0.0</find>
      <schemavariable name="%s">$diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0" id="247">
      <find>S.4</find>
      <assume>A.0</assume>
      <schemavariable name="%s">$diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0" id="248">
      <find>S.4</find>
    </ruleApplication>
    <ruleApplication rule="card_setminus_singleton" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1" id="249">
      <find>S.0.0</find>
      <assume>A.15</assume>
      <schemavariable name="%x">w3 as vertex</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1" id="250">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1" id="251">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[46;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1" id="252">
      <find>A.15</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w3 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w3 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,0,1,1,1,0,1,1,1,1,1,1,1,1" id="253">
      <find>A.15</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,1" id="254">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[66;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(tovisit as set(vertex),emptyset as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1" id="255">
      <find>A.13</find>
      <schemavariable name="%t">$not($not($eq(tovisit as set(vertex),emptyset as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,0,1,1,1,1" id="256">
      <find>A.13</find>
      <schemavariable name="%b">$eq(tovisit2 as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,1,1,1" id="257">
      <find>A.13</find>
      <schemavariable name="%u">emptyset as set(vertex)</schemavariable>
      <schemavariable name="%t">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="u">set(vertex)</typevariable>
      <typevariable name="t">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals" path="1,0,1,1,1,1" id="258">
      <find>A.13</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,0,1,1,1,1" id="259">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%k">73 as int</schemavariable>
      <schemavariable name="%a">[[67;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">68 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,1,0" id="260">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[68;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(C as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="261">
      <find>A.14</find>
      <schemavariable name="%t">$eq(C as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,1,0" id="262">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[69;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ C := N as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="263">
      <find>S.0</find>
      <schemavariable name="%t">{ C := N as set(vertex) }([[70;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="264">
      <find>S.0.11</find>
      <schemavariable name="%t">N as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,1,0" id="265">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[70;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="266">
      <find>S.0</find>
      <schemavariable name="%t">{ N := emptyset as set(vertex) }([[71;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) || C := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="267">
      <find>S.0.11</find>
      <schemavariable name="%t">emptyset as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) || C := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,0,1,1,1,1,0" id="268">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[71;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := $plus(d as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="269">
      <find>S.0</find>
      <schemavariable name="%t">{ d := $plus(d as int,1 as int) as int }([[72;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0" id="270">
      <find>S.0.11</find>
      <schemavariable name="%t">$plus(d as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,1,0" id="271">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[72;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">74 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,1,0" id="272">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[74;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">7 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,0" id="273">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[7;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0,0" id="274">
      <find>S.0</find>
      <schemavariable name="%t">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,0,0" id="275">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,0,1" id="276">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[8;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0,1,0" id="277">
      <find>S.0</find>
      <schemavariable name="%t">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,0,1,0" id="278">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$impl($mem(\var x as vertex,N2 as set(vertex)) as bool,connect(src as vertex,\var x as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,1,0,1,0" id="279">
      <find>S.0</find>
      <schemavariable name="%a">$mem(x2 as vertex,N2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">connect(src as vertex,x2 as vertex,$plus(d1 as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,0,1,0" id="280">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,0,1,1" id="281">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[9;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0,1,1,0" id="282">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="1,0,1,1,1,1,0,1,1,0" id="283">
      <find>S.0.0.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,0,1,1,1,1,0,1,1,0" id="284">
      <find>S.0.0</find>
      <schemavariable name="%b">connect(src as vertex,\var y as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,0,1,1,0" id="285">
      <find>S.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var y as vertex)">y1</property>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,1,0,1,1,0" id="286">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,0,1,1,1" id="287">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[10;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0,1,1,1,0" id="288">
      <find>S.0</find>
      <schemavariable name="%t">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_in_anyset" path="1,0,1,1,1,1,0,1,1,1,0" id="289">
      <find>S.0</find>
      <schemavariable name="%s">V2 as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,1,0,1,1,1,0" id="290">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,0,1,1,1,1" id="291">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[11;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(card($complement(done as set(vertex)) as set(vertex)) as int,0 as int) as bool,$lt(card($complement(done as set(vertex)) as set(vertex)) as int,varAtPre as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0,1,1,1,1,0" id="292">
      <find>S.0</find>
      <schemavariable name="%t">$and($gte(card($complement(done as set(vertex)) as set(vertex)) as int,0 as int) as bool,$lt(card($complement(done as set(vertex)) as set(vertex)) as int,varAtPre as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="complement_disj" path="1,0,1,1,1,1,0,1,1,1,1,0" id="293">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%s">done1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="5">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="complement_disj" path="1,0,1,1,1,1,0,1,1,1,1,0" id="294">
      <find>S.0.1.0.0</find>
      <schemavariable name="%t">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%s">done1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="5">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,0,1,1,1,1,0" id="295">
      <find>S.0</find>
      <schemavariable name="%a">$gte(card($intersect($complement(done1 as set(vertex)) as set(vertex),$complement(singleton(v2 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(card($intersect($complement(done1 as set(vertex)) as set(vertex),$complement(singleton(v2 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as int,varAtPre as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,0,1,1,1,1,0,0" id="296">
    </ruleApplication>
    <ruleApplication rule="equality_apply" path="1,0,1,1,1,1,0,1,1,1,1,0,1" id="297">
      <find>S.0.1</find>
      <assume>A.1</assume>
      <schemavariable name="%u">card($complement(done1 as set(vertex)) as set(vertex)) as int</schemavariable>
      <schemavariable name="%t">varAtPre as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_finiteness" path="1,0,1,1,1,1,0,1,1,1,1,0,1" id="298">
      <find>S.0.1</find>
      <schemavariable name="%s">$complement(done1 as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,0,1,1,1,1,0,1,1,1,1,0,1,0" id="299">
      <find>S.3</find>
      <assume>A.0</assume>
      <schemavariable name="%s">$complement(done1 as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,0,1,1,1,1,0,1,1,1,1,0,1,0" id="300">
      <find>S.3</find>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,0,1,1,1,1,0,1,1,1,1,0,1,1" id="301">
      <find>A.15</find>
      <assume>A.0</assume>
      <schemavariable name="%s">$complement(done1 as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,0,1,1,1,1,0,1,1,1,1,0,1,1" id="302">
      <find>A.15</find>
    </ruleApplication>
    <skip></skip>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,1,0,1,1,1,1,1" id="303">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[12;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,0,1,1,1,1,1" id="304">
      <find>A.15</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,0,1,1,1,1,0,1,1,1,1,1" id="305">
      <find>A.15</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,1,1" id="306">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[73;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1" id="307">
      <find>A.14</find>
      <schemavariable name="%t">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,1,1" id="308">
      <find>A.14</find>
      <schemavariable name="%b">$eq($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,0,1,1,1,1,1" id="309">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[74;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">7 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1" id="310">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[7;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,0" id="311">
      <find>S.0</find>
      <schemavariable name="%t">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,1,0" id="312">
      <find>S.0</find>
      <assume>A.2</assume>
      <schemavariable name="%b">$gte(d1 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1" id="313">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[8;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,0" id="314">
      <find>S.0</find>
      <schemavariable name="%t">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1,1,1,1,0" id="315">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$impl($mem(\var x as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool,connect(src as vertex,\var x as vertex,d1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1,1,1,1,0" id="316">
      <find>S.0</find>
      <schemavariable name="%a">$mem(x1 as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">connect(src as vertex,x1 as vertex,d1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,0,1,1,1,1,1,1,0" id="317">
      <find>A.14</find>
      <schemavariable name="%x">x1 as vertex</schemavariable>
      <schemavariable name="%a">C1 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,1,1,1,1,1,0" id="318">
      <find>A.14</find>
      <schemavariable name="%a">$mem(x1 as vertex,C1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(x1 as vertex,singleton(v2 as vertex) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,0,1,1,1,1,1,1,0" id="319">
      <find>A.15</find>
      <schemavariable name="%b">$mem(x1 as vertex,singleton(v2 as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0,1,1,1,1,1,1,0" id="320">
      <find>S.4</find>
      <schemavariable name="%y">v2 as vertex</schemavariable>
      <schemavariable name="%x">x1 as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,0" id="321">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1" id="322">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[9;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,0" id="323">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as vertex;$impl($mem(\var y as vertex,N as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,1,1,1,0" id="324">
      <find>S.0</find>
      <assume>A.9</assume>
      <schemavariable name="%b">(\forall y as vertex;$impl($mem(\var y as vertex,N2 as set(vertex)) as bool,connect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1,1" id="325">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[10;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,0" id="326">
      <find>S.0</find>
      <schemavariable name="%t">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,1,1,1,1,1,1,1,1,0" id="327">
      <find>S.0</find>
      <assume>A.10</assume>
      <schemavariable name="%b">$subset(N2 as set(vertex),V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,0,1,1,1,1,1,1,1,1,1" id="328">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[11;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(card($complement(done as set(vertex)) as set(vertex)) as int,0 as int) as bool,$lt(card($complement(done as set(vertex)) as set(vertex)) as int,varAtPre as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,1,0" id="329">
      <find>S.0</find>
      <schemavariable name="%t">$and($gte(card($complement(done as set(vertex)) as set(vertex)) as int,0 as int) as bool,$lt(card($complement(done as set(vertex)) as set(vertex)) as int,varAtPre as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="complement_disj" path="1,0,1,1,1,1,1,1,1,1,1,0" id="330">
      <find>S.0.0.0.0</find>
      <schemavariable name="%t">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%s">done1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="5">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="complement_disj" path="1,0,1,1,1,1,1,1,1,1,1,0" id="331">
      <find>S.0.1.0.0</find>
      <schemavariable name="%t">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%s">done1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="5">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1,1,1,1,1,1,1,1,0" id="332">
      <find>S.0</find>
      <schemavariable name="%a">$gte(card($intersect($complement(done1 as set(vertex)) as set(vertex),$complement(singleton(v2 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(card($intersect($complement(done1 as set(vertex)) as set(vertex),$complement(singleton(v2 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as int,varAtPre as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1,1,1,1,1,1,1,0,0" id="333">
    </ruleApplication>
    <skip></skip>
    <ruleApplication rule="auto_tbox_assume" path="1,0,1,1,1,1,1,1,1,1,1,1" id="334">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[12;bfs'']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0,1,1,1,1,1,1,1,1,1,1" id="335">
      <find>A.14</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || done := $union(done1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w2 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,0,1,1,1,1,1,1,1,1,1,1" id="336">
      <find>A.14</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1" id="337">
      <find>S.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[63;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="338">
      <find>A.6</find>
      <schemavariable name="%t">$not($not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1" id="339">
      <find>A.6</find>
      <schemavariable name="%b">$eq(C1 as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1" id="340">
      <find>S.0.0</find>
      <schemavariable name="%phi">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%a">[[64;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="341">
      <find>S.0</find>
      <schemavariable name="%t">{ d := $neg(1 as int) as int }([[65;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="342">
      <find>S.0.11</find>
      <schemavariable name="%t">$neg(1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1" id="343">
      <find>S.0.0</find>
      <schemavariable name="%a">[[65;bfs']]($and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="344">
      <find>S.0</find>
      <schemavariable name="%t">$and($and($gte(d as int,$neg(1 as int) as int) as bool,$impl($lt(d as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool,$impl($gte(d as int,0 as int) as bool,connect(src as vertex,dest as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || done := done1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1" id="345">
      <find>S.0.0.0</find>
      <schemavariable name="%t">$gte($neg(1 as int) as int,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1" id="346">
      <find>S.0.0</find>
      <schemavariable name="%a">$impl($lt($neg(1 as int) as int,0 as int) as bool,(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1" id="347">
      <find>S.0.0.0</find>
      <schemavariable name="%t">$lt($neg(1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_l" path="1,1" id="348">
      <find>S.0.0</find>
      <schemavariable name="%b">(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1" id="349">
      <find>S.0.1.0</find>
      <schemavariable name="%t">$gte($neg(1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_false_l" path="1,1" id="350">
      <find>S.0.1</find>
      <schemavariable name="%b">connect(src as vertex,dest as vertex,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1" id="351">
      <find>S.0</find>
      <schemavariable name="%a">(\forall m as int;$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1" id="352">
      <find>S.0</find>
      <schemavariable name="%x">\var m as int</schemavariable>
      <schemavariable name="%b">$not(connect(src as vertex,dest as vertex,\var m as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var m as int)">m</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1" id="353">
      <find>S.0</find>
      <schemavariable name="%b">connect(src as vertex,dest as vertex,m as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <skip></skip>
  </steps>
</proof>
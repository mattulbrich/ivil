//
// This file contains the grammar for structural proofs.
//

ASTProofSourceFile ProofSourceFile():
{
  Token first, t;
}
{
  first="proof" "source" t=<STRING>
      { return new ASTProofSourceFile(first, Util.stripQuotes(t.image)); }
}

List<ASTProofScript> ProofScriptList():
{
  List<ASTProofScript> result = new ArrayList<ASTProofScript>();
  ASTProofScript script;
}
{
  ( script = ProofScript() { result.add(script); } )*
    { return result; }
}

ASTProofScript ProofScript():
{
  Token t = null;
  Token id = null;
  String name = null;
  Token first;
  ASTProofScriptNode tree;
}
{
  first = "proof"

  (
    ( t = "rule" id=<IDENTIFIER>    { name = ProofScript.RULE_IDENTIFIER_PREFIX + id.image; }
    | t = "problem" id=<IDENTIFIER> { name = ProofScript.LEMMA_IDENTIFIER_PREFIX + id.image; }
    | t = "program" id=<IDENTIFIER> { name = ProofScript.PROGRAM_IDENTIFIER_PREFIX + id.image; }
       ( "." id=<IDENTIFIER> { name += "." + id.image; } )*
    )
  )?

  "(" tree=ProofTree() ")"
     { return new ASTProofScript(first, name, tree); }
}

ASTProofScriptNode ProofTree():
{
  ASTProofScriptNode result;
  Token t, t2;
  ASTProofScriptNode child;
}
{
  t = <IDENTIFIER>
      {  result = new ASTProofScriptNode(t);  }

  ( t = <IDENTIFIER>
    ( ":" ( t2=<STRING> { result.put(t, t2, Util.stripQuotes(t2.image)); }
          | t2=<IDENTIFIER> { result.put(t, t2, t2.image); }
          )
    | /* epsilon */ { result.putUnnamed(t, t.image); }
    )
  | t=<STRING> { result.putUnnamed(t, Util.stripQuotes(t.image)); }
  )* 

  ( ";" child=ProofTree() { result.addChild(child); }
  | ( "(" child=ProofTree() { result.addChild(child); } ")" )*
  )

  { return result; }
}

/*
 * Other tokens beside <IDENTIFIER> can be used as identifiers for arguments.
 */
Token PropertyIdentifier():
{ 
  Token t;
}
{
  ( t = <IDENTIFIER>
  | t = <ADD>
  | t = <AS>
  | t = <ASSIGNABLE>
  | t = <AXIOM>
  | t = <BINDER>
  | t = <CLOSE>
  | t = <DESCRIPTION>
  | t = <FIND>
  | t = <FUNCTION>
  | t = <INCLUDE>
  | t = <INFIX>
  | t = <NEWGOAL>
  | t = <NOT>
  | t = <PLUGIN >
  | t = <PREFIX>
  | t = <PROBLEM>
  | t = <PROGRAM>
  | t = <PROOF>
  | t = <PROPERTIES>
  | t = <REMOVE>
  | t = <REPLACE>
  | t = <RULE>
  | t = <SAMEGOAL>
  | t = <SORT>
  | t = <TAGS>
  | t = <UNIQUE>
  | t = <WHERE>
  | t = <ASSUME>
  | t = <ASSERT>
  | t = <GOTO>
  | t = <HAVOC>
  | t = <END>
  | t = <_SKIP>
  | t = <SOURCE>
  | t = <SOURCELINE>
  )
  { return t; }
}
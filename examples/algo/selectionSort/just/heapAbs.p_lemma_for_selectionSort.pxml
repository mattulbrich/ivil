<?xml version="1.0"?>
<proof format="1"><info>
    <date>Thu Aug 23 21:22:09 CEST 2012</date>
    <version>0.0</version>
    <problem> |- $impl($and($and($and($and($eq(b,arrayAsIntSeq(h1,a)),$eq(i,_i)),$eq(t,_t)),seqDom(b,i)),seqDom(b,t)),$eq(seqSwap(b,i,t),arrayAsIntSeq($store_heap($store_heap(h1,a,idxInt(_i),$load_heap(h1,a,idxInt(_t))),a,idxInt(_t),$load_heap(h1,a,idxInt(_i))),a)))</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="impl_right" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%a">$and($and($and($and($eq(b as seq(int),arrayAsIntSeq(h1 as heap,a as ref) as seq(int)) as bool,$eq(i as int,_i as int) as bool) as bool,$eq(t as int,_t as int) as bool) as bool,seqDom(b as seq(int),i as int) as bool) as bool,seqDom(b as seq(int),t as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(seqSwap(b as seq(int),i as int,t as int) as seq(int),arrayAsIntSeq($store_heap($store_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int) as heap,a as ref,idxInt(_t as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int) as heap,a as ref) as seq(int)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="1">
      <find>A.0</find>
      <schemavariable name="%a">$and($and($and($eq(b as seq(int),arrayAsIntSeq(h1 as heap,a as ref) as seq(int)) as bool,$eq(i as int,_i as int) as bool) as bool,$eq(t as int,_t as int) as bool) as bool,seqDom(b as seq(int),i as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">seqDom(b as seq(int),t as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="2">
      <find>A.0</find>
      <schemavariable name="%a">$and($and($eq(b as seq(int),arrayAsIntSeq(h1 as heap,a as ref) as seq(int)) as bool,$eq(i as int,_i as int) as bool) as bool,$eq(t as int,_t as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">seqDom(b as seq(int),i as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="3">
      <find>A.0</find>
      <schemavariable name="%a">$and($eq(b as seq(int),arrayAsIntSeq(h1 as heap,a as ref) as seq(int)) as bool,$eq(i as int,_i as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(t as int,_t as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="" id="4">
      <find>A.0</find>
      <schemavariable name="%a">$eq(b as seq(int),arrayAsIntSeq(h1 as heap,a as ref) as seq(int)) as bool</schemavariable>
      <schemavariable name="%b">$eq(i as int,_i as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="" id="5">
      <find>A.0</find>
      <schemavariable name="%u">arrayAsIntSeq(h1 as heap,a as ref) as seq(int)</schemavariable>
      <schemavariable name="%t">b as seq(int)</schemavariable>
      <typevariable name="u">seq(int)</typevariable>
      <typevariable name="t">seq(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="" id="6">
      <find>A.3</find>
      <schemavariable name="%u">_t as int</schemavariable>
      <schemavariable name="%t">t as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="" id="7">
      <find>A.4</find>
      <schemavariable name="%u">_i as int</schemavariable>
      <schemavariable name="%t">i as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="seqExtensionality" path="" id="8">
      <find>S.0</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%s1">seqSwap(b as seq(int),i as int,t as int) as seq(int)</schemavariable>
      <schemavariable name="%s2">arrayAsIntSeq($store_heap($store_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int) as heap,a as ref,idxInt(_t as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int) as heap,a as ref) as seq(int)</schemavariable>
      <typevariable name="s2">seq(int)</typevariable>
      <typevariable name="s1">seq(int)</typevariable>
      <typevariable name="8">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="lenOfSwap" path="" id="9">
      <find>S.0.0.0</find>
      <schemavariable name="%j">t as int</schemavariable>
      <schemavariable name="%i">i as int</schemavariable>
      <schemavariable name="%a">b as seq(int)</schemavariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="j">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="lenOfInArrayAsIntSeq" path="" id="10">
      <find>S.0.0.1</find>
      <schemavariable name="%h">$store_heap($store_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int) as heap,a as ref,idxInt(_t as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int) as heap</schemavariable>
      <schemavariable name="%a">a as ref</schemavariable>
      <typevariable name="a">ref</typevariable>
      <typevariable name="h">heap</typevariable>
    </ruleApplication>
    <ruleApplication rule="lenOfSwap" path="" id="11">
      <find>S.0.1.0.0.1.1</find>
      <schemavariable name="%j">t as int</schemavariable>
      <schemavariable name="%i">i as int</schemavariable>
      <schemavariable name="%a">b as seq(int)</schemavariable>
      <typevariable name="2">int</typevariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="j">int</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfSwap" path="" id="12">
      <find>S.0.1.0.1.0</find>
      <schemavariable name="%k">\var i as int</schemavariable>
      <schemavariable name="%j">t as int</schemavariable>
      <schemavariable name="%i">i as int</schemavariable>
      <schemavariable name="%a">b as seq(int)</schemavariable>
      <typevariable name="a">seq(int)</typevariable>
      <typevariable name="j">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="i">int</typevariable>
      <typevariable name="12">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="getOfInArrayAsIntSeq" path="" id="13">
      <find>S.0.1.0.1.1</find>
      <schemavariable name="%i">\var i as int</schemavariable>
      <schemavariable name="%h">$store_heap($store_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int) as heap,a as ref,idxInt(_t as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int) as heap</schemavariable>
      <schemavariable name="%r">a as ref</schemavariable>
      <typevariable name="r">ref</typevariable>
      <typevariable name="h">heap</typevariable>
      <typevariable name="i">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="heap_load_store_cond" path="" id="14">
      <find>S.0.1.0.1.1.1</find>
      <schemavariable name="%d0">a as ref</schemavariable>
      <schemavariable name="%d1">idxInt(_t as int) as field(int)</schemavariable>
      <schemavariable name="%v">$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%t0">a as ref</schemavariable>
      <schemavariable name="%t1">idxInt(\var i as int) as field(int)</schemavariable>
      <schemavariable name="%m">$store_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int),$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int) as heap</schemavariable>
      <typevariable name="d0">ref</typevariable>
      <typevariable name="d1">field(int)</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="t1">field(int)</typevariable>
      <typevariable name="t0">ref</typevariable>
      <typevariable name="m">heap</typevariable>
      <typevariable name="11">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="retype_identity" path="" id="15">
      <find>S.0.1.0.1.1.1.1</find>
      <schemavariable name="%x">$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="" id="16">
      <find>S.0.1.0.1.1.1.0.0</find>
      <schemavariable name="%a">a as ref</schemavariable>
      <schemavariable name="%b">a as ref</schemavariable>
      <typevariable name="b">ref</typevariable>
      <typevariable name="a">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="" id="17">
      <find>S.0.1.0.1.1.1.0.0</find>
      <schemavariable name="%t">a as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="" id="18">
      <find>S.0.1.0.1.1.1.0</find>
      <schemavariable name="%a">$weq(idxInt(_t as int) as field(int),idxInt(\var i as int) as field(int)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="" id="19">
      <find>S.0.1.0.1.1.1.0</find>
      <schemavariable name="%a">idxInt(_t as int) as field(int)</schemavariable>
      <schemavariable name="%b">idxInt(\var i as int) as field(int)</schemavariable>
      <typevariable name="b">field(int)</typevariable>
      <typevariable name="a">field(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="" id="20">
      <find>S.0.1.0.1.1.1.0</find>
      <schemavariable name="%u">idxInt(\var i as int) as field(int)</schemavariable>
      <schemavariable name="%t">idxInt(_t as int) as field(int)</schemavariable>
      <typevariable name="u">field(int)</typevariable>
      <typevariable name="t">field(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="heap_load_store_cond" path="" id="21">
      <find>S.0.1.0.1.1.1.2</find>
      <schemavariable name="%d0">a as ref</schemavariable>
      <schemavariable name="%d1">idxInt(_i as int) as field(int)</schemavariable>
      <schemavariable name="%v">$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int</schemavariable>
      <schemavariable name="%t0">a as ref</schemavariable>
      <schemavariable name="%t1">idxInt(\var i as int) as field(int)</schemavariable>
      <schemavariable name="%m">h1 as heap</schemavariable>
      <typevariable name="d0">ref</typevariable>
      <typevariable name="d1">field(int)</typevariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="t1">field(int)</typevariable>
      <typevariable name="t0">ref</typevariable>
      <typevariable name="m">heap</typevariable>
      <typevariable name="11">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="retype_identity" path="" id="22">
      <find>S.0.1.0.1.1.1.2.1</find>
      <schemavariable name="%x">$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int</schemavariable>
      <typevariable name="a">int</typevariable>
      <typevariable name="x">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="" id="23">
      <find>S.0.1.0.1.1.1.2.0.0</find>
      <schemavariable name="%a">a as ref</schemavariable>
      <schemavariable name="%b">a as ref</schemavariable>
      <typevariable name="b">ref</typevariable>
      <typevariable name="a">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="" id="24">
      <find>S.0.1.0.1.1.1.2.0.0</find>
      <schemavariable name="%t">a as ref</schemavariable>
      <typevariable name="t">ref</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="" id="25">
      <find>S.0.1.0.1.1.1.2.0</find>
      <schemavariable name="%a">$weq(idxInt(_i as int) as field(int),idxInt(\var i as int) as field(int)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="weakeq_same_types" path="" id="26">
      <find>S.0.1.0.1.1.1.2.0</find>
      <schemavariable name="%a">idxInt(_i as int) as field(int)</schemavariable>
      <schemavariable name="%b">idxInt(\var i as int) as field(int)</schemavariable>
      <typevariable name="b">field(int)</typevariable>
      <typevariable name="a">field(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_unique" path="" id="27">
      <find>S.0.1.0.1.1.1.2.0</find>
      <schemavariable name="%u">idxInt(\var i as int) as field(int)</schemavariable>
      <schemavariable name="%t">idxInt(_i as int) as field(int)</schemavariable>
      <typevariable name="u">field(int)</typevariable>
      <typevariable name="t">field(int)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="" id="28">
      <find>S.0</find>
      <schemavariable name="%a">$eq(seqLen(b as seq(int)) as int,arrlen(a as ref) as int) as bool</schemavariable>
      <schemavariable name="%b">(\forall i as int;$impl($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(b as seq(int)) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(b as seq(int)) as int) as bool) as bool,cond($eq(i as int,\var i as int) as bool,seqGet(b as seq(int),t as int) as int,cond($eq(t as int,\var i as int) as bool,seqGet(b as seq(int),i as int) as int,seqGet(b as seq(int),\var i as int) as int) as int) as int,seqError as int) as int,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(a as ref) as int) as bool) as bool,cond($eq(_t as int,\var i as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int,cond($eq(_i as int,\var i as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(\var i as int) as field(int)) as int) as int) as int,seqError as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="0" id="29">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1" id="30">
      <find>S.0</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$impl($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(b as seq(int)) as int) as bool) as bool,$eq(cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,seqLen(b as seq(int)) as int) as bool) as bool,cond($eq(i as int,\var i as int) as bool,seqGet(b as seq(int),t as int) as int,cond($eq(t as int,\var i as int) as bool,seqGet(b as seq(int),i as int) as int,seqGet(b as seq(int),\var i as int) as int) as int) as int,seqError as int) as int,cond($and($lte(0 as int,\var i as int) as bool,$lt(\var i as int,arrlen(a as ref) as int) as bool) as bool,cond($eq(_t as int,\var i as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int,cond($eq(_i as int,\var i as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(\var i as int) as field(int)) as int) as int) as int,seqError as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1" id="31">
      <find>S.0</find>
      <schemavariable name="%a">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,seqLen(b as seq(int)) as int) as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(cond($and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,seqLen(b as seq(int)) as int) as bool) as bool,cond($eq(i as int,i1 as int) as bool,seqGet(b as seq(int),t as int) as int,cond($eq(t as int,i1 as int) as bool,seqGet(b as seq(int),i as int) as int,seqGet(b as seq(int),i1 as int) as int) as int) as int,seqError as int) as int,cond($and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,arrlen(a as ref) as int) as bool) as bool,cond($eq(_t as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int,cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int) as int,seqError as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1" id="32">
      <find>A.5</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1" id="33">
      <find>S.0.0</find>
      <schemavariable name="%a">cond($eq(i as int,i1 as int) as bool,seqGet(b as seq(int),t as int) as int,cond($eq(t as int,i1 as int) as bool,seqGet(b as seq(int),i as int) as int,seqGet(b as seq(int),i1 as int) as int) as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,seqLen(b as seq(int)) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0" id="34">
      <find>A.7</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0" id="35">
      <find>S.0.0</find>
      <schemavariable name="%a">seqGet(b as seq(int),t as int) as int</schemavariable>
      <schemavariable name="%b">cond($eq(t as int,i1 as int) as bool,seqGet(b as seq(int),i as int) as int,seqGet(b as seq(int),i1 as int) as int) as int</schemavariable>
      <schemavariable name="%c">$eq(i as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,0" id="36">
      <find>S.0.1</find>
      <schemavariable name="%a">cond($eq(_t as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int,cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,arrlen(a as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,0,0" id="37">
      <find>A.10</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,arrlen(a as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,0,0" id="38">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int</schemavariable>
      <schemavariable name="%c">$eq(_t as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0,0,0" id="39">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,0,0,1" id="40">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%c">$eq(_i as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0,0,1,0" id="41">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0,0,1,1" id="42">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,0,1" id="43">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,arrlen(a as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,0,0,1,0" id="44">
      <find>S.1</find>
      <assume>A.5</assume>
      <schemavariable name="%b">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0,1,1" id="45">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1" id="46">
      <find>S.0.0</find>
      <schemavariable name="%a">seqGet(b as seq(int),i as int) as int</schemavariable>
      <schemavariable name="%b">seqGet(b as seq(int),i1 as int) as int</schemavariable>
      <schemavariable name="%c">$eq(t as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,0" id="47">
      <find>A.9</find>
      <schemavariable name="%u">i1 as int</schemavariable>
      <schemavariable name="%t">t as int</schemavariable>
      <typevariable name="u">int</typevariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,0" id="48">
      <find>S.0.1</find>
      <schemavariable name="%a">cond($eq(_t as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int,cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,arrlen(a as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,0,0" id="49">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int</schemavariable>
      <schemavariable name="%c">$eq(_t as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0,0,0" id="50">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,0,0,1" id="51">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%c">$eq(_i as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0,0,1,0" id="52">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0,0,1,1" id="53">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0,1" id="54">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1" id="55">
      <find>S.0.1</find>
      <schemavariable name="%a">cond($eq(_t as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int,cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,arrlen(a as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,0" id="56">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int</schemavariable>
      <schemavariable name="%c">$eq(_t as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,0" id="57">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,0,1,1,0,1" id="58">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%c">$eq(_i as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,0" id="59">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0,1,1" id="60">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1" id="61">
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1" id="62">
      <find>S.0.1</find>
      <schemavariable name="%a">cond($eq(_t as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int,cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int) as int</schemavariable>
      <schemavariable name="%b">seqError as int</schemavariable>
      <schemavariable name="%c">$and($lte(0 as int,i1 as int) as bool,$lt(i1 as int,arrlen(a as ref) as int) as bool) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0" id="63">
      <find>A.7</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,arrlen(a as ref) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,0" id="64">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_i as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">cond($eq(_i as int,i1 as int) as bool,$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int,$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int) as int</schemavariable>
      <schemavariable name="%c">$eq(_t as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,0" id="65">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,0,0" id="66">
      <find>S.1</find>
      <assume>A.5</assume>
      <schemavariable name="%b">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,0,1" id="67">
      <find>S.1</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="cut_cond" path="1,1,0,1" id="68">
      <find>S.0.1</find>
      <schemavariable name="%a">$load_heap(h1 as heap,a as ref,idxInt(_t as int) as field(int)) as int</schemavariable>
      <schemavariable name="%b">$load_heap(h1 as heap,a as ref,idxInt(i1 as int) as field(int)) as int</schemavariable>
      <schemavariable name="%c">$eq(_i as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="c">bool</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,0" id="69">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,0,0" id="70">
      <find>S.1</find>
      <assume>A.5</assume>
      <schemavariable name="%b">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,0,1" id="71">
      <find>S.1</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,1" id="72">
      <find>S.1</find>
      <schemavariable name="%a">$lte(0 as int,i1 as int) as bool</schemavariable>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,1,0" id="73">
      <find>S.1</find>
      <assume>A.5</assume>
      <schemavariable name="%b">$lte(0 as int,i1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,1,1" id="74">
      <find>S.1</find>
      <assume>A.6</assume>
      <schemavariable name="%b">$lt(i1 as int,seqLen(b as seq(int)) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,1" id="75">
      <find>S.0</find>
      <schemavariable name="%t">seqError as int</schemavariable>
      <typevariable name="t">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1" id="76">
      <find>S.0</find>
    </ruleApplication>
  </steps>
</proof>
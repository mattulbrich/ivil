/* Generated By:JavaCC: Do not edit this line. BPLParserConstants.java */
package de.uka.iti.pseudo.parser.boogie;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BPLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 1;
  /** RegularExpression Id. */
  int DIGIT = 2;
  /** RegularExpression Id. */
  int SPECIAL = 3;
  /** RegularExpression Id. */
  int GLYPH = 4;
  /** RegularExpression Id. */
  int NONDIGIT = 5;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int VAR = 12;
  /** RegularExpression Id. */
  int WHERE = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int BOOL = 15;
  /** RegularExpression Id. */
  int BVTYPE = 16;
  /** RegularExpression Id. */
  int CONST = 17;
  /** RegularExpression Id. */
  int UNIQUE = 18;
  /** RegularExpression Id. */
  int EXTENDS = 19;
  /** RegularExpression Id. */
  int COMPLETE = 20;
  /** RegularExpression Id. */
  int FUNCTION = 21;
  /** RegularExpression Id. */
  int RETURNS = 22;
  /** RegularExpression Id. */
  int AXIOM = 23;
  /** RegularExpression Id. */
  int TYPE = 24;
  /** RegularExpression Id. */
  int PROCEDURE = 25;
  /** RegularExpression Id. */
  int IMPLEMENTATION = 26;
  /** RegularExpression Id. */
  int MODIFIES = 27;
  /** RegularExpression Id. */
  int FREE = 28;
  /** RegularExpression Id. */
  int REQUIRES = 29;
  /** RegularExpression Id. */
  int ENSURES = 30;
  /** RegularExpression Id. */
  int GOTO = 31;
  /** RegularExpression Id. */
  int RETURN = 32;
  /** RegularExpression Id. */
  int IF = 33;
  /** RegularExpression Id. */
  int THEN = 34;
  /** RegularExpression Id. */
  int ELSE = 35;
  /** RegularExpression Id. */
  int WHILE = 36;
  /** RegularExpression Id. */
  int INVARIANT = 37;
  /** RegularExpression Id. */
  int BREAK = 38;
  /** RegularExpression Id. */
  int ASSERT = 39;
  /** RegularExpression Id. */
  int ASSUME = 40;
  /** RegularExpression Id. */
  int HAVOC = 41;
  /** RegularExpression Id. */
  int CALL = 42;
  /** RegularExpression Id. */
  int FALSE = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int OLD = 45;
  /** RegularExpression Id. */
  int OP_ASSIGN = 46;
  /** RegularExpression Id. */
  int OP_EQUIV = 47;
  /** RegularExpression Id. */
  int OP_IMPL = 48;
  /** RegularExpression Id. */
  int OP_EXPL = 49;
  /** RegularExpression Id. */
  int OP_AND = 50;
  /** RegularExpression Id. */
  int OP_OR = 51;
  /** RegularExpression Id. */
  int OP_NEGATION = 52;
  /** RegularExpression Id. */
  int OP_NEQ = 53;
  /** RegularExpression Id. */
  int OP_LTE = 54;
  /** RegularExpression Id. */
  int OP_GTE = 55;
  /** RegularExpression Id. */
  int OP_MUL = 56;
  /** RegularExpression Id. */
  int OP_FORALL = 57;
  /** RegularExpression Id. */
  int OP_EXISTS = 58;
  /** RegularExpression Id. */
  int OP_LAMBDA = 59;
  /** RegularExpression Id. */
  int OP_SEP = 60;
  /** RegularExpression Id. */
  int SEP_RCURLY = 61;
  /** RegularExpression Id. */
  int SEP_LCURLY = 62;
  /** RegularExpression Id. */
  int SEP_RBRACKET = 63;
  /** RegularExpression Id. */
  int SEP_LBRACKET = 64;
  /** RegularExpression Id. */
  int IDENT = 65;
  /** RegularExpression Id. */
  int BVLIT = 66;
  /** RegularExpression Id. */
  int STRING = 67;
  /** RegularExpression Id. */
  int FLOAT = 68;
  /** RegularExpression Id. */
  int INTEGER = 69;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<LETTER>",
    "<DIGIT>",
    "<SPECIAL>",
    "<GLYPH>",
    "<NONDIGIT>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"var\"",
    "\"where\"",
    "\"int\"",
    "\"bool\"",
    "<BVTYPE>",
    "\"const\"",
    "\"unique\"",
    "\"extends\"",
    "\"complete\"",
    "\"function\"",
    "\"returns\"",
    "\"axiom\"",
    "\"type\"",
    "\"procedure\"",
    "\"implementation\"",
    "\"modifies\"",
    "\"free\"",
    "\"requires\"",
    "\"ensures\"",
    "\"goto\"",
    "\"return\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"invariant\"",
    "\"break\"",
    "\"assert\"",
    "\"assume\"",
    "\"havoc\"",
    "\"call\"",
    "\"false\"",
    "\"true\"",
    "\"old\"",
    "\":=\"",
    "<OP_EQUIV>",
    "<OP_IMPL>",
    "<OP_EXPL>",
    "<OP_AND>",
    "<OP_OR>",
    "<OP_NEGATION>",
    "<OP_NEQ>",
    "<OP_LTE>",
    "<OP_GTE>",
    "\"*\"",
    "<OP_FORALL>",
    "<OP_EXISTS>",
    "<OP_LAMBDA>",
    "<OP_SEP>",
    "\"}\"",
    "\"{\"",
    "\"]\"",
    "\"[\"",
    "<IDENT>",
    "<BVLIT>",
    "<STRING>",
    "<FLOAT>",
    "<INTEGER>",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\",\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"==\"",
    "\"<:\"",
    "\"++\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"%\"",
    "\"|{\"",
    "\"}|\"",
  };

}

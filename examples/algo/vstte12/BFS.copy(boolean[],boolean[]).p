(* created : Wed Dec 05 20:29:31 CET 2012 - Alpha-3 *)
#
# This file was generated by PSEUDO
# which is copyright (C) 2009 Universitaet Karlsruhe, Germany
#    written by Mattias Ulbrich
#

include "$bytecode.p"

include "declarations.p"

(* program variables *)
function
   ref _target assignable (* method parameter / ... *)
   ref pre_target assignable (* method parameter, prestate *)
   ref _source assignable (* local variable '2' *)
   ref pre_source assignable (* method parameter, prestate *)
   heap ho1 assignable (* Heap snapshot for loop invariant *)
   bool st_0_bool assignable (* stack variable *)
   int st_0_int assignable (* stack variable *)
   int _i assignable (* local variable '3' *)
   ref st_1_ref assignable (* stack variable *)
   int st_1_int assignable (* stack variable *)
   bool branchCond assignable (* branching condition *)
   ref st_0_ref assignable (* stack variable *)
   ref st_2_ref assignable (* stack variable *)
   int st_3_int assignable (* stack variable *)
   bool st_2_bool assignable (* stack variable *)

(* the translated Java program *)
program Java source "./BFS.jspec"
   sourceline 71
    assume !_target = null ; "Assume precondition"
   sourceline 72
    assume !_source = null ; "Assume precondition"
   sourceline 73
    assume arrlen(_source) = arrlen(_target) ; "Assume precondition"
    assume wellformed(h) ; "assumption guaranteed by Java"
    assume !_this = null ; "assumption guaranteed by Java"
    assume h[_this, created] ; "assumption guaranteed by Java"
    pre_h := h || pre_target := _target || pre_source := _source ; "Recording the prestate"
    decrBase := 0 ; "Save the decrease (variant) base"
  Label1:
   sourceline 79
    (* LDC + INVOKESTATIC - Specification injection *)
    ho1 := h
    (* spec statement deferred till after looping point *)
  Label2:
   sourceline 86
    (* ICONST_0 *)
    st_0_bool := false
    st_0_int := 0
    (* ISTORE *)
    _i := st_0_int
  Label3:
    (* deferred specification statement *)
    skip LOOPINV, {ho := ho1}((0 <= _i & _i <= arrlen(_source) &
	      (\forall j; 0 <= j & j < _i ->
	         h[_target, idxBool(j)] = h[_source, idxBool(j)])) & modHeap(h, ho, {h:=ho}(singleton(_target)))), arrlen(_source) - _i
    (* ILOAD *)
    st_0_int := _i
    (* ALOAD *)
    st_1_ref := _source
    (* ARRAYLENGTH *)
    assert !st_1_ref = null ; "non-null array reference"
    st_1_int := arrlen(st_1_ref)
    (* IF_ICMPGE *)
    branchCond := st_0_int >= st_1_int
    goto Label4, Label5
  Label4:
    assume branchCond
    goto Label6
  Label5:
    assume !branchCond
  Label7:
   sourceline 87
    (* ALOAD *)
    st_0_ref := _target
    (* ILOAD *)
    st_1_int := _i
    (* ALOAD *)
    st_2_ref := _source
    (* ILOAD *)
    st_3_int := _i
    (* BALOAD *)
    assert !st_2_ref = null ; "non-null array access"
    assert st_3_int >= 0 & st_3_int < arrlen(st_2_ref) ; "array index in bounds"
    st_2_bool := h[st_2_ref, idxBool(st_3_int)] ; "read value from array"
    (* BASTORE *)
    assert !st_0_ref = null ; "non-null array access"
    assert st_1_int >= 0 & st_1_int < arrlen(st_0_ref) ; "array index in bounds"
    h := h[st_0_ref, idxBool(st_1_int) := st_2_bool]
  Label8:
   sourceline 86
    (* IINC *)
    _i := _i + 1
    (* GOTO *)
    goto Label3
  Label6:
   sourceline 89
    (* RETURN *)
    exc := null
    goto LabelEnd
  Label9:
  LabelEnd:
    assert exc = null ; "No exception has been thrown"
   sourceline 74
    assert (\forall i; 0 <= i & i < arrlen(_target) -> 
           h[_target, idxBool(i)] = h[_source, idxBool(i)]) ; "Assert postcondition"
   sourceline 76
    assert modHeap(h, pre_h, {h:=pre_h}(singleton(_target)))
(* end of program *)


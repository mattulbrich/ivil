//
// This file contains the grammar for structural proofs.
//

ASTProofSourceFile ProofSourceFile():
{
  Token first, t;
}
{
  first="proof" "source" t=<STRING>
      { return new ASTProofSourceFile(first, Util.stripQuotes(t.image)); }
}

ASTProofScript ProofScript():
{
  Token t = null;
  Token id = null;
  String name = null;
  Token first;
  ProofScript.Kind kind = null;
  ASTProofScriptNode tree;
}
{
  first = "proof"

  (
    ( t = "rule" id=<IDENTIFIER> 
        { kind = ProofScript.Kind.RULE; name = id.image; }
    | t = "program" id=<IDENTIFIER> 
        { kind = ProofScript.Kind.PROGRAM;  name = id.image;}
       ( "." id=<IDENTIFIER> { name += "." + id.image; } )*
    | t = "problem" id=<IDENTIFIER> 
        { kind = ProofScript.Kind.PROBLEM;  name = id.image;}
    )
  )?

  "(" tree=ProofTree() ")"
     { return new ASTProofScript(first, kind, name, tree); }
}

ASTProofScriptNode ProofTree():
{
  ASTProofScriptNode result;
  Token t, t2;
  ASTProofScriptNode child;
}
{
  t = <IDENTIFIER>    {  result = new ASTProofScriptNode(t);  }

  ( t = <IDENTIFIER>
    ( ":" ( t2=<STRING> { result.put(t, t2, Util.stripQuotes(t2.image)); }
          | t2=<IDENTIFIER> { result.put(t, t2, t2.image); }
          )
    | /* epsilon */ { result.putUnnamed(t, t.image); }
    )
  | t=<STRING> { result.putUnnamed(t, Util.stripQuotes(t.image)); }
  )* 

  ( ";" child=ProofTree() { result.addChild(child); }
  | ( "(" child=ProofTree() { result.addChild(child); } ")" )*
  )

  { return result; }
}
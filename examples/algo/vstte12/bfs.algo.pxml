<?xml version="1.0"?>
<proof format="1"><info>
    <date>Mon Mar 18 23:27:47 CET 2013</date>
    <version>0.0</version>
    <problem> |- [[0;bfs]]true</problem>
    <hash>to be done</hash>
  </info>
  <steps>
    <ruleApplication rule="auto_tbox_assume" path="" id="0">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[0;bfs]](true as bool) as bool</schemavariable>
      <schemavariable name="%b">finite(fullset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{  }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="" id="1">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[1;bfs]](true as bool) as bool</schemavariable>
      <schemavariable name="%b">finite(fullset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{  }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="0" id="2">
      <find>S.0</find>
      <assume>A.0</assume>
      <schemavariable name="%b">finite(fullset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="3">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[2;bfs]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="4">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[3;bfs]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ V := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="5">
      <find>S.0</find>
      <schemavariable name="%t">{ V := singleton(src as vertex) as set(vertex) }([[4;bfs]](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="6">
      <find>S.0.2</find>
      <schemavariable name="%t">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="7">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[4;bfs]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ C := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="8">
      <find>S.0</find>
      <schemavariable name="%t">{ C := singleton(src as vertex) as set(vertex) }([[5;bfs]](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="9">
      <find>S.0.3</find>
      <schemavariable name="%t">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="10">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[5;bfs]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="11">
      <find>S.0</find>
      <schemavariable name="%t">{ N := emptyset as set(vertex) }([[6;bfs]](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="12">
      <find>S.0.4</find>
      <schemavariable name="%t">emptyset as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1" id="13">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[6;bfs]](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="14">
      <find>S.0</find>
      <schemavariable name="%t">{ d := 0 as int }([[7;bfs]](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1" id="15">
      <find>S.0.5</find>
      <schemavariable name="%t">0 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="autot_loop_invariant_update" path="1" id="16">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%inv">$and($gte(d as int,0 as int) as bool,$and((\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool,$and((\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool,$and($subset(C as set(vertex),V as set(vertex)) as bool,$and($subset(N as set(vertex),V as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%var">$complement($diff(V as set(vertex),$union(C as set(vertex),N as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%a">[[7;bfs]](true as bool) as bool</schemavariable>
      <typevariable name="var">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,0" id="17">
      <find>S.0</find>
      <schemavariable name="%t">$and($gte(d as int,0 as int) as bool,$and((\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool,$and((\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool,$and($subset(C as set(vertex),V as set(vertex)) as bool,$and($subset(N as set(vertex),V as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="1,0" id="18">
      <find>S.0.1.1.0.0.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="diff_emptyset" path="1,0" id="19">
      <find>S.0.1.1.1.0.0.0.1</find>
      <schemavariable name="%s">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="1,0" id="20">
      <find>S.0.1.1.1.1.0.0.1.0</find>
      <schemavariable name="%x">\var w as vertex</schemavariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_false_l" path="1,0" id="21">
      <find>S.0.1.1.1.1.0.0.1</find>
      <schemavariable name="%a">(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,singleton(src as vertex) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,0" id="22">
      <find>S.0.1.1.1.1.1.0.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,0" id="23">
      <find>S.0.1.1.1.1.1.0.1</find>
      <schemavariable name="%t">emptyset as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_r" path="1,0" id="24">
      <find>S.0.1.1.1.1.1.0</find>
      <schemavariable name="%b">(\forall x as vertex;$not($mem(\var x as vertex,singleton(src as vertex) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0" id="25">
      <find>S.0.1.1.1.1.1</find>
      <schemavariable name="%a">$and($subset(singleton(src as vertex) as set(vertex),singleton(src as vertex) as set(vertex)) as bool,$and($subset(emptyset as set(vertex),singleton(src as vertex) as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(singleton(src as vertex) as set(vertex),emptyset as set(vertex)) as set(vertex),singleton(src as vertex) as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_in_anyset" path="1,0" id="26">
      <find>S.0.1.1.1.1.1.1.0</find>
      <schemavariable name="%s">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0" id="27">
      <find>S.0.1.1.1.1.1.1</find>
      <schemavariable name="%a">$not($mem(dest as vertex,$diff($diff(singleton(src as vertex) as set(vertex),emptyset as set(vertex)) as set(vertex),singleton(src as vertex) as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="diff_emptyset" path="1,0" id="28">
      <find>S.0.1.1.1.1.1.1.0.1.0</find>
      <schemavariable name="%s">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="diff_same" path="1,0" id="29">
      <find>S.0.1.1.1.1.1.1.0.1</find>
      <schemavariable name="%s">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="1,0" id="30">
      <find>S.0.1.1.1.1.1.1.0</find>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_false" path="1,0" id="31">
      <find>S.0.1.1.1.1.1.1</find>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,0" id="32">
      <find>S.0.1.1.1.1.1</find>
      <schemavariable name="%a">$subset(singleton(src as vertex) as set(vertex),singleton(src as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,0" id="33">
      <find>S.0.1.1.0.0</find>
      <schemavariable name="%a">false as bool</schemavariable>
      <schemavariable name="%b">$and(minconnect(src as vertex,\var y as vertex,$plus(0 as int,1 as int) as int) as bool,$mem(\var y as vertex,singleton(src as vertex) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_eq" path="1,0" id="34">
      <find>S.0.1.1.0.0</find>
      <schemavariable name="%a">$and(minconnect(src as vertex,\var y as vertex,$plus(0 as int,1 as int) as int) as bool,$mem(\var y as vertex,singleton(src as vertex) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,0" id="35">
      <find>S.0.1.1.1.0.0</find>
      <schemavariable name="%a">$mem(\var z as vertex,singleton(src as vertex) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,0 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,0" id="36">
      <find>S.0.0</find>
      <schemavariable name="%t">$gte(0 as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,0" id="37">
      <find>S.0</find>
      <schemavariable name="%a">$and((\forall x as vertex;$impl($mem(\var x as vertex,singleton(src as vertex) as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,0 as int) as bool) as bool) as bool,$and((\forall y as vertex;$not($and(minconnect(src as vertex,\var y as vertex,$plus(0 as int,1 as int) as int) as bool,$mem(\var y as vertex,singleton(src as vertex) as set(vertex)) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$eq($mem(\var z as vertex,singleton(src as vertex) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,0 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(0 as int,1 as int) as int) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,singleton(src as vertex) as set(vertex)) as bool) as bool) as bool) as bool) as bool,$subset(singleton(src as vertex) as set(vertex),singleton(src as vertex) as set(vertex)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0" id="38">
      <find>S.0.0.0.0</find>
      <schemavariable name="%y">src as vertex</schemavariable>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="zero_plus" path="1,0" id="39">
      <find>S.0.1.0.0.0.0.2</find>
      <schemavariable name="%a">1 as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0" id="40">
      <find>S.0.1.0.0.0.1</find>
      <schemavariable name="%y">src as vertex</schemavariable>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0" id="41">
      <find>S.0.1.1.0.0.0</find>
      <schemavariable name="%y">src as vertex</schemavariable>
      <schemavariable name="%x">\var z as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="zero_plus" path="1,0" id="42">
      <find>S.0.1.1.1.0.0.0.2</find>
      <schemavariable name="%a">1 as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,0" id="43">
      <find>S.0.1.1.1.0.0.1.0.1</find>
      <schemavariable name="%y">src as vertex</schemavariable>
      <schemavariable name="%x">\var q as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_singleton" path="1,0" id="44">
      <find>S.0.1.1.1.1</find>
      <schemavariable name="%y">src as vertex</schemavariable>
      <schemavariable name="%x">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,0" id="45">
      <find>S.0.1.1.1.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,0" id="46">
      <find>S.0.1.1.1.1.1</find>
      <schemavariable name="%t">singleton(src as vertex) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_true_r" path="1,0" id="47">
      <find>S.0.1.1.1.1</find>
      <schemavariable name="%a">(\forall x as vertex;$not($mem(\var x as vertex,singleton(src as vertex) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,0" id="48">
      <find>S.0.1.1.1</find>
      <schemavariable name="%a">(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,1 as int) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$eq(\var q as vertex,src as vertex) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0" id="49">
      <find>S.0</find>
      <schemavariable name="%a">(\forall x as vertex;$impl($eq(\var x as vertex,src as vertex) as bool,minconnect(src as vertex,\var x as vertex,0 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall y as vertex;$not($and(minconnect(src as vertex,\var y as vertex,1 as int) as bool,$eq(\var y as vertex,src as vertex) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$eq($eq(\var z as vertex,src as vertex) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,0 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,1 as int) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$eq(\var q as vertex,src as vertex) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,0" id="50">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$impl($eq(\var x as vertex,src as vertex) as bool,minconnect(src as vertex,\var x as vertex,0 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,0" id="51">
      <find>S.0</find>
      <schemavariable name="%a">$eq(x1 as vertex,src as vertex) as bool</schemavariable>
      <schemavariable name="%b">minconnect(src as vertex,x1 as vertex,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,0" id="52">
      <find>A.1</find>
      <schemavariable name="%u">src as vertex</schemavariable>
      <schemavariable name="%t">x1 as vertex</schemavariable>
      <typevariable name="u">vertex</typevariable>
      <typevariable name="t">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,0" id="53">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1" id="54">
      <find>S.0</find>
      <schemavariable name="%a">(\forall y as vertex;$not($and(minconnect(src as vertex,\var y as vertex,1 as int) as bool,$eq(\var y as vertex,src as vertex) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall z as vertex;$eq($eq(\var z as vertex,src as vertex) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,0 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,1 as int) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$eq(\var q as vertex,src as vertex) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,0" id="55">
      <find>S.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <schemavariable name="%b">$not($and(minconnect(src as vertex,\var y as vertex,1 as int) as bool,$eq(\var y as vertex,src as vertex) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var y as vertex)">y</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,0,1,0" id="56">
      <find>S.0</find>
      <schemavariable name="%b">$and(minconnect(src as vertex,y as vertex,1 as int) as bool,$eq(y as vertex,src as vertex) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,0,1,0" id="57">
      <find>A.1</find>
      <schemavariable name="%a">minconnect(src as vertex,y as vertex,1 as int) as bool</schemavariable>
      <schemavariable name="%b">$eq(y as vertex,src as vertex) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,0,1,0" id="58">
      <find>A.2</find>
      <schemavariable name="%u">src as vertex</schemavariable>
      <schemavariable name="%t">y as vertex</schemavariable>
      <typevariable name="u">vertex</typevariable>
      <typevariable name="t">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,0" id="59">
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,0,1,1" id="60">
      <find>S.0</find>
      <schemavariable name="%a">(\forall z as vertex;$eq($eq(\var z as vertex,src as vertex) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,0 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,1 as int) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$eq(\var q as vertex,src as vertex) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,0" id="61">
      <find>S.0</find>
      <schemavariable name="%x">\var z as vertex</schemavariable>
      <schemavariable name="%b">$eq($eq(\var z as vertex,src as vertex) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,0 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var z as vertex)">z</property>
    </ruleApplication>
    <ruleApplication rule="connect_def" path="1,0,1,1,0" id="62">
      <find>S.0.1.0.1</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">src as vertex</schemavariable>
      <schemavariable name="%b">z as vertex</schemavariable>
      <schemavariable name="%n">\var n as int</schemavariable>
      <typevariable name="b">vertex</typevariable>
      <typevariable name="a">vertex</typevariable>
      <typevariable name="n">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,0" id="63">
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,0,1,1,1" id="64">
      <find>S.0</find>
      <schemavariable name="%x">\var w as vertex</schemavariable>
      <schemavariable name="%b">$impl(minconnect(src as vertex,\var w as vertex,1 as int) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$eq(\var q as vertex,src as vertex) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var w as vertex)">w2</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,0,1,1,1" id="65">
      <find>S.0</find>
      <schemavariable name="%a">minconnect(src as vertex,w2 as vertex,1 as int) as bool</schemavariable>
      <schemavariable name="%b">(\exists q as vertex;$and($mem(w2 as vertex,succ(\var q as vertex) as set(vertex)) as bool,$eq(\var q as vertex,src as vertex) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,0,1,1,1" id="66">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="67">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">w as vertex</schemavariable>
      <schemavariable name="%a">[[18;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int }</schemaupdate>
      <property name="skolemName(w as vertex)">w1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="68">
      <find>S.0</find>
      <schemavariable name="%t">{ w := w1 as vertex }([[19;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="69">
      <find>S.0.6</find>
      <schemavariable name="%t">w1 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="70">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">tovisit as set(vertex)</schemavariable>
      <schemavariable name="%a">[[19;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex }</schemaupdate>
      <property name="skolemName(tovisit as set(vertex))">tovisit1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="71">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := tovisit1 as set(vertex) }([[20;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="72">
      <find>S.0.7</find>
      <schemavariable name="%t">tovisit1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="73">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">Vo as set(vertex)</schemavariable>
      <schemavariable name="%a">[[20;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) }</schemaupdate>
      <property name="skolemName(Vo as set(vertex))">Vo1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="74">
      <find>S.0</find>
      <schemavariable name="%t">{ Vo := Vo1 as set(vertex) }([[21;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="75">
      <find>S.0.8</find>
      <schemavariable name="%t">Vo1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="76">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">v as vertex</schemavariable>
      <schemavariable name="%a">[[21;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) }</schemaupdate>
      <property name="skolemName(v as vertex)">v1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="77">
      <find>S.0</find>
      <schemavariable name="%t">{ v := v1 as vertex }([[22;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="78">
      <find>S.0.9</find>
      <schemavariable name="%t">v1 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="79">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">d as int</schemavariable>
      <schemavariable name="%a">[[22;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">int</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex }</schemaupdate>
      <property name="skolemName(d as int)">d1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="80">
      <find>S.0</find>
      <schemavariable name="%t">{ d := d1 as int }([[23;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="81">
      <find>S.0.9</find>
      <schemavariable name="%t">d1 as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || d := 0 as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="82">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">V as set(vertex)</schemavariable>
      <schemavariable name="%a">[[23;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int }</schemaupdate>
      <property name="skolemName(V as set(vertex))">V1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="83">
      <find>S.0</find>
      <schemavariable name="%t">{ V := V1 as set(vertex) }([[24;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="84">
      <find>S.0.9</find>
      <schemavariable name="%t">V1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || V := singleton(src as vertex) as set(vertex) || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="85">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">C as set(vertex)</schemavariable>
      <schemavariable name="%a">[[24;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) }</schemaupdate>
      <property name="skolemName(C as set(vertex))">C1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="86">
      <find>S.0</find>
      <schemavariable name="%t">{ C := C1 as set(vertex) }([[25;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="87">
      <find>S.0.9</find>
      <schemavariable name="%t">C1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || C := singleton(src as vertex) as set(vertex) || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="88">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">N as set(vertex)</schemavariable>
      <schemavariable name="%a">[[25;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) }</schemaupdate>
      <property name="skolemName(N as set(vertex))">N1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="89">
      <find>S.0</find>
      <schemavariable name="%t">{ N := N1 as set(vertex) }([[26;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="90">
      <find>S.0.9</find>
      <schemavariable name="%t">N1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || N := emptyset as set(vertex) || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1" id="91">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">No as set(vertex)</schemavariable>
      <schemavariable name="%a">[[26;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) }</schemaupdate>
      <property name="skolemName(No as set(vertex))">No1</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="92">
      <find>S.0</find>
      <schemavariable name="%t">{ No := No1 as set(vertex) }([[27;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="93">
      <find>S.0.10</find>
      <schemavariable name="%t">No1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1" id="94">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[27;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(varAtPre as set(vertex),$complement($diff(V as set(vertex),$union(C as set(vertex),N as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="95">
      <find>A.1</find>
      <schemavariable name="%t">$eq(varAtPre as set(vertex),$complement($diff(V as set(vertex),$union(C as set(vertex),N as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1" id="96">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[28;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($gte(d as int,0 as int) as bool,$and((\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool,$and((\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool,$and($subset(C as set(vertex),V as set(vertex)) as bool,$and($subset(N as set(vertex),V as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1" id="97">
      <find>A.2</find>
      <schemavariable name="%t">$and($gte(d as int,0 as int) as bool,$and((\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool,$and((\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool,$and($subset(C as set(vertex),V as set(vertex)) as bool,$and($subset(N as set(vertex),V as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1" id="98">
      <find>A.2.1.1.1.1.1.0.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">C1 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1" id="99">
      <find>A.2.1.1.1.1.1.0.1</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">N1 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="100">
      <find>A.2</find>
      <schemavariable name="%a">$gte(d1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall x as vertex;$impl($mem(\var x as vertex,C1 as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d1 as int) as bool) as bool) as bool,$and((\forall y as vertex;$equiv($mem(\var y as vertex,N1 as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool,$mem(\var y as vertex,V1 as set(vertex)) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d1 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d1 as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N1 as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C1 as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl((\forall x as vertex;$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool) as bool,(\forall x as vertex;$not($mem(\var x as vertex,N1 as set(vertex)) as bool) as bool) as bool) as bool,$and($subset(C1 as set(vertex),V1 as set(vertex)) as bool,$and($subset(N1 as set(vertex),V1 as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="101">
      <find>A.3</find>
      <schemavariable name="%a">(\forall x as vertex;$impl($mem(\var x as vertex,C1 as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d1 as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall y as vertex;$equiv($mem(\var y as vertex,N1 as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool,$mem(\var y as vertex,V1 as set(vertex)) as bool) as bool) as bool) as bool,$and((\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d1 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d1 as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N1 as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C1 as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl((\forall x as vertex;$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool) as bool,(\forall x as vertex;$not($mem(\var x as vertex,N1 as set(vertex)) as bool) as bool) as bool) as bool,$and($subset(C1 as set(vertex),V1 as set(vertex)) as bool,$and($subset(N1 as set(vertex),V1 as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="102">
      <find>A.4</find>
      <schemavariable name="%a">(\forall y as vertex;$equiv($mem(\var y as vertex,N1 as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool,$mem(\var y as vertex,V1 as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d1 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool,$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d1 as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N1 as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C1 as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl((\forall x as vertex;$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool) as bool,(\forall x as vertex;$not($mem(\var x as vertex,N1 as set(vertex)) as bool) as bool) as bool) as bool,$and($subset(C1 as set(vertex),V1 as set(vertex)) as bool,$and($subset(N1 as set(vertex),V1 as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,1" id="103">
      <find>A.4.0</find>
      <schemavariable name="%a">$mem(\var y as vertex,N1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$and(minconnect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool,$mem(\var y as vertex,V1 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="104">
      <find>A.5</find>
      <schemavariable name="%a">(\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d1 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and((\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d1 as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N1 as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C1 as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool,$and($impl((\forall x as vertex;$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool) as bool,(\forall x as vertex;$not($mem(\var x as vertex,N1 as set(vertex)) as bool) as bool) as bool) as bool,$and($subset(C1 as set(vertex),V1 as set(vertex)) as bool,$and($subset(N1 as set(vertex),V1 as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,1" id="105">
      <find>A.5.0</find>
      <schemavariable name="%a">$mem(\var z as vertex,$diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d1 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="106">
      <find>A.6</find>
      <schemavariable name="%a">(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d1 as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N1 as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C1 as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($impl((\forall x as vertex;$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool) as bool,(\forall x as vertex;$not($mem(\var x as vertex,N1 as set(vertex)) as bool) as bool) as bool) as bool,$and($subset(C1 as set(vertex),V1 as set(vertex)) as bool,$and($subset(N1 as set(vertex),V1 as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="107">
      <find>A.7</find>
      <schemavariable name="%a">$impl((\forall x as vertex;$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool) as bool,(\forall x as vertex;$not($mem(\var x as vertex,N1 as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($subset(C1 as set(vertex),V1 as set(vertex)) as bool,$and($subset(N1 as set(vertex),V1 as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="108">
      <find>A.8</find>
      <schemavariable name="%a">$subset(C1 as set(vertex),V1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$and($subset(N1 as set(vertex),V1 as set(vertex)) as bool,$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1" id="109">
      <find>A.9</find>
      <schemavariable name="%a">$subset(N1 as set(vertex),V1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1" id="110">
      <find>A.10</find>
      <schemavariable name="%b">$mem(dest as vertex,$diff($diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex),C1 as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1" id="111">
      <find>A.5.0.0</find>
      <schemavariable name="%x">\var z as vertex</schemavariable>
      <schemavariable name="%a">V1 as set(vertex)</schemavariable>
      <schemavariable name="%b">N1 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1" id="112">
      <find>S.1</find>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <schemavariable name="%a">$diff(V1 as set(vertex),N1 as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">C1 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1" id="113">
      <find>S.1.0</find>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <schemavariable name="%a">V1 as set(vertex)</schemavariable>
      <schemavariable name="%b">N1 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,1" id="114">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%k">65 as int</schemavariable>
      <schemavariable name="%a">[[29;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">30 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0" id="115">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[30;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0" id="116">
      <find>A.10</find>
      <schemavariable name="%t">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0" id="117">
      <find>A.10.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">C1 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0" id="118">
      <find>A.10</find>
      <schemavariable name="%b">(\forall x as vertex;$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0" id="119">
      <find>S.2</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as vertex,C1 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0" id="120">
      <find>S.2</find>
      <schemavariable name="%b">$mem(x as vertex,C1 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,1,0" id="121">
      <find>A.10</find>
      <assume>A.8</assume>
      <schemavariable name="%x">x as vertex</schemavariable>
      <schemavariable name="%t">V1 as set(vertex)</schemavariable>
      <schemavariable name="%s">C1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0" id="122">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[31;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\exists v as vertex;$mem(\var v as vertex,C as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,0" id="123">
      <find>S.0</find>
      <schemavariable name="%t">(\exists v as vertex;$mem(\var v as vertex,C as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,0" id="124">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1,0,1" id="125">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">v as vertex</schemavariable>
      <schemavariable name="%a">[[32;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
      <property name="skolemName(v as vertex)">v2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="126">
      <find>S.0</find>
      <schemavariable name="%t">{ v := v2 as vertex }([[33;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="127">
      <find>S.0.10</find>
      <schemavariable name="%t">v2 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1" id="128">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[33;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(v as vertex,C as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="129">
      <find>A.12</find>
      <schemavariable name="%t">$mem(v as vertex,C as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,1,0,1" id="130">
      <find>A.12</find>
      <assume>A.8</assume>
      <schemavariable name="%x">v2 as vertex</schemavariable>
      <schemavariable name="%t">V1 as set(vertex)</schemavariable>
      <schemavariable name="%s">C1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1" id="131">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[34;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ C := $diff(C as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="132">
      <find>S.0</find>
      <schemavariable name="%t">{ C := $diff(C as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex) }([[35;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1" id="133">
      <find>S.0.10</find>
      <schemavariable name="%t">$diff(C as set(vertex),singleton(v as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,1,0,1" id="134">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%k">39 as int</schemavariable>
      <schemavariable name="%a">[[35;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">36 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,0" id="135">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[36;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(v as vertex,dest as vertex) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,0" id="136">
      <find>A.14</find>
      <schemavariable name="%t">$eq(v as vertex,dest as vertex) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,0,1,0" id="137">
      <find>A.14</find>
      <schemavariable name="%u">dest as vertex</schemavariable>
      <schemavariable name="%t">v2 as vertex</schemavariable>
      <typevariable name="u">vertex</typevariable>
      <typevariable name="t">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0,1,0" id="138">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[37;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">71 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,0" id="139">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[71;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(d as int,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,0,0" id="140">
      <find>S.0</find>
      <schemavariable name="%t">$gte(d as int,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,0" id="141">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,0,1" id="142">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[72;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($lt(d as int,0 as int) as bool,(\forall m as int;$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,0,1,0" id="143">
      <find>S.0</find>
      <schemavariable name="%t">$impl($lt(d as int,0 as int) as bool,(\forall m as int;$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1,0,1,0" id="144">
      <find>S.0</find>
      <schemavariable name="%a">$lt(d1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">(\forall m as int;$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,0,1,0" id="145">
      <find>S.0</find>
      <schemavariable name="%x">\var m as int</schemavariable>
      <schemavariable name="%b">$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var m as int)">m1</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1,0,1,0" id="146">
      <find>S.0</find>
      <schemavariable name="%a">$gte(m1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$not(minconnect(src as vertex,dest as vertex,m1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,0,1,0" id="147">
      <find>S.0</find>
      <schemavariable name="%b">minconnect(src as vertex,dest as vertex,m1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,1,0" id="148">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,0,1,1" id="149">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[73;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($gte(d as int,0 as int) as bool,minconnect(src as vertex,dest as vertex,d as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,0,1,1,0" id="150">
      <find>S.0</find>
      <schemavariable name="%t">$impl($gte(d as int,0 as int) as bool,minconnect(src as vertex,dest as vertex,d as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1,0,1,1,0" id="151">
      <find>S.0</find>
      <schemavariable name="%a">$gte(d1 as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">minconnect(src as vertex,dest as vertex,d1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,0,1,1,0" id="152">
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,0,1,0,1,1,1" id="153">
      <find>S.0.0</find>
      <schemavariable name="%a">[[74;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,0,1,1,1" id="154">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,0,1,0,1,1,1" id="155">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1" id="156">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[39;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(v as vertex,dest as vertex) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="157">
      <find>A.14</find>
      <schemavariable name="%t">$not($eq(v as vertex,dest as vertex) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1" id="158">
      <find>A.14</find>
      <schemavariable name="%b">$eq(v2 as vertex,dest as vertex) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1" id="159">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[40;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ Vo := V as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="160">
      <find>S.0</find>
      <schemavariable name="%t">{ Vo := V as set(vertex) }([[41;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="161">
      <find>S.0.10</find>
      <schemavariable name="%t">V as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1" id="162">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[41;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ No := N as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="163">
      <find>S.0</find>
      <schemavariable name="%t">{ No := N as set(vertex) }([[42;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="164">
      <find>S.0.10</find>
      <schemavariable name="%t">N as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1" id="165">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[42;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ tovisit := succ(v as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="166">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := succ(v as vertex) as set(vertex) }([[43;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1" id="167">
      <find>S.0.10</find>
      <schemavariable name="%t">succ(v as vertex) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="autot_loop_invariant_update" path="1,1,0,1,1" id="168">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%inv">$and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$and($eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool,$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%var">tovisit as set(vertex)</schemavariable>
      <schemavariable name="%a">[[43;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="var">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="inv">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,0" id="169">
      <find>S.0</find>
      <schemavariable name="%t">$and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$and($eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool,$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="diff_same" path="1,1,0,1,1,0" id="170">
      <find>S.0.1.0.1.1</find>
      <schemavariable name="%s">succ(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="union_empty_r" path="1,1,0,1,1,0" id="171">
      <find>S.0.1.0.1</find>
      <schemavariable name="%a">V1 as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1,0" id="172">
      <find>S.0.1.0</find>
      <schemavariable name="%t">V1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,0" id="173">
      <find>S.0.1</find>
      <schemavariable name="%a">$eq(N1 as set(vertex),$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),succ(v2 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_refl" path="1,1,0,1,1,0" id="174">
      <find>S.0.0</find>
      <schemavariable name="%a">succ(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="1">vertex</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_l" path="1,1,0,1,1,0" id="175">
      <find>S.0</find>
      <schemavariable name="%a">$eq(N1 as set(vertex),$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),succ(v2 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,0" id="176">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1,0,1,1,1" id="177">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">tovisit as set(vertex)</schemavariable>
      <schemavariable name="%a">[[48;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) }</schemaupdate>
      <property name="skolemName(tovisit as set(vertex))">tovisit2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="178">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := tovisit2 as set(vertex) }([[49;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="179">
      <find>S.0.10</find>
      <schemavariable name="%t">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := succ(v2 as vertex) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1,0,1,1,1" id="180">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">w as vertex</schemavariable>
      <schemavariable name="%a">[[49;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) }</schemaupdate>
      <property name="skolemName(w as vertex)">w3</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="181">
      <find>S.0</find>
      <schemavariable name="%t">{ w := w3 as vertex }([[50;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="182">
      <find>S.0.10</find>
      <schemavariable name="%t">w3 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1,0,1,1,1" id="183">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">V as set(vertex)</schemavariable>
      <schemavariable name="%a">[[50;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex }</schemaupdate>
      <property name="skolemName(V as set(vertex))">V2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="184">
      <find>S.0</find>
      <schemavariable name="%t">{ V := V2 as set(vertex) }([[51;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="185">
      <find>S.0.10</find>
      <schemavariable name="%t">V2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || V := V1 as set(vertex) || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1,0,1,1,1" id="186">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">N as set(vertex)</schemavariable>
      <schemavariable name="%a">[[51;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="v">set(vertex)</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) }</schemaupdate>
      <property name="skolemName(N as set(vertex))">N2</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="187">
      <find>S.0</find>
      <schemavariable name="%t">{ N := N2 as set(vertex) }([[52;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="188">
      <find>S.0.10</find>
      <schemavariable name="%t">N2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || N := N1 as set(vertex) || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1" id="189">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[52;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(varAtPre1 as set(vertex),tovisit as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="190">
      <find>A.14</find>
      <schemavariable name="%t">$eq(varAtPre1 as set(vertex),tovisit as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1" id="191">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[53;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$and($eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool,$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1" id="192">
      <find>A.15</find>
      <schemavariable name="%t">$and($subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool,$and($eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool,$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1" id="193">
      <find>A.15</find>
      <schemavariable name="%a">$subset(tovisit2 as set(vertex),succ(v2 as vertex) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$and($eq(V2 as set(vertex),$union(V1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)) as bool,$eq(N2 as set(vertex),$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1" id="194">
      <find>A.16</find>
      <schemavariable name="%a">$eq(V2 as set(vertex),$union(V1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$eq(N2 as set(vertex),$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,0,1,1,1" id="195">
      <find>A.16</find>
      <schemavariable name="%u">$union(V1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%t">V2 as set(vertex)</schemavariable>
      <typevariable name="u">set(vertex)</typevariable>
      <typevariable name="t">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_order" path="1,1,0,1,1,1" id="196">
      <find>A.17</find>
      <schemavariable name="%u">$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%t">N2 as set(vertex)</schemavariable>
      <typevariable name="u">set(vertex)</typevariable>
      <typevariable name="t">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,1,0,1,1,1" id="197">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%k">66 as int</schemavariable>
      <schemavariable name="%a">[[54;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">55 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,0" id="198">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[55;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(tovisit as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0" id="199">
      <find>A.18</find>
      <schemavariable name="%t">$not($eq(tovisit as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,0" id="200">
      <find>A.18.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,0" id="201">
      <find>A.18</find>
      <schemavariable name="%b">(\forall x as vertex;$not($mem(\var x as vertex,tovisit2 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,0" id="202">
      <find>S.3</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as vertex,tovisit2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x2</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,0" id="203">
      <find>S.3</find>
      <schemavariable name="%b">$mem(x2 as vertex,tovisit2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,1,0,1,1,1,0" id="204">
      <find>A.18</find>
      <assume>A.15</assume>
      <schemavariable name="%x">x2 as vertex</schemavariable>
      <schemavariable name="%t">succ(v2 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_havoc" path="1,1,0,1,1,1,0" id="205">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%v">w as vertex</schemavariable>
      <schemavariable name="%a">[[56;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="v">vertex</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
      <property name="skolemName(w as vertex)">w4</property>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0" id="206">
      <find>S.0</find>
      <schemavariable name="%t">{ w := w4 as vertex }([[57;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0" id="207">
      <find>S.0.10</find>
      <schemavariable name="%t">w4 as vertex</schemavariable>
      <typevariable name="t">vertex</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,0" id="208">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[57;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$mem(w as vertex,tovisit as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0" id="209">
      <find>A.20</find>
      <schemavariable name="%t">$mem(w as vertex,tovisit as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,1,0,1,1,1,0" id="210">
      <find>A.20</find>
      <assume>A.15</assume>
      <schemavariable name="%x">w4 as vertex</schemavariable>
      <schemavariable name="%t">succ(v2 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1,1,0" id="211">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[58;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ tovisit := $diff(tovisit as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0" id="212">
      <find>S.0</find>
      <schemavariable name="%t">{ tovisit := $diff(tovisit as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }([[59;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0" id="213">
      <find>S.0.10</find>
      <schemavariable name="%t">$diff(tovisit as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,1,0,1,1,1,0" id="214">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%k">64 as int</schemavariable>
      <schemavariable name="%a">[[59;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">60 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,0,0" id="215">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[60;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(w as vertex,V as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0" id="216">
      <find>A.22</find>
      <schemavariable name="%t">$not($mem(w as vertex,V as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,0,0" id="217">
      <find>A.22</find>
      <schemavariable name="%b">$mem(w4 as vertex,V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1,1,0,0" id="218">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[61;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ V := $union(V as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0" id="219">
      <find>S.0</find>
      <schemavariable name="%t">{ V := $union(V as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }([[62;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0" id="220">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(V as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1,1,0,0" id="221">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[62;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ N := $union(N as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0" id="222">
      <find>S.0</find>
      <schemavariable name="%t">{ N := $union(N as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex) }([[63;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0" id="223">
      <find>S.0.10</find>
      <schemavariable name="%t">$union(N as set(vertex),singleton(w as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0,1,1,1,0,0" id="224">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[63;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">65 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0,1,1,1,0,0" id="225">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[65;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">43 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,0" id="226">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[43;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0,0" id="227">
      <find>S.0</find>
      <schemavariable name="%t">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,1,0,1,1,1,0,0,0" id="228">
      <find>S.0</find>
      <assume>A.15</assume>
      <schemavariable name="%a">tovisit2 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(w4 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%c">succ(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="c">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,0,1,1,1,0,0,0" id="229">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,0,1" id="230">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[44;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0,1,0" id="231">
      <find>S.0</find>
      <schemavariable name="%t">$eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,0,1,0" id="232">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,0,1,1" id="233">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[45;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0,1,1,0" id="234">
      <find>S.0</find>
      <schemavariable name="%t">$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="set_equality" path="1,1,0,1,1,1,0,0,1,1,0" id="235">
      <find>S.0</find>
      <schemavariable name="%e">\var e as vertex</schemavariable>
      <schemavariable name="%a">$union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),$diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="e">vertex</typevariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,0,1,1,0" id="236">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,0,1,1,1" id="237">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[46;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$prec(tovisit as set(vertex),varAtPre1 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0,1,1,1,0" id="238">
      <find>S.0</find>
      <schemavariable name="%t">$prec(tovisit as set(vertex),varAtPre1 as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prec_set" path="1,1,0,1,1,1,0,0,1,1,1,0" id="239">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">$diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">varAtPre1 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,0,0,1,1,1,0" id="240">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">varAtPre1 as set(vertex)</schemavariable>
      <schemavariable name="%b">$diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,0,0,1,1,1,0" id="241">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">tovisit2 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(w4 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,0,0,1,1,1,0" id="242">
      <find>S.0.0.1.0.1.0.1.0</find>
      <schemavariable name="%y">w4 as vertex</schemavariable>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,1,0,1,1,1,0,0,1,1,1,0" id="243">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%s">varAtPre1 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,0,1,1,1,0,0,1,1,1,0" id="244">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset($diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex),varAtPre1 as set(vertex)) as bool,(\exists x as vertex;$and($mem(\var x as vertex,varAtPre1 as set(vertex)) as bool,$not($and($mem(\var x as vertex,tovisit2 as set(vertex)) as bool,$not($eq(\var x as vertex,w4 as vertex) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,1,1,0,0,1,1,1,0" id="245">
      <find>S.0</find>
      <schemavariable name="%a">$subset($diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex),varAtPre1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as vertex;$and($mem(\var x as vertex,varAtPre1 as set(vertex)) as bool,$not($and($mem(\var x as vertex,tovisit2 as set(vertex)) as bool,$not($eq(\var x as vertex,w4 as vertex) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,0,1,1,1,0,0" id="246">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,0,1,1,1,0,1" id="247">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,0,0,1,1,1,1" id="248">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[47;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,0,1,1,1,1" id="249">
      <find>A.22</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || V := $union(V2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) || N := $union(N2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,1,0,1,1,1,0,0,1,1,1,1" id="250">
      <find>A.22</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,0,1" id="251">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[64;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($mem(w as vertex,V as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,1" id="252">
      <find>A.22</find>
      <schemavariable name="%t">$not($not($mem(w as vertex,V as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,0,1,1,1,0,1" id="253">
      <find>A.22</find>
      <schemavariable name="%b">$mem(w4 as vertex,V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0,1,1,1,0,1" id="254">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[65;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">43 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,1" id="255">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[43;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,1,0" id="256">
      <find>S.0</find>
      <schemavariable name="%t">$subset(tovisit as set(vertex),succ(v as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="setminus_subset_is_subset" path="1,1,0,1,1,1,0,1,0" id="257">
      <find>S.0</find>
      <assume>A.15</assume>
      <schemavariable name="%a">tovisit2 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(w4 as vertex) as set(vertex)</schemavariable>
      <schemavariable name="%c">succ(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="c">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,0,1,1,1,0,1,0" id="258">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,1,1" id="259">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[44;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,1,1,0" id="260">
      <find>S.0</find>
      <schemavariable name="%t">$eq(V as set(vertex),$union(Vo as set(vertex),$diff(succ(v as vertex) as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,1,1,0" id="261">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,1,1,1" id="262">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[45;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,1,1,1,0" id="263">
      <find>S.0</find>
      <schemavariable name="%t">$eq(N as set(vertex),$union(No as set(vertex),$diff(succ(v as vertex) as set(vertex),$union(Vo as set(vertex),tovisit as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,1,1,1,0" id="264">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,0,1,1,1,1" id="265">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[46;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$prec(tovisit as set(vertex),varAtPre1 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,1,1,1,1,0" id="266">
      <find>S.0</find>
      <schemavariable name="%t">$prec(tovisit as set(vertex),varAtPre1 as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prec_set" path="1,1,0,1,1,1,0,1,1,1,1,0" id="267">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">$diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">varAtPre1 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,0,1,1,1,1,0" id="268">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">varAtPre1 as set(vertex)</schemavariable>
      <schemavariable name="%b">$diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,0,1,1,1,1,0" id="269">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">tovisit2 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(w4 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,0,1,1,1,1,0" id="270">
      <find>S.0.0.1.0.1.0.1.0</find>
      <schemavariable name="%y">w4 as vertex</schemavariable>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,1,0,1,1,1,0,1,1,1,1,0" id="271">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%s">varAtPre1 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,0,1,1,1,0,1,1,1,1,0" id="272">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset($diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex),varAtPre1 as set(vertex)) as bool,(\exists x as vertex;$and($mem(\var x as vertex,varAtPre1 as set(vertex)) as bool,$not($and($mem(\var x as vertex,tovisit2 as set(vertex)) as bool,$not($eq(\var x as vertex,w4 as vertex) as bool) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,1,1,0,1,1,1,1,0" id="273">
      <find>S.0</find>
      <schemavariable name="%a">$subset($diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex),varAtPre1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as vertex;$and($mem(\var x as vertex,varAtPre1 as set(vertex)) as bool,$not($and($mem(\var x as vertex,tovisit2 as set(vertex)) as bool,$not($eq(\var x as vertex,w4 as vertex) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,1,1,1,1,0,0" id="274">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,0,1,1,1,1,0,1" id="275">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,0,1,1,1,1,1" id="276">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[47;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,0,1,1,1,1,1" id="277">
      <find>A.23</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || V := V2 as set(vertex) || N := N2 as set(vertex) || w := w4 as vertex || tovisit := $diff(tovisit2 as set(vertex),singleton(w4 as vertex) as set(vertex)) as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,1,0,1,1,1,0,1,1,1,1,1" id="278">
      <find>A.23</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,1" id="279">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[66;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(tovisit as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1" id="280">
      <find>A.18</find>
      <schemavariable name="%t">$eq(tovisit as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,1" id="281">
      <find>A.18</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">tovisit2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_goto2" path="1,1,0,1,1,1,1" id="282">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%k">73 as int</schemavariable>
      <schemavariable name="%a">[[67;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">68 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="k">int</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,1,0" id="283">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[68;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$eq(C as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0" id="284">
      <find>A.19</find>
      <schemavariable name="%t">$eq(C as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,1,0" id="285">
      <find>A.19</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,0" id="286">
      <find>A.19.0.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">C1 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,1,0" id="287">
      <find>A.19.0.0.1.0</find>
      <schemavariable name="%y">v2 as vertex</schemavariable>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1,1,1,0" id="288">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[69;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ C := N as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0" id="289">
      <find>S.0</find>
      <schemavariable name="%t">{ C := N as set(vertex) }([[70;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0" id="290">
      <find>S.0.10</find>
      <schemavariable name="%t">N as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1,1,1,0" id="291">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[70;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0" id="292">
      <find>S.0</find>
      <schemavariable name="%t">{ N := emptyset as set(vertex) }([[71;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) || C := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0" id="293">
      <find>S.0.10</find>
      <schemavariable name="%t">emptyset as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) || C := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,0,1,1,1,1,0" id="294">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[71;bfs'']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := $plus(d as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0" id="295">
      <find>S.0</find>
      <schemavariable name="%t">{ d := $plus(d as int,1 as int) as int }([[72;bfs'']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0" id="296">
      <find>S.0.10</find>
      <schemavariable name="%t">$plus(d as int,1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0,1,1,1,1,0" id="297">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[72;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">74 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0,1,1,1,1,0" id="298">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[74;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">7 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0" id="299">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[7;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,0" id="300">
      <find>S.0</find>
      <schemavariable name="%t">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,0" id="301">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1" id="302">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[8;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,0" id="303">
      <find>S.0</find>
      <schemavariable name="%t">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply_reverse" path="1,1,0,1,1,1,1,0,1,0" id="304">
      <find>S.0.0.0.1</find>
      <assume>A.17</assume>
      <schemavariable name="%u">$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%t">N2 as set(vertex)</schemavariable>
      <typevariable name="u">set(vertex)</typevariable>
      <typevariable name="t">set(vertex)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,1,0,1,1,1,1,0,1,0" id="305">
      <find>S.0.0.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">N1 as set(vertex)</schemavariable>
      <schemavariable name="%b">$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,0" id="306">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1" id="307">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[9;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,0" id="308">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="1,1,0,1,1,1,1,0,1,1,0" id="309">
      <find>S.0.0.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,1,0,1,1,1,1,0,1,1,0" id="310">
      <find>S.0.0</find>
      <schemavariable name="%a">false as bool</schemavariable>
      <schemavariable name="%b">$and(minconnect(src as vertex,\var y as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,$mem(\var y as vertex,V2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="false_eq" path="1,1,0,1,1,1,1,0,1,1,0" id="311">
      <find>S.0.0</find>
      <schemavariable name="%a">$and(minconnect(src as vertex,\var y as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,$mem(\var y as vertex,V2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,0,1,1,0" id="312">
      <find>S.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <schemavariable name="%b">$not($and(minconnect(src as vertex,\var y as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,$mem(\var y as vertex,V2 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var y as vertex)">y2</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,1,0,1,1,0" id="313">
      <find>S.0</find>
      <schemavariable name="%b">$and(minconnect(src as vertex,y2 as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,$mem(y2 as vertex,V2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1,1,0,1,1,0" id="314">
      <find>A.20</find>
      <schemavariable name="%a">minconnect(src as vertex,y2 as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$mem(y2 as vertex,V2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,1,0" id="315">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1,1" id="316">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[10;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,0" id="317">
      <find>S.0</find>
      <schemavariable name="%t">(\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="diff_emptyset" path="1,1,0,1,1,1,1,0,1,1,1,0" id="318">
      <find>S.0.0.0.1</find>
      <schemavariable name="%s">V2 as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,1,0,1,1,1,1,0,1,1,1,0" id="319">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var z as vertex,V2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,$plus(d1 as int,1 as int) as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,0,1,1,1,0" id="320">
      <find>S.0</find>
      <schemavariable name="%x">\var z as vertex</schemavariable>
      <schemavariable name="%b">$eq($mem(\var z as vertex,V2 as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,$plus(d1 as int,1 as int) as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var z as vertex)">z2</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,1,1,0" id="321">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1,1,1" id="322">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[11;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,1,0" id="323">
      <find>S.0</find>
      <schemavariable name="%t">(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="nothing_in_emptyset" path="1,1,0,1,1,1,1,0,1,1,1,1,0" id="324">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var w as vertex</schemavariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_false_l" path="1,1,0,1,1,1,1,0,1,1,1,1,0" id="325">
      <find>S.0.0.1</find>
      <schemavariable name="%a">(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,N2 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,0,1,1,1,1,0" id="326">
      <find>S.0</find>
      <schemavariable name="%x">\var w as vertex</schemavariable>
      <schemavariable name="%b">$impl(minconnect(src as vertex,\var w as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,N2 as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var w as vertex)">w6</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1,1,1,1,0,1,1,1,1,0" id="327">
      <find>S.0</find>
      <schemavariable name="%a">minconnect(src as vertex,w6 as vertex,$plus($plus(d1 as int,1 as int) as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">(\exists q as vertex;$and($mem(w6 as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,N2 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,1,1,1,0" id="328">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1,1,1,1" id="329">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[12;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,1,1,0" id="330">
      <find>S.0</find>
      <schemavariable name="%t">$impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,1,0,1,1,1,1,1,0" id="331">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">N2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="equality_refl" path="1,1,0,1,1,1,1,0,1,1,1,1,1,0" id="332">
      <find>S.0.1</find>
      <schemavariable name="%t">emptyset as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_true_r" path="1,1,0,1,1,1,1,0,1,1,1,1,1,0" id="333">
      <find>S.0</find>
      <schemavariable name="%b">(\forall x as vertex;$not($mem(\var x as vertex,N2 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,0,1,1,1,1,0,1,1,1,1,1,0" id="334">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1" id="335">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[13;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(C as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,0" id="336">
      <find>S.0</find>
      <schemavariable name="%t">$subset(C as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,0" id="337">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1" id="338">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[14;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0" id="339">
      <find>S.0</find>
      <schemavariable name="%t">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_in_anyset" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0" id="340">
      <find>S.0</find>
      <schemavariable name="%s">V2 as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0" id="341">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1" id="342">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[15;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0" id="343">
      <find>S.0</find>
      <schemavariable name="%t">$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="diff_emptyset" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0" id="344">
      <find>S.0.0.1.0</find>
      <schemavariable name="%s">V2 as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0" id="345">
      <find>S.0</find>
      <schemavariable name="%b">$mem(dest as vertex,$diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0" id="346">
      <find>A.20</find>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <schemavariable name="%a">V2 as set(vertex)</schemavariable>
      <schemavariable name="%b">N2 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0" id="347">
      <find>A.20</find>
      <schemavariable name="%a">$mem(dest as vertex,V2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(dest as vertex,N2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0" id="348">
      <find>A.21</find>
      <schemavariable name="%b">$mem(dest as vertex,N2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0" id="349">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1" id="350">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[16;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$prec($complement($diff(V as set(vertex),$union(C as set(vertex),N as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="351">
      <find>S.0</find>
      <schemavariable name="%t">$prec($complement($diff(V as set(vertex),$union(C as set(vertex),N as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="union_empty_r" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="352">
      <find>S.0.0.0.1</find>
      <schemavariable name="%a">N2 as set(vertex)</schemavariable>
      <typevariable name="2">vertex</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
    </ruleApplication>
    <ruleApplication rule="prec_set" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="353">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">$complement($diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">varAtPre as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="354">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">varAtPre as set(vertex)</schemavariable>
      <schemavariable name="%b">$complement($diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="355">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">$diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="356">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%b">$mem(\var x as vertex,$diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="357">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">V2 as set(vertex)</schemavariable>
      <schemavariable name="%b">N2 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="358">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%s">varAtPre as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="359">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset($complement($diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool,(\exists x as vertex;$and($mem(\var x as vertex,varAtPre as set(vertex)) as bool,$and($mem(\var x as vertex,V2 as set(vertex)) as bool,$not($mem(\var x as vertex,N2 as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0" id="360">
      <find>S.0</find>
      <schemavariable name="%a">$subset($complement($diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as vertex;$and($mem(\var x as vertex,varAtPre as set(vertex)) as bool,$and($mem(\var x as vertex,V2 as set(vertex)) as bool,$not($mem(\var x as vertex,N2 as set(vertex)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0" id="361">
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1" id="362">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1" id="363">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[17;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1" id="364">
      <find>A.20</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || v := v2 as vertex || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || C := N2 as set(vertex) || N := emptyset as set(vertex) || d := $plus(d1 as int,1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1" id="365">
      <find>A.20</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,1,1" id="366">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[73;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1" id="367">
      <find>A.19</find>
      <schemavariable name="%t">$not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,1,1" id="368">
      <find>A.19.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,1,1" id="369">
      <find>A.19</find>
      <schemavariable name="%b">(\forall x as vertex;$not($mem(\var x as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,1" id="370">
      <find>S.3</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x3</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,1,1" id="371">
      <find>S.3</find>
      <schemavariable name="%b">$mem(x3 as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1" id="372">
      <find>A.19</find>
      <schemavariable name="%x">x3 as vertex</schemavariable>
      <schemavariable name="%a">C1 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1,1,1" id="373">
      <find>A.19</find>
      <schemavariable name="%a">$mem(x3 as vertex,C1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(x3 as vertex,singleton(v2 as vertex) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,1,1" id="374">
      <find>A.20</find>
      <schemavariable name="%b">$mem(x3 as vertex,singleton(v2 as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,1,1" id="375">
      <find>S.3</find>
      <schemavariable name="%y">v2 as vertex</schemavariable>
      <schemavariable name="%x">x3 as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,1,0,1,1,1,1,1" id="376">
      <find>A.19</find>
      <assume>A.8</assume>
      <schemavariable name="%x">x3 as vertex</schemavariable>
      <schemavariable name="%t">V1 as set(vertex)</schemavariable>
      <schemavariable name="%s">C1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_goto1" path="1,1,0,1,1,1,1,1" id="377">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[74;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%n">7 as int</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="n">int</typevariable>
      <typevariable name="phi">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1" id="378">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[7;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,0" id="379">
      <find>S.0</find>
      <schemavariable name="%t">$gte(d as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_antecedent" path="1,1,0,1,1,1,1,1,0" id="380">
      <find>S.0</find>
      <assume>A.2</assume>
      <schemavariable name="%b">$gte(d1 as int,0 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1" id="381">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[8;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,0" id="382">
      <find>S.0</find>
      <schemavariable name="%t">(\forall x as vertex;$impl($mem(\var x as vertex,C as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,1,1,0" id="383">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$impl($mem(\var x as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool,minconnect(src as vertex,\var x as vertex,d1 as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x4</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1,1,1,1,1,1,0" id="384">
      <find>S.0</find>
      <schemavariable name="%a">$mem(x4 as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">minconnect(src as vertex,x4 as vertex,d1 as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,0" id="385">
      <find>A.21</find>
      <schemavariable name="%x">x4 as vertex</schemavariable>
      <schemavariable name="%a">C1 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1,1,1,1,0" id="386">
      <find>A.21</find>
      <schemavariable name="%a">$mem(x4 as vertex,C1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(x4 as vertex,singleton(v2 as vertex) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,1,1,1,0" id="387">
      <find>A.22</find>
      <schemavariable name="%b">$mem(x4 as vertex,singleton(v2 as vertex) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,1,1,1,0" id="388">
      <find>S.4</find>
      <schemavariable name="%y">v2 as vertex</schemavariable>
      <schemavariable name="%x">x4 as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="subset_trans" path="1,1,0,1,1,1,1,1,1,0" id="389">
      <find>A.21</find>
      <assume>A.8</assume>
      <schemavariable name="%x">x4 as vertex</schemavariable>
      <schemavariable name="%t">V1 as set(vertex)</schemavariable>
      <schemavariable name="%s">C1 as set(vertex)</schemavariable>
      <typevariable name="t">set(vertex)</typevariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,0" id="390">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1" id="391">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[9;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,0" id="392">
      <find>S.0</find>
      <schemavariable name="%t">(\forall y as vertex;$equiv($mem(\var y as vertex,N as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d as int,1 as int) as int) as bool,$mem(\var y as vertex,V as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,1,0,1,1,1,1,1,1,1,0" id="393">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var y as vertex,N2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$and(minconnect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool,$mem(\var y as vertex,V2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,1,1,1,0" id="394">
      <find>S.0</find>
      <schemavariable name="%x">\var y as vertex</schemavariable>
      <schemavariable name="%b">$eq($mem(\var y as vertex,N2 as set(vertex)) as bool,$and(minconnect(src as vertex,\var y as vertex,$plus(d1 as int,1 as int) as int) as bool,$mem(\var y as vertex,V2 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var y as vertex)">y1</property>
    </ruleApplication>
    <ruleApplication rule="equality_apply_reverse" path="1,1,0,1,1,1,1,1,1,1,0" id="395">
      <find>S.0.0.1</find>
      <assume>A.17</assume>
      <schemavariable name="%u">$union(N1 as set(vertex),$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%t">N2 as set(vertex)</schemavariable>
      <typevariable name="u">set(vertex)</typevariable>
      <typevariable name="t">set(vertex)</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="in_union" path="1,1,0,1,1,1,1,1,1,1,0" id="396">
      <find>S.0.0</find>
      <schemavariable name="%x">y1 as vertex</schemavariable>
      <schemavariable name="%a">N1 as set(vertex)</schemavariable>
      <schemavariable name="%b">$diff(succ(v2 as vertex) as set(vertex),$union(V1 as set(vertex),tovisit2 as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="ivil.manualRuleapp">true</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,0" id="397">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1,1" id="398">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[10;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,0" id="399">
      <find>S.0</find>
      <schemavariable name="%t">(\forall z as vertex;$equiv($mem(\var z as vertex,$diff(V as set(vertex),N as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="equiv_to_eq" path="1,1,0,1,1,1,1,1,1,1,1,0" id="400">
      <find>S.0.0</find>
      <schemavariable name="%a">$mem(\var z as vertex,$diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d1 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,1,1,1,1,0" id="401">
      <find>S.0</find>
      <schemavariable name="%x">\var z as vertex</schemavariable>
      <schemavariable name="%b">$eq($mem(\var z as vertex,$diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as bool,(\exists n as int;$and($and($lte(0 as int,\var n as int) as bool,$lte(\var n as int,d1 as int) as bool) as bool,connect(src as vertex,\var z as vertex,\var n as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var z as vertex)">z1</property>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,0" id="402">
      <find>S.0.0</find>
      <schemavariable name="%x">z1 as vertex</schemavariable>
      <schemavariable name="%a">V2 as set(vertex)</schemavariable>
      <schemavariable name="%b">N2 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,0" id="403">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1,1,1" id="404">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[11;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,1,0" id="405">
      <find>S.0</find>
      <schemavariable name="%t">(\forall w as vertex;$impl(minconnect(src as vertex,\var w as vertex,$plus(d as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,C as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,1,1,1,1,1,0" id="406">
      <find>S.0</find>
      <schemavariable name="%x">\var w as vertex</schemavariable>
      <schemavariable name="%b">$impl(minconnect(src as vertex,\var w as vertex,$plus(d1 as int,1 as int) as int) as bool,$or($mem(\var w as vertex,N2 as set(vertex)) as bool,(\exists q as vertex;$and($mem(\var w as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var w as vertex)">w5</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1,1,1,1,1,1,1,1,1,0" id="407">
      <find>S.0</find>
      <schemavariable name="%a">minconnect(src as vertex,w5 as vertex,$plus(d1 as int,1 as int) as int) as bool</schemavariable>
      <schemavariable name="%b">$or($mem(w5 as vertex,N2 as set(vertex)) as bool,(\exists q as vertex;$and($mem(w5 as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="or_right" path="1,1,0,1,1,1,1,1,1,1,1,1,0" id="408">
      <find>S.0</find>
      <schemavariable name="%a">$mem(w5 as vertex,N2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists q as vertex;$and($mem(w5 as vertex,succ(\var q as vertex) as set(vertex)) as bool,$mem(\var q as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,1,0" id="409">
      <find>S.4.0.1</find>
      <schemavariable name="%x">\var q as vertex</schemavariable>
      <schemavariable name="%a">C1 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,1,1,1,1,1,1,0" id="410">
      <find>S.4.0.1.1.0</find>
      <schemavariable name="%y">v2 as vertex</schemavariable>
      <schemavariable name="%x">\var q as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,0" id="411">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1,1,1,1" id="412">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[12;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="413">
      <find>S.0</find>
      <schemavariable name="%t">$impl($eq(C as set(vertex),emptyset as set(vertex)) as bool,$eq(N as set(vertex),emptyset as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="414">
      <find>S.0.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="415">
      <find>S.0.1</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">N2 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="416">
      <find>S.0</find>
      <schemavariable name="%a">(\forall x as vertex;$not($mem(\var x as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall x as vertex;$not($mem(\var x as vertex,N2 as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="417">
      <find>A.21.0.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">C1 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="418">
      <find>A.21.0.0.1.0</find>
      <schemavariable name="%y">v2 as vertex</schemavariable>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="419">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$not($mem(\var x as vertex,N2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var x as vertex)">x6</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="420">
      <find>S.0</find>
      <schemavariable name="%b">$mem(x6 as vertex,N2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,1,0" id="421">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1" id="422">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[13;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(C as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="423">
      <find>S.0</find>
      <schemavariable name="%t">$subset(C as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,0" id="424">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1" id="425">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[14;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="426">
      <find>S.0</find>
      <schemavariable name="%t">$subset(N as set(vertex),V as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0" id="427">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1" id="428">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[15;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="429">
      <find>S.0</find>
      <schemavariable name="%t">$not($mem(dest as vertex,$diff($diff(V as set(vertex),N as set(vertex)) as set(vertex),C as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="430">
      <find>S.0</find>
      <schemavariable name="%b">$mem(dest as vertex,$diff($diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex),$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="431">
      <find>A.21</find>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <schemavariable name="%a">$diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="432">
      <find>A.21</find>
      <schemavariable name="%a">$mem(dest as vertex,$diff(V2 as set(vertex),N2 as set(vertex)) as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(dest as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="433">
      <find>A.22</find>
      <schemavariable name="%b">$mem(dest as vertex,$diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="434">
      <find>A.21</find>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <schemavariable name="%a">V2 as set(vertex)</schemavariable>
      <schemavariable name="%b">N2 as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="435">
      <find>A.21</find>
      <schemavariable name="%a">$mem(dest as vertex,V2 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($mem(dest as vertex,N2 as set(vertex)) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_left" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="436">
      <find>A.22</find>
      <schemavariable name="%b">$mem(dest as vertex,N2 as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="437">
      <find>S.3</find>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <schemavariable name="%a">C1 as set(vertex)</schemavariable>
      <schemavariable name="%b">singleton(v2 as vertex) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_singleton" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="438">
      <find>S.3.1.0</find>
      <schemavariable name="%y">v2 as vertex</schemavariable>
      <schemavariable name="%x">dest as vertex</schemavariable>
      <typevariable name="y">vertex</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="439">
      <find>S.3</find>
      <schemavariable name="%a">$mem(dest as vertex,C1 as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">$not($eq(dest as vertex,v2 as vertex) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0" id="440">
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="441">
      <find>S.3</find>
      <schemavariable name="%b">$eq(dest as vertex,v2 as vertex) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="442">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="443">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[16;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$prec($complement($diff(V as set(vertex),$union(C as set(vertex),N as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="444">
      <find>S.0</find>
      <schemavariable name="%t">$prec($complement($diff(V as set(vertex),$union(C as set(vertex),N as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="prec_set" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="445">
      <find>S.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">$complement($diff(V2 as set(vertex),$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <schemavariable name="%b">varAtPre as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="446">
      <find>S.0.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">varAtPre as set(vertex)</schemavariable>
      <schemavariable name="%b">$complement($diff(V2 as set(vertex),$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_complement" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="447">
      <find>S.0.0.1.0.1.0</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">$diff(V2 as set(vertex),$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="448">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%b">$mem(\var x as vertex,$diff(V2 as set(vertex),$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="in_diff" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="449">
      <find>S.0.0.1.0.1</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%a">V2 as set(vertex)</schemavariable>
      <schemavariable name="%b">$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)</schemavariable>
      <typevariable name="b">set(vertex)</typevariable>
      <typevariable name="a">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="finite_fullset" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="450">
      <find>S.0.1</find>
      <assume>A.0</assume>
      <schemavariable name="%s">varAtPre as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="a">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_true_r" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="451">
      <find>S.0</find>
      <schemavariable name="%a">$and($subset($complement($diff(V2 as set(vertex),$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool,(\exists x as vertex;$and($mem(\var x as vertex,varAtPre as set(vertex)) as bool,$and($mem(\var x as vertex,V2 as set(vertex)) as bool,$not($mem(\var x as vertex,$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0" id="452">
      <find>S.0</find>
      <schemavariable name="%a">$subset($complement($diff(V2 as set(vertex),$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as set(vertex)) as set(vertex),varAtPre as set(vertex)) as bool</schemavariable>
      <schemavariable name="%b">(\exists x as vertex;$and($mem(\var x as vertex,varAtPre as set(vertex)) as bool,$and($mem(\var x as vertex,V2 as set(vertex)) as bool,$not($mem(\var x as vertex,$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0" id="453">
    </ruleApplication>
    <ruleApplication rule="exists_right" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="454">
      <find>S.0</find>
      <schemavariable name="%inst">v2 as vertex</schemavariable>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%b">$and($mem(\var x as vertex,varAtPre as set(vertex)) as bool,$and($mem(\var x as vertex,V2 as set(vertex)) as bool,$not($mem(\var x as vertex,$union($diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex),N2 as set(vertex)) as set(vertex)) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">vertex</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">vertex</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1" id="455">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="456">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[17;bfs'']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">false as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="457">
      <find>A.21</find>
      <schemavariable name="%t">false as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || d := d1 as int || v := v2 as vertex || C := $diff(C1 as set(vertex),singleton(v2 as vertex) as set(vertex)) as set(vertex) || Vo := V1 as set(vertex) || No := N1 as set(vertex) || tovisit := tovisit2 as set(vertex) || w := w3 as vertex || V := V2 as set(vertex) || N := N2 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1" id="458">
      <find>A.21</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,1" id="459">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[65;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$not($not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1" id="460">
      <find>A.10</find>
      <schemavariable name="%t">$not($not($eq(C as set(vertex),emptyset as set(vertex)) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="not_not" path="1,1,1" id="461">
      <find>A.10</find>
      <schemavariable name="%b">$eq(C1 as set(vertex),emptyset as set(vertex)) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="emptyset_equals2" path="1,1,1" id="462">
      <find>A.10</find>
      <schemavariable name="%x">\var x as vertex</schemavariable>
      <schemavariable name="%s">C1 as set(vertex)</schemavariable>
      <typevariable name="s">set(vertex)</typevariable>
      <typevariable name="x">vertex</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1" id="463">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[66;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall i as int;$impl($gte(\var i as int,0 as int) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d as int,1 as int) as int,\var i as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="int_induction_match" path="1,1,1,0" id="464">
      <find>S.0</find>
      <schemavariable name="%b">(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d as int,1 as int) as int,\var i as int) as int) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%n">\var i as int</schemavariable>
      <typevariable name="b">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,0" id="465">
      <find>S.0</find>
      <schemavariable name="%t">(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d as int,1 as int) as int,0 as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,0" id="466">
      <find>S.0</find>
      <schemavariable name="%x">\var a as vertex</schemavariable>
      <schemavariable name="%b">$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,0 as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var a as vertex)">a</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,0,0" id="467">
      <find>S.0</find>
      <schemavariable name="%b">minconnect(src as vertex,a as vertex,$plus($plus(d1 as int,1 as int) as int,0 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="plus_zero" path="1,1,1,0,0" id="468">
      <find>A.11.2</find>
      <schemavariable name="%a">$plus(d1 as int,1 as int) as int</schemavariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,0" id="469">
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,0,1" id="470">
      <find>S.0</find>
      <schemavariable name="%t">(\forall i as int;$impl($and($gte(\var i as int,0 as int) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d as int,1 as int) as int,\var i as int) as int) as bool) as bool) as bool) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d as int,1 as int) as int,$plus(\var i as int,1 as int) as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1" id="471">
      <find>S.0</find>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$impl($and($gte(\var i as int,0 as int) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,\var i as int) as int) as bool) as bool) as bool) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,$plus(\var i as int,1 as int) as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var i as int)">i</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,0,1" id="472">
      <find>S.0</find>
      <schemavariable name="%a">$and($gte(i as int,0 as int) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,i as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,$plus(i as int,1 as int) as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="and_left" path="1,1,1,0,1" id="473">
      <find>A.11</find>
      <schemavariable name="%a">$gte(i as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,i as int) as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,0,1" id="474">
      <find>S.0</find>
      <schemavariable name="%x">\var a as vertex</schemavariable>
      <schemavariable name="%b">$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,$plus(i as int,1 as int) as int) as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">vertex</typevariable>
      <property name="skolemName(\var a as vertex)">a1</property>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,0,1" id="475">
      <find>S.0</find>
      <schemavariable name="%b">minconnect(src as vertex,a1 as vertex,$plus($plus(d1 as int,1 as int) as int,$plus(i as int,1 as int) as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,0,1" id="476">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,1,1" id="477">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[67;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall i as int;$impl($gte(\var i as int,0 as int) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d as int,1 as int) as int,\var i as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1" id="478">
      <find>A.11</find>
      <schemavariable name="%t">(\forall i as int;$impl($gte(\var i as int,0 as int) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d as int,1 as int) as int,\var i as int) as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1,1" id="479">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[68;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall j as int;$impl($gt(\var j as int,d as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var j as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,0" id="480">
      <find>S.0</find>
      <schemavariable name="%t">(\forall j as int;$impl($gt(\var j as int,d as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var j as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,0" id="481">
      <find>S.0</find>
      <schemavariable name="%x">\var j as int</schemavariable>
      <schemavariable name="%b">$impl($gt(\var j as int,d1 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var j as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var j as int)">j</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,0" id="482">
      <find>S.0</find>
      <schemavariable name="%a">$gt(j as int,d1 as int) as bool</schemavariable>
      <schemavariable name="%b">$not(minconnect(src as vertex,dest as vertex,j as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,1,0" id="483">
      <find>S.0</find>
      <schemavariable name="%b">minconnect(src as vertex,dest as vertex,j as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="gt_to_lt" path="1,1,1,1,0" id="484">
      <find>A.12</find>
      <schemavariable name="%a">j as int</schemavariable>
      <schemavariable name="%b">d1 as int</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="forall_left_hide" path="1,1,1,1,0" id="485">
      <find>A.11</find>
      <schemavariable name="%inst">$minus($minus(j as int,d1 as int) as int,1 as int) as int</schemavariable>
      <schemavariable name="%x">\var i as int</schemavariable>
      <schemavariable name="%b">$impl($gte(\var i as int,0 as int) as bool,(\forall a as vertex;$not(minconnect(src as vertex,\var a as vertex,$plus($plus(d1 as int,1 as int) as int,\var i as int) as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="inst">int</typevariable>
      <property name="ivil.manualRuleapp">true</property>
      <property name="interact(%inst)">int</property>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,0" id="486">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assume" path="1,1,1,1,1" id="487">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[69;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">(\forall j as int;$impl($gt(\var j as int,d as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var j as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1" id="488">
      <find>A.12</find>
      <schemavariable name="%t">(\forall j as int;$impl($gt(\var j as int,d as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var j as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="gt_to_lt" path="1,1,1,1,1" id="489">
      <find>A.12.0.0</find>
      <schemavariable name="%a">\var j as int</schemavariable>
      <schemavariable name="%b">d1 as int</schemavariable>
      <typevariable name="b">int</typevariable>
      <typevariable name="a">int</typevariable>
    </ruleApplication>
    <ruleApplication rule="prg_assignment" path="1,1,1,1,1" id="490">
      <find>S.0.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[70;bfs']](true as bool) as bool</schemavariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1" id="491">
      <find>S.0</find>
      <schemavariable name="%t">{ d := $neg(1 as int) as int }([[71;bfs']](true as bool) as bool)</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1" id="492">
      <find>S.0.10</find>
      <schemavariable name="%t">$neg(1 as int) as int</schemavariable>
      <typevariable name="t">int</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || d := d1 as int || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1,1,1" id="493">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[71;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$gte(d as int,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,0" id="494">
      <find>S.0</find>
      <schemavariable name="%t">$gte(d as int,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1,1,1,1,0" id="495">
      <find>S.0</find>
      <schemavariable name="%t">$gte($neg(1 as int) as int,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,0" id="496">
      <find>S.0</find>
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1,1,1,1" id="497">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[72;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($lt(d as int,0 as int) as bool,(\forall m as int;$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,0" id="498">
      <find>S.0</find>
      <schemavariable name="%t">$impl($lt(d as int,0 as int) as bool,(\forall m as int;$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,1,1,0" id="499">
      <find>S.0</find>
      <schemavariable name="%a">$lt($neg(1 as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">(\forall m as int;$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1,1,1,1,1,0" id="500">
      <find>A.13</find>
      <schemavariable name="%t">$lt($neg(1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="true_left" path="1,1,1,1,1,1,0" id="501">
      <find>A.13</find>
    </ruleApplication>
    <ruleApplication rule="forall_right" path="1,1,1,1,1,1,0" id="502">
      <find>S.0</find>
      <schemavariable name="%x">\var m as int</schemavariable>
      <schemavariable name="%b">$impl($gte(\var m as int,0 as int) as bool,$not(minconnect(src as vertex,dest as vertex,\var m as int) as bool) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="x">int</typevariable>
      <property name="skolemName(\var m as int)">m</property>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,1,1,0" id="503">
      <find>S.0</find>
      <schemavariable name="%a">$gte(m as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">$not(minconnect(src as vertex,dest as vertex,m as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="not_right" path="1,1,1,1,1,1,0" id="504">
      <find>S.0</find>
      <schemavariable name="%b">minconnect(src as vertex,dest as vertex,m as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="auto_smt_close" path="1,1,1,1,1,1,0" id="505">
    </ruleApplication>
    <ruleApplication rule="auto_tbox_assert" path="1,1,1,1,1,1,1" id="506">
      <find>S.0</find>
      <schemavariable name="%phi">true as bool</schemavariable>
      <schemavariable name="%a">[[73;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">$impl($gte(d as int,0 as int) as bool,minconnect(src as vertex,dest as vertex,d as int) as bool) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
      <typevariable name="phi">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,1,0" id="507">
      <find>S.0</find>
      <schemavariable name="%t">$impl($gte(d as int,0 as int) as bool,minconnect(src as vertex,dest as vertex,d as int) as bool) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="impl_right" path="1,1,1,1,1,1,1,0" id="508">
      <find>S.0</find>
      <schemavariable name="%a">$gte($neg(1 as int) as int,0 as int) as bool</schemavariable>
      <schemavariable name="%b">minconnect(src as vertex,dest as vertex,$neg(1 as int) as int) as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="resolve_int_literals" path="1,1,1,1,1,1,1,0" id="509">
      <find>A.13</find>
      <schemavariable name="%t">$gte($neg(1 as int) as int,0 as int) as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="close_false_left" path="1,1,1,1,1,1,1,0" id="510">
      <find>A.13</find>
    </ruleApplication>
    <ruleApplication rule="prg_end" path="1,1,1,1,1,1,1,1" id="511">
      <find>S.0.0</find>
      <schemavariable name="%a">[[74;bfs']](true as bool) as bool</schemavariable>
      <schemavariable name="%b">true as bool</schemavariable>
      <typevariable name="b">bool</typevariable>
      <typevariable name="a">bool</typevariable>
    </ruleApplication>
    <ruleApplication rule="deep_update_simplification" path="1,1,1,1,1,1,1,1" id="512">
      <find>S.0</find>
      <schemavariable name="%t">true as bool</schemavariable>
      <typevariable name="t">bool</typevariable>
      <schemaupdate name="U">{ size := card(fullset as set(vertex)) as int || w := w1 as vertex || tovisit := tovisit1 as set(vertex) || Vo := Vo1 as set(vertex) || v := v1 as vertex || V := V1 as set(vertex) || C := C1 as set(vertex) || N := N1 as set(vertex) || No := No1 as set(vertex) || d := $neg(1 as int) as int }</schemaupdate>
    </ruleApplication>
    <ruleApplication rule="close_true_right" path="1,1,1,1,1,1,1,1" id="513">
      <find>S.0</find>
    </ruleApplication>
  </steps>
</proof>